{
  "config": "CODEGEN_COMPLETE_CODEFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) <= threshold && numbers.get(j) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) < threshold && numbers.get(j) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i).equals(numbers.get(j))){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) <= threshold && numbers.get(j) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) < threshold && numbers.get(j) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0){\n        result.add(current_string);\n    }\n    return result;\n  }\n\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            current_string = current_string.substring(0, current_string.length() - 1);\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0){\n        result.add(current_string);\n    }\n    return result;\n  }\n"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == 2.0) {\n            return 2.0;\n        }\n        if (number == 3.0) {\n            return 3.0;\n        }\n        if (number == 4.0) {\n            return 4.0;\n        }\n        if (number == 5.0) {\n            return 5.0;\n        }\n        ",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == -2.0) {\n            return -2.0;\n        }\n        if (number == -3.0) {\n            return -3.0;\n        }\n        if (number == -4.0) {\n            return -4",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == 2.0) {\n            return 2.0;\n        }\n        if (number == 3.0) {\n            return 3.0;\n        }\n        if (number == 4.0) {\n            return 4.0;\n        }\n        if (number == 5.0) {\n            return 5.0;\n        }\n\n        ",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == 2.0) {\n            return 2.0;\n        }\n        if (number == -2.0) {\n            return -2.0;\n        }\n        if (number == 3.0) {\n            return 3.0;\n",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == 2.0) {\n            return 2.0;\n        }\n        if (number == 3.0) {\n            return 3.0;\n        }\n        if (number == 4.0) {\n            return 4.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == 2.0) {\n            return 2.0;\n        }\n        if (number == 3.0) {\n            return 3.0;\n        }\n        if (number == 4.0) {\n            return 4.0;\n        }\n        return number;\n    }\n}\n",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == -2.0) {\n            return -2.0;\n        }\n        if (number == -3.0) {\n            return -3.0;\n        }\n        return number;\n    }\n}\n",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == Double.MAX_VALUE) {\n            return Double.MAX_VALUE;\n        }\n        if (number == Double.MIN_VALUE) {\n            return Double.MIN_VALUE;\n        }\n        if (number == Double.NEGATIVE_IN",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == -2.0) {\n            return -2.0;\n        }\n        if (number == -3.0) {\n            return -3.0;\n        }\n        if (number < 0.0) {\n            return 0.0",
        "public static double truncate_number(double number) {\n        if (number == 0.0) {\n            return 0.0;\n        }\n        if (number == 1.0) {\n            return 1.0;\n        }\n        if (number == -1.0) {\n            return -1.0;\n        }\n        if (number == Double.MAX_VALUE) {\n            return Double.MAX_VALUE;\n        }\n        if (number == Double.MIN_VALUE) {\n            return Double.MIN_VALUE;\n        }\n        if (number == Double.POSITIVE_IN"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 1;\n  }\n\n  public static boolean below_two(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 2;\n  }\n\n  public static boolean below_three(List<Integer>",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 1;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_one(List<Integer>",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 1;\n  }\n\n  public static boolean above_one(List<Integer>",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 1;\n  }\n\n  public static boolean above_one(List<Integer>",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance >= 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 1;\n  }\n\n  public static boolean above_one(List<Integer>",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_one(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance > 1;\n  }\n\n  public static boolean below_one(List<Integer>"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n\npublic static double mean_squared_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number * number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        dev",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n\npublic static double mean_squared_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number*number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        dev",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n\npublic static double mean_squared_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number * number;\n    }\n    double mean = sum / numbers.size();\n    double deviation = 0.;\n    for (Double number : numbers){\n        deviation +=",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation;\n}\n\npublic static double mean_squared_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number * number;\n    }\n    double mean = sum / numbers.size();\n    double squared_deviation = 0.;\n    for (Double number : numbers){\n        "
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    if (numbers.size() == 3) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        result.add(numbers",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    result.add(numbers.get(0));\n    result.add(numbers.get(1));\n    result.add(numbers.get(2));\n    result.add(numbers",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    if (numbers.size() == 3) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(2));\n        result.add(numbers",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    result.add(numbers.get(0));\n    result.add(numbers.get(1));\n    result.add(numbers.get(numbers.size() - 1));\n    ",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    if (numbers.size() % 2 == 0) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    result.add(numbers.get(0));\n    result.add(numbers.get(1));\n    result.add(numbers.get(0));\n    result.add(numbers",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    result.add(numbers.get(0));\n    result.add(numbers.get(1));\n    result.add(numbers.get(2));\n    return result;\n  }",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    if (numbers.size() % 2 == 0) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n    } else {\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(numbers.get(i + 1));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    result.add(numbers.get(numbers.size() - 2));\n    return result",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    if (numbers.size() == 1) {\n        result.add(numbers.get(0));\n        return result;\n    }\n    if (numbers.size() == 2) {\n        result.add(numbers.get(0));\n        result.add(numbers.get(1));\n        return result;\n    }\n    result.add(numbers.get(0));\n    result.add(numbers.get(1));\n    for (int i = 2; i < numbers.size(); i++) {\n        result"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups)",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<String> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<String> result = new ArrayList<String>();\n    for (String paren_group : p",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<Integer> parse_nested_brackets(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : p"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_contains(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String>",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_contains(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring))\n        result.add(string);\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_contains(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_string(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring, start, end)){\n        result.add(string);\n      }\n    }\n    return result;\n"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static Integer[] product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static List<Integer> product(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) * numbers",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static Integer[] product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i);\n        }",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static List<Integer> product(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) *",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] sum = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            sum[i] = numbers.get(i) * numbers.get(i);\n        }\n        return sum;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static List<Integer> product(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n        ",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static List<Integer> sum_product(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min ==",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      }\n      else if (n > running_max){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min == null){\n        ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          result.add(n);\n          running_max = n;\n        }\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min ==",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      }\n      else{\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n  \n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n}\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers) {\n      if (running",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n}\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        if (n > running_max) {\n          result.add(n);\n          running_max = n;\n        }\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result = result.substring(0, beginning_of_suffix);\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (! is_palindrome(result.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n        result = result.substring(beginning_of_suffix);\n    }\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (! is_palindrome(result.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n        result = result.substring(0, beginning_of_suffix);\n    }\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (beginning_of_suffix < str.length()){\n        result = result.substring(0, beginning_of_suffix) + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (is_palindrome(result.substring(beginning_of_suffix))){\n        result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (! is_palindrome(result.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n        result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    }\n    return result;\n}\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (is_palindrome(result.substring(beginning_of_suffix))){\n        result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    for (int i = 0; i < str.length(); i++){\n        ",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (is_palindrome(result.substring(beginning_of_suffix))){\n        result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length(); i++){\n        if (str.charAt(i)!= str.charAt(str",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (beginning_of_suffix < str.length()){\n        result = result.substring(0, beginning_of_suffix) + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length(); i++){\n        if (str.charAt(i)!= str.charAt(str.length() - 1 - i",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    while (beginning_of_suffix < str.length()){\n        result = result.substring(0, beginning_of_suffix) + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    for (int i = 0; i < str.length(); i++){\n        if (str.charAt("
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"1\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(String a, int b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"1\";\n        }\n        else{\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n\npublic static String string_xor(String a, String b, String c){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i) && a.charAt(i) == c.charAt(i)){\n            result += \"0\";\n        } else {\n            result += a.charAt("
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      maxlen = Math.max(maxlen, string.length());\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen) {\n        maxlen = len;\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.get(maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return maxlen + 1;\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.size() > maxlen? strings.get(maxlen) : \"\";\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen) {\n        maxlen = len;\n      }\n    }\n    return strings.size() > maxlen? strings.get(maxlen) : \"\";\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen) {\n        maxlen = len;\n      }\n    }\n    return strings.get(maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n\n}\n"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n        int temp = a % c;\n        a = c;\n        c = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int d){\n    while (d > 0) {\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    while (c > 0) {\n        int temp = a % c;\n        a = c;\n        c = temp;\n    }\n    return a;\n}\n\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a % b == 0) {\n            return b;\n        }\n        b = b / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n        if (a % c == 0) {\n            return c;\n        }\n        c = c / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n        c = 0;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int d){\n    while (",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a % b == 0) {\n            return b;\n        }\n        b = b / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n        if (a % b == 0) {\n            return b;\n        }\n        b = b / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int d){\n    while (b > 0) {\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n        int temp = a % c;\n        a = c;\n        c = temp;\n    }\n    return a;\n}\n\npublic static int least_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a %",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a % b == 0) {\n            return b;\n        }\n        b = b / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n        if (a % b == 0) {\n            return c;\n        }\n        b = b / 2;\n        c = c / 2;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c, int d){\n    while (d > 0) {\n"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i+1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> prefixes(String string){\n    List<String> result",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_prefixes(List<String> strings){\n    ",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_prefixes(List<String> list){\n    "
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n  }\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence(9));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(10));\n    System.out.println(string_sequence(20));\n    System.out.println(string_sequence(30));\n    System.out.println(string_sequence(40));\n    System.out.println(string_sequence(50));\n    System.out.println(string_sequence(60));\n    System.out.println(string_sequence(70));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n}\n"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n  }\n\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n        if (! distinct.contains(Character.toUpperCase(c))) {\n            distinct.add(Character.toUpperCase(c));\n        }\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n        if (! distinct.contains(Character.toUpperCase(c))) {\n            distinct.add(Character.toUpperCase(c));\n        }\n    }\n    return distinct.size();\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n        if (! distinct.contains(Character.toUpperCase(c))) {\n            distinct.add(Character.toUpperCase(c));\n        }\n    }\n    return distinct.size();\n}\n}\n"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "8,5-20,5",
      "output": [
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      switch (music_string.charAt(i)) {\n        case 'o':\n          result.add(note_map.get(\"o\"));\n          break;\n        case 'o|':\n          result.add(note_map.get(\"o|\"));\n          break;\n        case '.':\n          result.add(note_map.get(\".\"));\n          break;\n        case '|':\n          result.add(note_map.get(\"",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      switch (music_string.charAt(i)) {\n        case 'o':\n          result.add(note_map.get(\"o\"));\n          break;\n        case 'o|':\n          result.add(note_map.get(\"o|\"));\n          break;\n        case '|':\n          result.add(note_map.get(\"|\"));\n          break;\n        case '.':\n          result.add(note_map.get",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      switch (music_string.charAt(i)) {\n        case 'o':\n          result.add(note_map.get(\"o\"));\n          break;\n        case 'o|':\n          result.add(note_map.get(\"o|\"));\n          break;\n        case '.':\n          result.add(note_map.get(\".\"));\n          break;\n        case '|':\n          result.add(note_map.get(\"",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      switch (music_string.charAt(i)) {\n        case 'o':\n          result.add(note_map.get(\"o\"));\n          break;\n        case 'o|':\n          result.add(note_map.get(\"o|\"));\n          break;\n        case '.':\n          result.add(note_map.get(\".\"));\n          break;\n        default:\n          break;\n      }\n    }\n    return result",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      char c = music_string.charAt(i);\n      if (note_map.containsKey(c)) {\n        result.add(note_map.get(c));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            if (string.charAt(i + 3) == substring.charAt(3)) {\n              if (string.charAt(i + 4) == substring.charAt(",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < substring.length(); i++) {\n      if (string.charAt(i) == substring.charAt(i)) {\n        times++;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            if (string.charAt(i + 3) == substring.charAt(3)) {\n              times++;\n            }\n          }\n        }\n      }\n    }\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        times++;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            if (string.charAt(i + 3) == substring.charAt(3)) {\n              return times;\n            }\n          }\n        }\n      }\n    }",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < substring.length(); i++) {\n      if (string.charAt(i) == substring.charAt(i)) {\n        times++;\n      }\n    }\n    return times;\n  }\n\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(i)) {\n        times++;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            if (string.charAt(i + 3) == substring.charAt(3)) {\n              return times;\n            }\n          }\n        }\n      }\n      times",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            times++;\n          }\n        }\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.charAt(i) == substring.charAt(0)) {\n        if (string.charAt(i + 1) == substring.charAt(1)) {\n          if (string.charAt(i + 2) == substring.charAt(2)) {\n            if (string.charAt(i + 3) == substring.charAt(3)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    return number_array.get(0);\n  }\n}\n",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return -1;\n        }\n        if (i2 == null) {\n          return 1;\n        }",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return 1;\n        }\n        if (i2 == null) {\n          return -1;\n        }",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return -1;\n        }\n        if (i2 == null) {\n          return 1;\n        }\n        return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null) {\n          i1 = 0;\n        }\n        if (i2 == null) {\n          i2 = 0;\n        }\n        return i1.compareTo(i2);\n      }\n    });\n",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        } else {",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        } else {\n          return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return 1;\n        }\n        if (i2 == null) {\n          return -1;\n        }\n        return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        }\n        ",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return 1;\n        } else if (i2 == null) {\n          return -1;\n        } else {"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        distance = distance;\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        distance = distance;\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n      }\n    }\n    return result;\n  }\n\n  public static double[] find_closest_elements(int[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n        distance = distance;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n        break;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n        return result;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n        return result;\n      }\n    }\n    return result;\n  }\n\n  public static double[] find_closest_elements(int[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n        distance = distance;\n      }\n    }\n    return result;\n  }\n\n  public static double[] find_closest_elements(int[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i + 1]);\n      if (distance < distance) {\n        distance = distance;\n        result[0] = numbers[i];\n        result[1] = numbers[i + 1];\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      distance = Math.abs(numbers[i] - numbers[i+1]);\n      if (distance < distance) {\n        result[0] = numbers[i];\n        result[1] = numbers[i+1];\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] >",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] res = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        res[i] = (numbers[i] - min) / (max - min);\n    }\n    return res;\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] res = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        res[i] = (numbers[i] - min) / (max - min);\n    }\n    return res;\n  }\n}\n"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String) {\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Boolean> filter_booleans(List<Object>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String) {\n        result.add((String)value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String) {\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Boolean> filter_booleans(List<",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String) {\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add(((Integer) value).intValue());\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add(((String) value).trim());\n      }\n    }\n    return result;\n  }\n\n  public static List<Boolean> filter_"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.length() - string2.length();\r\n    }\r\n\r\n",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.compareTo(string2);\r\n    }\r\n\r\n    ",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.charAt(n) - string2.charAt(n);\r\n",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public static int strncmp(String",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.length() - string2.length();\r\n    }\r\n}\r",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i))\r\n                return string1.charAt(i) - string2.charAt(i);\r\n        }\r\n        return string1.length() - string2.length();\r\n    }\r\n\r\n    public static int str",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.compareTo(string2);\r\n    }\r\n}\r\n",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i))\r\n                return string1.charAt(i) - string2.charAt(i);\r\n        }\r\n        return string1.compareTo(string2);\r\n    }\r\n\r\n    public static int strnc",
        "public static int strlen(String string){\r\n        return string.length();\r\n    }\r\n\r\n    public static int strncmp(String string1, String string2, int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            if (string1.charAt(i)!= string2.charAt(i)) {\r\n                return string1.charAt(i) - string2.charAt(i);\r\n            }\r\n        }\r\n        return string1.compareTo(string2);\r\n    }\r\n\r\n}"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else if (n == 7) {\n            return 8;\n        ",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n % 2 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 4;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else if (n % 7 == 0) {\n            return 6;\n        } else if (n % 11 == 0) {\n            return 7;\n        } else if (n %",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n % 2 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 4;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else if (n % 7 == 0) {\n            return 6;\n        } else if (n % 9 == 0) {\n            return 7;\n        } else if (n %",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n % 2 == 0) {\n            return 3;\n        }\n        if (n % 3 == 0) {\n            return 4;\n        }\n        if (n % 5 == 0) {\n            return 5;\n        }\n        if (n % 7 == 0) {\n            return 6;\n        }\n        if (n % 9 == 0) {\n            return 7;\n        ",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n % 2 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 4;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else if (n % 7 == 0) {\n            return 7;\n        } else if (n % 11 == 0) {\n            return 11;\n        } else if (n %",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n % 2 == 0) {\n            return 3;\n        }\n        if (n % 3 == 0) {\n            return 4;\n        }\n        if (n % 5 == 0) {\n            return 5;\n        }\n        if (n % 7 == 0) {\n            return 6;\n        }\n        if (n % 11 == 0) {\n            return 7;\n        ",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        if (n == 3) {\n            return 4;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 6;\n        }\n        if (n == 6) {\n            return 7;\n        }\n        if (n == 7) {",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n % 2 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 4;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else if (n % 7 == 0) {\n            return 6;\n        } else if (n % 11 == 0) {\n            return 7;\n        } else {\n            return",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n % 2 == 0) {\n            return 4;\n        } else if (n % 3 == 0) {\n            return 5;\n        } else if (n % 5 == 0) {\n            return 6;\n        } else if (n % 7 == 0) {\n            return 8;\n        } else if (n % 9 ==",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n % 2 == 0) {\n            return 4;\n        } else if (n % 3 == 0) {\n            return 5;\n        } else if (n % 5 == 0) {\n            return 6;\n        } else if (n % 7 == 0) {\n            return 8;\n        } else if (n % 11 =="
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n  }\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args){\n    int n = Integer.parseInt(args[0]);\n    System.out.println(factorize(n));\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(factorize(10));\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(factorize(5));\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println(factorize(n));\n}\n}\n"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)) {\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        count.put(n, 1);\n        result.add(n);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        result.add(n);\n        count.put(n, 1);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        count.put(n, 1);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        count.put(n, 1);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) > 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) > 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        count.put(n, 1);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) > 1) {\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (!count.containsKey(n)){\n        count.put(n, 1);\n      } else {\n        count.put(n, count.get(n) + 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) > 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) == count.get(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        } else {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String string : strings) {\n            sb.append(string);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n        }\n        return sb.toString();\n    }\n\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n}\n"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string.substring(prefix.length()));\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)) {\n        result.add(string.substring(0, string.length() - suffix.length()));",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string.substring(prefix.length()));\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string.substring(0, string.length() - suffix.length()));"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(-number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_zero(List<Integer> numbers) {\n    List",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_even(List<Integer> numbers) {\n    List",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(-1 * number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_zero(List<Integer> numbers) {\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_positive_negative(List<Integer> numbers) {\n"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    if (n == 3)\n        return true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n        return false;\n    if (n % 17 == 0)\n        ",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2)\n        if (n % i == 0 && is_prime(i))\n            return false;\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    if (n == 3)\n        return true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n        return false;\n    if (n % 17!= 0)\n        ",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    if (n == 3)\n        return true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n        return false;\n    return is_prime(n - 1);\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    if (n == 3)\n        return true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return false;\n    if (n % 11!= 0)\n        return false;\n    if (n % 13 == 0)\n        return false;\n    if (n % 17!= 0)\n        ",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    if (n == 3)\n        return true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return false;\n    if (n % 9 == 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n        "
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            return center;\n        }\n        end *= 2.;\n        begin *= 2.;\n    }\n    return -1.;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin >",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) < 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin >",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return end;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = 1.;\n    double end = -1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin >",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return end - begin;\n}\n"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 1){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 1){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    Collections.sort(result);\n    return result;\n  }\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 2){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)) {\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if(!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)) {\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)) result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n))\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n))\n        result.add(n);\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {",
      "function range": "6,5-14,5",
      "output": [
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        int min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                ",
        "public static int max_element(List<Integer> l) {\n        if (l == null) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        if (l == null) {\n            return 0;\n        }\n        int min = l.get(0);",
        "public static int max_element(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int min =",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                ",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        if (l == null) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        int min = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                ",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n}\n"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz2(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz3(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz2(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz3(int n) {\n    int result = 0;\n    for (int i = 0; i",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz2(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz3(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz2(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz3(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1) {\n        "
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 1) {\n        result[i] = l[i];",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i]",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2!= 0) {\n        result[i] = l[i];",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -1 * l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n}\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] % 2;\n    }\n    return result;\n  }\n\n  public static int[] reverse(int[] l) {\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -1 * l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i]"
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    groups.add(sb.toString());\n    return groups.toArray(new String[groups.size()]);\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n      }\n    }\n    groups.add(sb.toString());\n    return groups.toArray(new String[groups.size()]);\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n      }\n    }\n    groups.add(sb.toString());\n    return groups.toArray(new String[groups.size()]);\n  }\n\n  /**\n   *",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n      }\n    }\n    return groups.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    groups.add(sb.toString());\n    return groups.toArray(new String[0]);\n  }\n\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        groups.add(Integer.toString(c - '0'));\n      } else {\n        groups.add(Integer.toString(c));\n      }\n    }\n    return groups.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    return groups.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    groups.add(sb.toString());\n    return groups;\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    groups.add(sb.toString());\n    return groups.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        groups.add(sb.toString());\n        sb = new StringBuilder();\n        sb.append(c);\n      }\n    }\n    return groups.toArray(new String[groups.size()]);\n  }\n}\n"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.size() == len) {\n            return fib.get(0);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (len == fib.size()) {\n            return fib.get(0);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n            } else {\n                break;\n            }\n        }\n    }\n    return fib.get(fib.size() - 1);\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.size() == len) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) > n) {\n                fib.set(i, fib.get(i) - n);\n                break;\n            }\n        }\n        if (fib.size() == len) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(0);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.size() == len) {\n            return fib.get(0);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println(prime_fib(",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            if (fib.get(i) < n) {\n                fib.set(i, fib.get(i) + 1);\n                break;\n            }\n        }\n        if (fib.size() == len) {\n            return fib.get(0);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    System.out.println(prime_fib(10));\n    System.out.println(prime_fib"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_one(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_two(int[] numbers) {\n    for (int i",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i] == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_one(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_one(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_minus_one(int[] numbers) {\n    for (",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i] > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i]!= 0) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i] == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_one(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      if (numbers[i] == 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean triples_sum_to_two(int[] numbers) {\n    for (int i",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i]!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else if (n == 7) {\n            return 8;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        if (n == 2)\n            return 2;\n        if (n == 3)\n            return 3;\n        if (n == 4)\n            return 4;\n        if (n == 5)\n            return 5;\n        if (n == 6)\n            return 6;\n        if (n == 7)\n            return 7;\n        if (n == 8)\n            return 8;\n        if (n == 9)\n            return",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return -1;\n        }\n    }\n\n",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        return -1;\n    }",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return -1;\n        }\n    }\n",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }\n\n    ",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return 0;\n        }\n    }\n\n    ",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        return 0;\n    }\n\n"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> reverse_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n :",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> min_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n :",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> reverse_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i =",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> add_list(List<Integer> l1, List<Integer> l2) {\n    List<Integer> result = new ArrayList<Integer>",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> remove_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n :",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> get_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n :"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_minus_one(List<Integer> l) {",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    "
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result += String.valueOf(x % base);\n      x /= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = String.valueOf(x % base) + result;\n      x /= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = result + x % base;\n      x /= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result += (x % base) + \"\";\n      x /= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result += String.valueOf(x % base);\n      x /= base;\n    }\n    return result;\n  }\n\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = String.valueOf(x % base) + result;\n      x /= base;\n    }\n    return result;\n  }\n\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = String.valueOf(x % base) + result;\n      x = x / base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = result.concat(String.valueOf(x % base));\n      x /= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result += base;\n      x -= base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result += base;\n      x /= 10;\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(Math.pow(a, 2)",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * a + b * b + c * c);\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return Math.sqrt(a * a + b * b + c * c + d * d);\n    }\n\n    public static double triangle_area(double a, double b, double c,",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return Math.sqrt(Math.pow(a, 2)",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double h1, double h2) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h1, 2) + Math.pow(h2, 2));\n    }\n\n    public static double triangle_area(double a, double h1, double h2, double h3) {\n        return Math.sqrt(Math.",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * a + b * b + c * c);\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * a + b * b + c * c + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c,",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(Math.pow(a, 2) + Math.",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(Math.pow(a, 2)",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.pow(a, 2) + Math.pow",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * a + b * b + c * c);\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return Math.sqrt(a * a + b * b + c * c + d * d);\n    }\n}\n",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * a + b * b + c * c);\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return Math.sqrt(a * a + b * b + c * c + d * d);\n    }\n\n    public static double triangle_area(double x, double y, double z)"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0)",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n  }\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(1) + result.get(2) + result.get(3) + result.get(4)\n        );\n        result.add(\n            result.get(2) + result.get(3) + result.get(4) + result.get(5)\n        );\n        result.add(\n            result.get(3) + result.get(4) + result.get(5) + result.get(6)\n        );\n        result.add(\n            result.get(4)",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n  ",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(1) + result.get(2) + result.get(3) + result.get(0)\n        );\n        result.add(\n            result.get(2) + result.get(3) + result.get(0) + result.get(1)\n        );\n        result.add(\n            result.get(3) + result.get(0) + result.get(1) + result.get(2)\n        );\n        result.add(\n            result.get(0)",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(1) + result.get(2) + result.get(3) + result.get(4)\n        );\n        result.add(\n            result.get(1) + result.get(2) + result.get(3) + result.get(4) + result.get(5)\n        );\n        result.add(\n            result.get(1) + result.get(2) + result.get(3) + result.get(4) + result.get(5) + result.",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n - 1);"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2) - 1];\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.0;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) -",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2) - 1];\n    }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2;\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2) - 1];\n    }\n  }\n\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.0;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2 - 1",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.0;\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n      return list[(int) (list.length / 2)];\n    } else {\n      return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(i - 1)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(i + 1)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(i - 1)) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome2(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome(char[] text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text[i]!= text[text.length() - 1 - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome(char[] text) {\n    for (int i = 0; i < text.length; i += 1){\n      if (text[i]!= text[text.length - 1 - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_pal",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome2(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i) == text.charAt(text.length() - 1 - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result;\n}\n\npublic static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result;\n}\n\npublic static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modr(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result;\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int pow(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modpow(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int modq(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result *= p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result %= p;\n    }\n    return result;"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(\"\" + c);\n      } else {\n        break;\n      }\n    }\n    return s",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append(c);\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append(c);\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < string.length(); i++) {\n      sb.append(string.charAt(i));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append(c);\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else {\n        sb.append('?');\n      }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetter(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetter(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetter(c) || Character.isDigit(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        sb.append(c);\n      } else {\n        break;\n      }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetter(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else if (Character.isDigit(c)) {\n        sb.append(Character.toLowerCase(c));\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (Character.isLetter(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else if (Character.isDigit(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean below_threshold(double[] l, double t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean below_threshold(float[] l, float t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int sub(int x, int y, int z) {\n        return x - y - z;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int mul(int x, int y",
        "public static int add(int x, int y) {\r\n        return x + y;\r\n    }\r\n\r\n    public static int sub(int x, int y) {\r\n        return x - y;\r\n    }\r\n\r\n    public static int mul(int x, int y) {\r\n        return x * y;\r\n    }\r\n\r\n    public static int div(int x, int y) {\r\n        return x / y;\r\n    }\r\n\r\n    public static int mod(int x, int y) {\r\n        return x % y;\r\n    }",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int subtract(int x, int y) {\n        return x - y;\n    }\n\n    public static int subtract(int x, int y, int z) {\n        return x - y - z;\n    }\n\n    public static int multiply(int x, int y) {\n        return x * y;\n    }\n\n    public static int multiply(int x, int y",
        "public static int add(int x, int y) {\r\n\t\treturn x + y;\r\n\t}\r\n\r\n\tpublic static int sub(int x, int y) {\r\n\t\treturn x - y;\r\n\t}\r\n\r\n\tpublic static int mul(int x, int y) {\r\n\t\treturn x * y;\r\n\t}\r\n\r\n\tpublic static int div(int x, int y) {\r\n\t\treturn x / y;\r\n\t}\r\n\r\n\tpublic static int mod(int x, int y) {\r\n\t\treturn x % y;\r\n\t}",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int pow(int x, int y) {\n        return x * y;\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int pow(int x, int y) {\n        return x * y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n}\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int subtract(int x, int y) {\n        return x - y;\n    }\n\n    public static int subtract(int x, int y, int z) {\n        return x - y - z;\n    }\n\n    public static int multiply(int x, int y) {\n        return x * y;\n    }\n\n    public static int divide(int x, int y",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int sub(int x, int y, int z) {\n        return x - y - z;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int pow(int x, int y) {\n        return x ** y;\n"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     ",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            char c0 = s0.charAt(i);\n            char c1 = s1.charAt(i);\n            if (c0!= c1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null) {\n            return s1 == null;\n        }\n        if (s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else if (n == 7) {\n            return 8;\n        ",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        ",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else {\n            return fib(n - 1)",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else {\n            return fib(n - 1) + fib(n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n}",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else {\n            return n;\n        }\n    }\n\n    ",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else {\n            return fib(n - 2) + fib(n - 1);\n        }\n    }\n\n    public",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else {\n            return n;\n        }\n    }\n}"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n    }\n    return depth == 0;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n    }\n    return depth == 0;\n  }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth == 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth == 0)\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(correct_brackets(\"<>\"));\n    System.out.println(",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(correct_bracketing(\"<>\"));\n    System.out.println(correct_bracketing(\"<>\"));\n    System.out.println(correct_bracketing(\"<>\"));\n    System.out.println(correct_bracketing(\"<>\"));\n    System.out.println(correct_bracketing(\"<>\"));\n    System"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] == reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] < reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] == reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i] == reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i] > sorted[i + 1]) {\n        return false;\n      }\n    }\n    return true;\n  ",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    return Arrays.equals(sorted, reverse_sorted);\n  }\n}\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, result, 0, l1.length);\n        System.arraycopy(l2, 0, result, l1.length, l2.length);\n        return result;\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, result, 0, l1.length);\n        System.arraycopy(l2, 0, result, l1.length, l2.length);\n        return result;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int[] l3) {\n        int[] result = new int[l1.length + l2.length + l3.length];\n        System.arraycopy(l",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] r = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, r, 0, l1.length);\n        System.arraycopy(l2, 0, r, l1.length, l2.length);\n        return r;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int[] l3) {\n        int[] r = new int[l1.length + l2.length + l3.length];\n        System.arraycopy(l",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] res = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, res, 0, l1.length);\n        System.arraycopy(l2, 0, res, l1.length, l2.length);\n        return res;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int[] l3) {\n        int[] res = new int[l1.length + l2.length + l3.length];\n        System.arraycopy(l",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] r = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, r, 0, l1.length);\n        System.arraycopy(l2, 0, r, l1.length, l2.length);\n        return r;\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] res = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, res, 0, l1.length);\n        System.arraycopy(l2, 0, res, l1.length, l2.length);\n        return res;\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, result, 0, l1.length);\n        System.arraycopy(l2, 0, result, l1.length, l2.length);\n        return result;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int l3) {\n        int[] result = new int[l1.length + l2.length + l3];\n        System.arraycopy(l1, 0",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] r = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, r, 0, l1.length);\n        System.arraycopy(l2, 0, r, l1.length, l2.length);\n        return r;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int l3) {\n        int[] r = new int[l1.length + l2.length + l3];\n        System.arraycopy(l1, 0",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] res = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, res, 0, l1.length);\n        System.arraycopy(l2, 0, res, l1.length, l2.length);\n        return res;\n    }\n\n    public static int[] common(int[] l1, int[] l2, int l3) {\n        int[] res = new int[l1.length + l2.length + l3];\n        System.arraycopy(l1, 0",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length + l2.length];\n        System.arraycopy(l1, 0, result, 0, l1.length);\n        System.arraycopy(l2, 0, result, l1.length, l2.length);\n        return result;\n    }\n\n}\n"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n      if (n % j == 0) {\n        largest = j;\n      }\n    }\n    return largest;\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n      if (n % j == 0) {\n        largest = j;\n        break;\n      }\n    }\n    return largest;\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n      if (n % j == 0) {\n        largest = j;\n      }\n    }\n    return largest;\n  }\n\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n      if (n % j == 0) {\n        largest = j;\n      }\n    }\n    return largest;\n  }\n\n  public static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println(largest_prime_factor(n));\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n      if (n % j == 0) {\n        largest = j;\n      }\n    }\n    return largest;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(largest_prime_factor(1000));\n  }\n}\n"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(6));\n        System.out.println(sum_to_n(7));\n        System.out.println(sum_to_n(8));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(11));\n        System.out.println(sum_to_n(12));\n        System.out.println(sum_to_n(13));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(20));\n        System.out.println(sum_to_n(30));\n        System.out.println(sum_to_n(40));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(20));\n        System.out.println(sum_to_n(30));\n        System.out.println(sum_to_n(40));\n        System.out.println(sum_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i) * xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(int x) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static List",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i) * xs.get(i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(int x) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int x : xs) {\n      result.add(x * x);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(int x) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static int",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      int x = xs.get(i);\n      for (int j = i + 1; j < xs.size(); j++) {\n        int y = xs.get(j);\n        result.add(y - x);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(int x) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(derivative(xs.get(i)));\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    if (n == 10)\n        return 9;\n    if (n == 11)\n        return",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return fibfib(n-1)+fibfib(n-2);\n}\n\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return fibfib(n-1) + fibfib(n-2);\n}\n\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    if (n == 10)\n        return 9;\n    return 10;\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return n;\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return fibfib(n-1);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    return -1;\n}\n"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n\n  public static String vowels(String str) {\n    String result = \"\";\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n              || c == 'U')\n        result += c;\n    ",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n\n  public static String vowels(String str) {\n    String result = \"\";\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n              || c == 'U') {\n        result += c;\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n  }\n\n  public static boolean isVowel(char c) {\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n            || c == 'U';\n  }\n}\n"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s;\n    }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s;\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(0, s.length() - shift);\n    }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s);\n        return sb.toString();\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(s.length() - 1));\n        return sb.toString();\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length() - shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n  }\n}\n"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.getNumericValue(c);\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result = result * 10 + c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int i : s) {\n      result += i;\n    }\n    return result;\n  }\n\n  public",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(digit_sum(\"1\"));\n    System.out.println(digit_sum(\"2\"));\n    System.out.println(digit_sum(\"3\"));\n    System.out.println(digit_sum(\"4\"));\n    System.out.println(digit_sum(\"5\"));\n    System.out.println(digit_sum(\"6\"));\n    System",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(byte[] s) {\n    int result = 0;\n    for (byte b : s) {\n      result += b;\n    }\n    return result;\n  }\n\n  public",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(byte[] s) {\n    int result = 0;\n    for (byte b : s) {\n      result += Byte.digit(b, 10);\n    }\n    return result;",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static int digit_sum(int s) {\n    int result = 0;\n    for (int c : s) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str, n));\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str));\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = fruit_distribution(str, n);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = fruit_distribution(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result *= fruit_distribution(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str));\n    }\n    return result;\n  }\n\n  public static int fruit_distribution(String s) {\n    int result = 0;\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c)) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str, n));\n    }\n    return result;\n  }\n\n  public static int fruit_distribution(String s, int n) {\n    int result = 0;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str, n));\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str));\n    }\n    return result;\n  }\n\n  public static int fruit_distribution(String s) {\n    int result = 0;\n    for (int i = 0; i < s.length(); i++) {\n      result = Math.max(result, fruit_distribution(s.charAt(i)));\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str));\n    }\n    return result;\n  }\n\n  public static int fruit_distribution(String s) {\n    int result = 0;\n    for (int i = 0; i < s.length(); i++) {\n      if (s.charAt(i) == '1') {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.max(result, fruit_distribution(str));\n    }\n    return result;\n  }\n\n  public static int fruit_distribution(String s) {\n    int result = 0;\n    for (int i = 0; i < s.length(); i++) {\n      if (s.charAt(i) == 'F') {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][arr[0].length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = new int[arr[i].length];\n            for (int j =",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n}\n",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][arr[0].length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[0].length; j",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = pluck(arr[i]);\n        }\n        return result;\n",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i].clone();\n        }\n        return result;\n    ",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static int[][] pluck(int[][] arr) {\n        int[][] result = new int[arr.length][];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n",
        "public static int[] pluck(int[] arr) {\n        int[] ret = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            ret[i] = arr[i];\n        }\n        return ret;\n    }\n}\n",
        "public static int[] pluck(int[] arr) {\n        int[] res = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            res[i] = arr[i];\n        }\n        return res;\n    }\n}\n"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i : lst) {\n        if (i > result)\n            result = i;\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i : lst) {\n        if (i > result)\n            result = i;\n    }\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i : lst) {\n        if (i > max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i : lst) {\n        if (i == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            max = lst[i];\n        }\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max)\n            result = i;\n    }\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            max = lst[i];\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }",
      "function range": "17,5-29,5",
      "output": [
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst = lst.subList(0, lst.size() - 1);\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst = lst.subList(0, lst.size() - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n                break;\n            }\n        }\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n                break;\n            }\n        }\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n                break;\n            }\n        }\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        lst.remove(lst.size() - 1);\n    }\n    return result",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < result.get(i)) {\n                switched = false;\n                break;\n            }\n        }\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "",
      "function range": "16,5-26,5",
      "output": []
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n  }\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean will_it_walk(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   ",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean can_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean can_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return true;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = q.length - 1;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!="
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int smallest_change(long[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] < result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > result) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n\n  public"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n\n  public static List<String> total_match(List<String> lst1, List<String> lst2, List<String> lst3) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<>(l1 + l2);\n  }\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return Arrays.asList(l1, l2);\n  }\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<>(Arrays.asList(l1, l2));\n  }\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n\n  public static List<String> total_match(List<String> lst1, List<String> lst2, List<String> lst3) {\n    int l1 = 0;\n    for (String st : lst1)\n      l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n      l2 += st",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n\n  public static List<String> total_match(List<String> lst1, List<String> lst2, List<String> lst3) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    for (String st : lst2)\n        l1 += st.length();\n    for (String",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n\n  public static List<String> total_match(List<String> lst1, List<String> lst2, List<String> lst3) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    for (String st : lst2)\n        l1 += st.length();\n    int l2",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n  }\n\n  public static List<String> total_match(int l1, int l2) {\n    List<String> lst = new ArrayList<String>();\n    for (int i = 0; i < l1; i++)\n      lst.add(\"\");\n    for (int i = 0; i < l2; i++)\n      lst.add(\"\");\n    return lst;\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n  }\n\n  public static List<String> total_match(int l1, int l2) {\n    List<String> lst = new ArrayList<String>();\n    for (int i = 0; i < l1; i++)\n        lst.add(\"\");\n    for (int i = 0; i < l2; i++)\n        lst.add(\"\");\n    return lst;\n"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n        return true;\n    }\n    return false;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n        return true;\n    }\n    return false;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n        return true;\n    }\n    return false;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (long i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n        return true;\n    }\n    return false;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (long i = 2; i < a; i += 1) {\n        if (a % i == 0) return false;",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1){\n        ",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (long i = 2; i < a; i += 1){\n        "
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        } else if (n == 8) {\n            return true;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        } else if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        } else if (n == 11) {\n            return true;\n        } else if (n == 13) {\n            return true;\n        } else if (n == 17) {\n            return true;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        } else if (n == 8) {\n            return true;\n        } else if (n == 9) {\n            return true;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        return false;\n    }\n\n",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        return false;\n    }\n",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        } else if (a == 1) {\n            return true;\n        } else if (a == 2) {\n            return true;\n        } else if (a == 3) {\n            return true;\n        } else if (a == 4) {\n            return true;\n        } else if (a == 5) {\n            return true;\n        } else if (a == 6) {\n            return true;\n        } else if (a == 7) {\n            return true;\n        ",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        if (a == 6) {\n            return true;\n        }\n        if (a == 7) {",
        "public static boolean iscude(int a) {\n\t\tif (a == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 3) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 4) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 5) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 6) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 7) {",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        if (a == 6) {\n            return true;\n        }\n        return false;\n    }\n\n",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        if (a == 6) {\n            return true;\n        }\n        return false;\n    }\n",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        } else if (a == 1) {\n            return true;\n        } else if (a == 2) {\n            return true;\n        } else if (a == 3) {\n            return true;\n        } else if (a == 4) {\n            return true;\n        } else if (a == 5) {\n            return true;\n        } else if (a == 6) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    ",
        "public static boolean iscude(int a) {\n\t\tif (a == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 3) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 4) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 5) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 6) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n",
        "public static boolean iscude(int a) {\n\t\tif (a == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 3) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 4) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 5) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a == 6) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        } else if (a == 1) {\n            return true;\n        } else if (a == 2) {\n            return true;\n        } else if (a == 3) {\n            return true;\n        } else if (a == 4) {\n            return true;\n        } else if (a == 5) {\n            return true;\n        } else if (a == 6) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
        "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        return false;\n    }\n}\n"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      } else {\n        break;\n      }\n    }\n    return result;\n  ",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result *= 16;\n      if (c >= '0' && c <= '9') {\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result += c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9')\n        result |= c - '0';\n      else if (c >= 'a' && c <= 'f')\n        result |= c - 'a' + 10;\n      else if (c >= 'A' && c <= 'F')\n        result |= c - 'A' + 10;\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      } else {\n        return 0;\n      }\n    }\n    return result;\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      } else {\n        throw new IllegalArgumentException();\n      }\n    }\n    "
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal == 6) {\n            return \"6\";\n        } else",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal == 6) {\n            return \"6\";\n        }\n",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal == 10) {\n            return \"10\";\n        } else",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal == 6) {\n            return \"6\";\n        }\n\n",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else {\n            return Integer.toBinaryString(decimal);\n        }\n",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else {\n            return \"0\";\n        }\n    }\n\n    public static String",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else {\n            return \"0\";\n        }\n    }\n\n    /**\n     ",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal >= 10) {\n            return String.valueOf(decimal",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else {\n            return \"0\";\n        }\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        } else if (decimal == 1) {\n            return \"1\";\n        } else if (decimal == 2) {\n            return \"2\";\n        } else if (decimal == 3) {\n            return \"3\";\n        } else if (decimal == 4) {\n            return \"4\";\n        } else if (decimal == 5) {\n            return \"5\";\n        } else if (decimal >= 10) {\n            return Integer.toBinaryString("
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1))\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        if (c1!= c2)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1!= c2 || c1!= c3)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        if (c1!= c2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1!= c2)\n            return false;\n        if (c1!= c3)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1!= c2 && c1!= c3)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1!= c2 && c1!= c3 && c2!= c3)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1 == c2 && c1 == c3)\n            return true;\n    }\n    return false;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        char c3 = s.charAt(i + 2);\n        if (c1 == c2 && c1 == c3) {\n            return true;\n        }\n    }\n    return false;\n}\n"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else\n            ",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"E+\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"D\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"E\";\n        else if (g",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E\";\n        else if (g",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.8)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.6)\n            letter_grade[i] = \"E+\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.9)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"E+\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.8)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.6)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n    }\n    "
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i - 1)!= string.charAt(i))\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i - 1)!= string.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i - 1) == string.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean prime(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean prime(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static String",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean prime(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 1; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean prime(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static int",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static boolean prime(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static void"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n == 10)\n        return 10;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 1;\n    else if (n == 3)\n        return 1;\n    else if (n == 4)\n        return 1;\n    else if (n == 5)\n        return 1;\n    else if (n == 6)\n        return 1;\n    else if (n == 7)\n        return 1;\n    else if (n == 8)\n        return 1;\n    else if (n == 9)\n        return 1;\n    else if (n == 10)\n        return 1;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 1;\n    if (n == 4)\n        return 1;\n    if (n == 5)\n        return 1;\n    if (n == 6)\n        return 1;\n    if (n == 7)\n        return 1;\n    if (n == 8)\n        return 1;\n    if (n == 9)\n        return 1;\n    if (n == 10)\n        return 1;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n == 0)\n        return 0;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    return 0;\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    return 0;\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n == 10)\n        return 10;\n\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else\n        return 10;\n}\n\nint main() {"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += i;\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(String.valueOf(i));\n    }\n    return String.valueOf(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(N.substring(i, i + 1));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(String.valueOf(i));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += i;\n    }\n    return \"\" + sum;\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(N + \" \" + i);\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(N.substring(i, i + 1));\n    }\n    return String.valueOf(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf(i));\n    }\n    return String.valueOf(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(N.substring(i, i + 1));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += i;\n    }\n    return Integer.toString(sum);\n  }\n\n}\n"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      } else {\n        sum -= lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += l",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      } else {\n        sum -= lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      } else {\n        sum -= lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 1) {\n        sum += l",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      sum += lst[i];\n    }\n    return sum % 2;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      } else {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n}\n"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = Character.toUpperCase(chars[i]);\n        }\n        result += new String(chars);\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n            if (i < chars.length - 1) {\n                result += \" \";\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = Character.toUpperCase(chars[i]);\n        }\n        result += new String(chars);\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n            if (i < chars.length - 1) {\n                result += \" \";\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = Character.toUpperCase(chars[i]);\n        }\n        result += String.valueOf(chars);\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (i == chars.length - 1) {\n                result += chars[i];\n            } else {\n                result += chars[i] + \" \";\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (i == chars.length - 1) {\n                result += chars[i];\n            } else {\n                result += chars[i] + \" \";\n            }\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        result.add(new Tuple(lst.get(i).get(j), x));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i).get(x)));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        result.add(new Tuple(lst.get(i).get(j), x));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i).get(x), lst.get(i + 1).get(x)));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      ArrayList<Integer> row = lst.get(i);\n      for (int j = 0; j < row.size(); j += 1) {\n        result.add(new Tuple(row.get(j), x));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i), x));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i).get(x), lst.get(i).get(x + 1)));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      ArrayList<Integer> row = lst.get(i);\n      for (int j = 0; j < row.size(); j += 1) {\n        result.add(new Tuple(x, row.get(j)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i).get(x)));\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        result.add(new Tuple(lst.get(i).get(j), lst.get(i + 1).get(j)));\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n    }\n    return array;\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1];\n            array[array.length - 1] = temp;\n        }\n        return array;\n    }\n}\n"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(0));\n            sb.append(d.charAt(1));\n            sb.append(d.charAt(2));\n            sb.append(d.charAt(3));\n            sb.append(d.charAt(4));\n            sb.append(d.charAt(5));\n            sb.append(d.charAt(6));\n            sb.append(d.charAt(7));\n            sb.append(d.charAt(8));\n            sb.append(d.charAt(9));\n            sb.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else {\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else {\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else{\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(0));\n            sb.append(d.charAt(1));\n            sb.append(d.charAt(2));\n            sb.append(d.charAt(3));\n            sb.append(d.charAt(4));\n            sb.append(d.charAt(5));\n            sb.append(d.charAt(6));\n            sb.append(d.charAt(7));\n            sb.append(d.charAt(8));\n            sb.append(d.charAt(9));\n        }else",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb =",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    ",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else {\n            sb.append(d.charAt(c));\n        }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_largest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_smallest(Integer[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_smallest(long[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;",
        "public static Integer next_smallest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_smallest(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            ",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    boolean result = false;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result = true;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean is_happy(String S) {\n    String[] sentences = S.split(\"",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    boolean result = false;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result = true;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    boolean result = false;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(is_b",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    boolean result = false;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static boolean is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_boolean(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    ",
        "public static boolean any_int(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_boolean(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x >= 0.0f && x <= 1.0f && y >= 0.0f && y <= 1.0f && z >= 0.0f && z <= 1.0f;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x >= 0.0 && x <= 1",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_boolean(boolean x, boolean y, boolean z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x >= 0.0f && x <= 1.0f && y >= 0.0f && y <= 1.0f && z >= 0.0f && z <= 1.0f;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x >= 0.0d && x <=",
        "public static boolean any_int(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x > 0 && y > 0 && z > 0;\n    }\n\n    public static boolean any_boolean(boolean x, boolean y, boolean z) {\n        return x || y || z;\n    }\n\n    public",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(double x, double y, double z) {\n        return x >= 0.0f && x <= 1.0f && y >= 0.0f && y <= 1.0f && z >= 0.0f && z <= 1.0f;\n    }\n\n    public static boolean any_double(double x, double y, double z) {\n        return x >= 0.0f && x <=",
        "public static boolean any_int(double x, double y, double z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1;\n    }\n\n    public static boolean any_boolean(boolean x, boolean y, boolean z) {\n        return x || y || z;\n    }\n\n    public static boolean any_string(String x, String y, String"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isLowerCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n      char c = message.charAt(i);\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n      char c = message.charAt(i);\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isLowerCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {",
      "function range": "22,5-35,5",
      "output": [
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result = result * 10 + c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result = result * 10 + c - '0';\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Integer.parseInt(c);\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        if (is_prime(c))\n            result += 1;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}\n\npublic static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}\n\npublic static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}\n\npublic static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else {\n                state =",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n        }\n        return"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      primes.add(i);\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      primes.add(i);\n    }\n    return primes;\n  }\n\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      primes.add(i);\n    }\n    return primes;\n  }\n\n  public static List<Integer> count_down_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 1; i < n; i += 1){\n      primes.add(i);\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n\n  public static List<Integer> count_down_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 1; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n\n  public static List<Integer",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0) primes.add(i);\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n\n  public static List<Integer> count_down_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 1; i < n; i += 1){\n      if (n % i == 0) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n}\n"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int div(int a, int b) {\n        return a / b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n    }\n\n    public static int pow(int a, int b) {\n        return a * b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int modulo(int a, int b) {\n        return a % b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int mul(int a, int b) {\n        return a * b;",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int modulus(int a, int b) {\n        return a % b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int mul(int a, int b) {\n        return a * b;",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int div(int a, int b) {\n        return a / b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n    }\n}\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int subtract(int a, int b) {\n        return a - b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n    }\n\n    public static int pow(int a, int b) {\n        return a * b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int subtract(int a, int b) {\n        return a - b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int remainder(int a, int b) {\n        return a % b;\n    }\n\n    public static int modulus(int a, int b) {\n        return a % b;",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int subtract(int a, int b) {\n        return a - b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int remainder(int a, int b) {\n        return a % b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static int modulo(int a, int b) {\n        return a % b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int times(int a, int b) {\n        return a * b;",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int div(int a, int b) {\n        return a / b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n    }\n\n    public static int pow(int a, int b) {\n        if (b == 0)",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int sub(int a, int b) {\n        return a - b;\n    }\n\n    public static int div(int a, int b) {\n        return a / b;\n    }\n\n    public static int mod(int a, int b) {\n        return a % b;\n    }\n\n    public static int pow(int a, int b) {\n        return a ** b;\n"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isLowerCase(c)) {\n            count++;\n        }\n    }\n    return count;\n  }\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_upper(String",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_upper",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_upper(String",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(char"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * 10 - value.charAt(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * -10 + value.charAt",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9') {\n            result = result * 10 + value.charAt(i) - '0';\n        } else {\n            result = result * 10 + value.charAt(i) - 'a' + 10;\n        }\n    }\n    return (int) result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == 'e')\n            result = result * 10 + value.charAt(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * 10 + -value.charAt",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * 10 - 1;\n        else",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * 10 + value.charAt(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * -1;\n    }\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else\n            break;\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value.charAt(i) >= '0' && value.charAt(i) <= '9')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '.')\n            result = result * 10 + value.charAt(i) - '0';\n        else if (value.charAt(i) == '-')\n            result = result * -1;\n        else\n"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_b_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_c_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile(int n, int m) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\tfor(int i = 0; i < m; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_b_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\npublic static ArrayList<Integer> make_c_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_b_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_c_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile(int n, int k) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\tfor(int i = 0; i < k; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_b_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile(int n, int m) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\tfor(int i = 0; i < m; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static void main(",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile(int n, int m) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\tfor(int i = 0; i < m; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_b_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tStringTokenizer st = new StringTokenizer(s, \" \");\n\twhile (st.hasMoreTokens()) {\n\t    result.add(st.nextToken());\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    if (Character.isLetter(s.charAt(i))) {\n\t\tresult.add(s.substring(i, i + 1));\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    result.add(s.substring(i, i + 1));\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(c);\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(0, i));\n\t    } else {\n\t\tresult.add(c);\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString[] words = s.split(\" \");\n\tfor (int i = 0; i < words.length; i++) {\n\t    result.add(words[i]);\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(i, i + 1));\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(0, i));\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(0, i));\n\t    } else {\n\t\tresult.add(s.substring(0, i));\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(0, i));\n\t    } else {\n\t\tresult.add(c);\n\t    }\n\t}\n\treturn result;\n    }\n\n}\n"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 0 && y == 1) {\n            return 2;\n        } else if (x == 1 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 2) {\n            return 5;\n        } else if (x == 0 &&",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 1 && y == 1) {\n            return 2;\n        } else if (x == 0 && y == 1) {\n            return 3;\n        } else if (x == 1 && y == 1) {\n            return 4;\n        } else if (x == 0 && y == 2) {\n            return 5;\n        } else if (x == 1 &&",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 1 && y == 1) {\n            return 2;\n        } else if (x == 0 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 1) {\n            return 5;\n        } else if (x == 1 &&",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 1 && y == 1) {\n            return 2;\n        } else if (x == 0 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 2) {\n            return 5;\n        } else if (x == 1 &&",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 0) {\n            return 1;\n        } else if (y == 0) {\n            return 2;\n        } else if (x == 1 && y == 0) {\n            return 3;\n        } else if (x == 1) {\n            return 4;\n        } else if (y == 1 && x == 0) {\n            return 5;\n        } else if (y == 1) {\n            return 6;\n        } else if (",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 0 && y == 1) {\n            return 2;\n        } else if (x == 1 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 2) {\n            return 5;\n        } else {\n            return -1",
        "public static int choose_num(int x, int y) {\n        return x + y;\n    }\n\n    public static int choose_num(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int choose_num(int x, int y, int z, int w) {\n        return x + y + z + w;\n    }\n\n    public static int choose_num(int x, int y, int z, int w, int x2, int y2, int z2, int w2) {\n        return x + y + z + w + x2",
        "public static int choose_num(int x, int y) {\n        return x + y;\n    }\n\n    public static int choose_num(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    public static int choose_num(int x, int y, int z, int w) {\n        return x + y + z + w;\n    }\n\n    public static int choose_num(int x, int y, int z, int w, int x2) {\n        return x + y + z + w + x2;\n    }\n\n    public static int choose_num",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 0 && y == 1) {\n            return 2;\n        } else if (x == 1 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 2) {\n            return 5;\n        }\n        return -1;\n",
        "public static int choose_num(int x, int y) {\n        if (x == 0 && y == 0) {\n            return 0;\n        } else if (x == 1 && y == 0) {\n            return 1;\n        } else if (x == 0 && y == 1) {\n            return 2;\n        } else if (x == 1 && y == 1) {\n            return 3;\n        } else if (x == 0 && y == 2) {\n            return 4;\n        } else if (x == 1 && y == 2) {\n            return 5;\n        } else {\n            throw new Illegal"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = Math.floor(avg);\n    } else {\n        avg_rounded = Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = Math.floor(avg);\n    } else {\n        avg_rounded = Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = Math.floor(avg);\n    } else {\n        avg_rounded = Math.floor(avg) + 1;\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = Math.floor(avg);\n    } else {\n        avg_rounded = Math.floor(avg) + 1;\n    }\n    return String.valueOf(avg_rounded);\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double max =",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_min(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double min =",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg =",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) res.add(i);\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) res.add(i);\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(0);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    x.add(1);\n    x.add(2);\n    x.add(",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    for(int i = 0; i < 10; i++) {\n        x.add("
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.get(num)!= null) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      } else {\n        result.add(\"\");\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      } else {\n        result.add(String.valueOf(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      } else {\n        result.add(\"\");\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        int x = 1;\n        for(int j = 1; j <= i; j++) x *= j;\n        ret.add(x);\n    }\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 3) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        int x = 1;\n        for(int j = 2; j <= i; j++) x *= j;\n        ret.add(x);\n    }\n"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    if(even_palindrome_count % 2 == 0) {\n        result.add(even_palindrome_count);\n    }\n    if(odd_palindrome_count % 2 == 0) {\n        result.add(odd_palindrome_count);\n    }\n    return",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    if(even_palindrome_count % 2 == 0) {\n        result.add(even_palindrome_count);\n    }\n    if(odd_palindrome_count % 2 == 0) {\n        result.add(odd_palindrome_count);\n    }\n    ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<>();\n    even_odd_palindrome.add(even_palindrome_count);\n    even_odd_palindrome.add(odd_palindrome_count);\n    return even_odd_palindrome;\n}\n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<>();\n    ArrayList<Integer> odd_odd_palindrome = new ArrayList<>();\n    for(int i = 0; i < even_palindrome_count; i++) {\n        even_odd_palindrome.add(i);\n    }\n    for(int",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<>();\n    even_odd_palindrome.add(even_palindrome_count);\n    even_odd_palindrome.add(odd_palindrome_count);\n    return even_odd_palindrome;\n}\n\npublic static void main(String[] args) {",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<>();\n    even_odd_palindrome.add(even_palindrome_count);\n    even_odd_palindrome.add(odd_palindrome_count);\n    return even_odd_palindrome;\n  }\n}\n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<>();\n    ArrayList<Integer> odd_odd_palindrome = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if(even_palindrome_count % 2 == 0) {\n            even_odd_palindrome.add",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    return new ArrayList<>(even_palindrome_count + odd_palindrome_count);\n}\n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<Integer>();\n    ArrayList<Integer> odd_odd_palindrome = new ArrayList<Integer>();\n    for(int i = 0; i < even_palindrome_count; i++) {\n        even_odd_palindrome.add(i);\n    }\n    for",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    if(even_palindrome_count % 2 == 0) {\n        result.add(even_palindrome_count);\n    }\n    if(odd_palindrome_count % 2 == 0) {\n        result.add(odd_palindrome_count);\n    }\n    if"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(long[] arr) {\n    int count = 0;\n    ",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(long[] arr) {\n    int count =",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) num = -num;\n        count += num;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(double[] arr) {\n    int count = 0;\n    ",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(String[] arr) {\n    int count = 0;\n    ",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(double[] arr) {\n    int count =",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}\n\npublic static int count_nums(String[] arr) {\n    int count =",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count++;\n    }\n    return count;\n}\n\npublic static int count_nums(char[] arr) {\n    int count = 0;\n    "
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    return move_one_ball(sorted_arr);\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i - 1));\n        sorted_arr.set(i - 1, sorted_arr.",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        return true;\n      }\n    }\n    return false;\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i + 2));\n        sorted_arr.set(i + 2, sorted_arr.get(i + 3));\n        sorted_arr.set(i + 3,",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i + 2));\n        sorted_arr.set(i + 2, sorted_arr.get(i));\n        return true;\n      }\n    }\n    return false",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i + 2));\n        sorted_arr.set(i + 2, sorted_arr.get(i + 1));\n        return true;\n      }\n    }\n    ",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n      }\n    }\n    return true;\n  }\n\n  public",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n      }\n    }\n    return true;\n  }\n}\n"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n      if (lst1.get(i) % 2 == 0) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n    if (odd % 2 == 0) {\n      return \"odd\";\n    } else {\n      return \"even\";\n    }\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (even == lst2.size()) {\n      return lst1.get(odd).toString();\n    } else {\n      return lst2.get(even).toString();\n    }\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n      if (lst1.get(i) % 2 == 0) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n    if (odd % 2 == 0) {\n      return \"odd\";\n    } else {\n      return \"even\";\n    }\n  }\n\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (even == lst2.size()) {\n      return lst1.get(odd).toString();\n    } else {\n      return lst2.get(even).toString();\n    }\n  }\n\n  public static void main(String[] args) {\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (even == lst2.size()) {\n      return lst1.get(odd).toString();\n    } else {\n      return lst2.get(even).toString();\n    }\n  }\n\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd < lst1.size() && even < lst2.size()) {\n      return lst1.get(odd) + \" \" + lst2.get(even);\n    } else {\n      return lst1.get(odd) + \" \" +",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd < lst1.size() && even < lst2.size()) {\n      return lst1.get(odd) + \" \" + lst2.get(even);\n    } else {\n      return \"\";\n    }\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd < lst1.size() && even < lst2.size()) {\n      return lst1.get(odd) + \" \" + lst2.get(even);\n    } else {\n      return \"\";\n    }\n  }\n\n  public static",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd == lst1.size()) {\n      odd = 0;\n    }\n    if (even == lst2.size()) {\n      even = 0;\n    }\n    return lst1.get(odd) + \" \" + lst2.get(",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    while (odd < lst1.size() && even < lst2.size()) {\n      if (lst1.get(odd) == lst2.get(even)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd == lst1.size()) {\n      odd = 0;\n    }\n    if (even == lst2.size()) {\n      even = 0;\n    }\n    return lst1.get(odd) + \"-\" + lst2.get("
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], most_count);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) most_count = count_letter[i];\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], most_count);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], most_count + 1);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put(list_letters[i], most_count);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            res.put(list_letters[i],",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put(list_letters[i],",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        count_letter[i] = 0;\n    }\n    for(int i = 0; i < 26; i++) {\n        count_letter[list_letters[i].charAt(0)]++;\n    }\n    for(int i = 0; i < 26; i++) {\n        count_letter[list_letters[i"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      new_s += s.charAt(i);\n    }\n    return reverse_delete(new_s);\n  ",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!='') {\n        new_s += s.charAt(i);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      new_s += s.charAt(i);\n    }\n    return reverse_delete(new_s, \"\");",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= new_s.charAt(i)) {\n        new_s += s",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i) =='') {\n        new_s += s.charAt(i);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      new_s += s.charAt(i);\n    }\n    return reverse_delete(new_s, s);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = s.length() - 1; i >= 0; i--) {\n      new_s += s.charAt(i);\n    }\n    return reverse_delete(new_",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = s.length() - 1; i >= 0; i--) {\n      if(s.charAt(i)!= s.charAt(i + 1)) {\n        new",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = s.length() - 1; i >= 0; i--) {\n      if(s.charAt(i)!= new_s.charAt(i)) {\n        new",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(i)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            ",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            ",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            ",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            n = n * 10 + digit;\n        }\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n      int n = 0;\n      for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 0) {\n                n++;\n            }\n        }\n        result.add(String.valueOf(n));\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s < max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n}\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n        s = 0;\n      }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n        s = 0;\n      ",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = Long.MIN_VALUE;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s >= max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = Long.MIN_VALUE;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = Long.MAX_VALUE;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < min_sum) {\n            min_sum = s;\n        }\n    }\n    return min_"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > bucket_capacity) {\n                row_capacity++;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] == 0) {\n                row_capacity++;\n            }\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] == 1) {\n                row_capacity++;\n            }\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > bucket_capacity) {\n                row_capacity = grid[i][j];\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > 0) {\n                row_capacity++;\n            }\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > bucket_capacity) {\n                row_capacity++;\n            }\n        }\n        if(row_capacity > bucket_capacity) {\n            result++;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > bucket_capacity) {\n                row_capacity++;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] == 0) {\n                row_capacity++;\n            }\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {",
      "function range": "31,10-42,10",
      "output": [
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   }\n   else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   }\n   else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n     return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n     return 1;\n   } else {\n     return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}\n\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}\n\n}\n"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isDigit(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isLetterOrDigit(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isDigit(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isDigit(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetterOrDigit(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isLetter(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isLetterOrDigit(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isDigit(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> select_words(String s) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words =",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isDigit(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> select_words(String s) {\n    ArrayList<String> result = new ArrayList<>",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            if(Character.isLetterOrDigit(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> select_words(String s) {\n    ArrayList<String> result = new ArrayList"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) return \"\";\n      vowels.add(c);\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) return c;\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        return c;\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i);\n      }\n    }\n    return word;\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) return \"\";\n      vowels.add(c);\n    }\n    return \"\";\n  }\n\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        return word.substring(0, i);\n      }\n    }\n    return word;\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        sb.append(c);\n      } else {\n        sb.append(\" \");\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        sb.append(c);\n      } else {\n        sb.append(' ');\n      }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) >= k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(arr.get(i));\n      } else {\n        break;\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = arr.size() - 1; i >= 0; i--) {",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) <= k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) >= k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(i);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) > k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size(); i++) {\n      if (arr.get(i) >= k) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = arr.size() - 1; i >= 0; i--) {"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution3(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution(int[] lst) {\n    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static int solution(long[] lst) {\n    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n      result += lst[i",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i) * lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution3(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0;",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution(int[] lst) {\n    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static int solution(String[] lst) {\n    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n      result += lst[i",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result = result + lst.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n\n  public static int solution(int[] lst) {\n    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n      result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result = result + arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.remove(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.remove(i);\n    }\n    return result;\n  }\n\n  public static int get_elements(ArrayList<Integer> arr) {\n    int result = 0;\n    for(int i = 0; i < arr.size(); i++)",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result -= arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.size();\n      arr.add(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.remove(i);\n    }\n    return result;\n  }\n\n  public static int get_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  ",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i < n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i < n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  ",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      if(i % 2 == 1) result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      if(i % 2 == 0) result.add",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i < n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i < n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if(n % 2 == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) result.add(i);\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n    for(int i = 2; i <= n; i += 2) {\n      result.add(i);\n    }\n    return result;\n  }\n\n"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        return false;\n    } catch(Exception e) {\n        return false;\n    }\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        return false;\n    }\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        int[] month_check3 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        int[] month_check3 = {1, 2, 3, 4, 5, 6, 7",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month_check1[i] == month) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month_check2[i] == month) {\n                return true;\n            }\n        }\n        return false;\n    } catch(Exception e) {\n        return false;\n    ",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month_check1[i] == month) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month_check2[i] == month) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        return false;\n    ",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month_check1[i] == month) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        return false;\n    }\n}\n}\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        return false;\n    } catch(Exception e) {\n        return false;\n    }\n}\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) {\n                return true;\n            }\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                return true;\n            }\n        }\n        return false;\n    } catch(Exception e) {\n        e.printStackTrace();"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isWhitespace(curr)) {\n                count++;\n            }\n        }\n        return new String[count];\n    }\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr =='') {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return new String[count];\n    }\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            }\n        }\n        return new String[count];\n    }\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '_') {\n                count++;\n            } else if(curr == '.') {\n                count++;\n            } else if(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '.') {\n                count++;\n            } else if(curr == '_') {\n                count++;\n            } else if(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '+') {\n                count++;\n            } else if(curr == '.') {\n                count++;\n            } else if(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        return new String[count];\n    }\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '_') {\n                count++;\n            } else if(curr =='') {\n                count++;\n            } else if(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '.') {\n                count++;\n            } else if(curr =='') {\n                count++;\n            } else if(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr >= 'a' && curr <= 'z') {\n                count++;\n            } else if(curr >= 'A' && curr <= 'Z') {\n                count++;\n            } else if(curr >= '0' && curr <= '9') {\n                count++;\n            } else if(curr == '-') {\n                count++;\n            } else if(curr == '_') {\n                count++;\n            } else if(curr == '.') {\n                count++;\n            } else {\n                "
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) > count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) > count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) < count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) < count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(count_num.get(lst[i]) > count_num.get(lst[i+1])) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > count_num.get(lst[j])) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > count_num.get(lst[j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > count_num.get(lst[j])) return false;\n        }\n    }\n    return true;\n  }\n}\n"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n        }\n        for (int i = 0; i < interval2.length; i++) {\n            sb.append(interval2[i]);\n        }\n        return sb.to",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            if (i < interval1.length - 1) {\n                sb.append(interval2[i]);\n            }\n        }\n        return sb.toString();\n    }",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            if (i < interval1.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        for (int i = 0; i < interval2.length;",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1 == null) {\n            return null;\n        }\n        if (interval2 == null) {\n            return null;\n        }\n        if (interval1.length == 0) {\n            return null;\n        }\n        if (interval2.length == 0) {\n            return null;\n        }\n        if (interval1.length < interval2.length) {\n            return null;\n        }\n        if (interval1.length > interval2.length) {\n            return null;\n        }",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(interval1[0]);\n        for (int i = 1; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            if (i < interval2.length) {\n                sb.append(interval2[i]);\n            }\n        }\n        ",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(interval1[0]);\n        for (int i = 1; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            sb.append(interval2[i]);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n        }\n        for (int i = 0; i < interval2.length; i++) {\n            sb.append(interval2[i]);\n            if (i < interval1.length",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n        }\n        for (int i = 0; i < interval2.length; i++) {\n            sb.append(interval2[i]);\n        }\n\n        return sb.to",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(interval1[0]);\n        for (int i = 1; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            sb.append(interval2[i]);\n        }\n        return sb.toString();\n    }\n\n    public static String",
        "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1.length == 0) {\n            return \"\";\n        }\n        if (interval2.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(interval1[0]);\n        for (int i = 1; i < interval1.length; i++) {\n            sb.append(interval1[i]);\n            sb.append(interval2[i - 1]);\n        }\n        return sb.toString();\n    }\n\n    public"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod = prod * arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n  }\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prod_signs(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(prod_signs(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(prod_signs(new int[]{1,2,",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prod_signs(new int[]{1,2,3}));\n    System.out.println(prod_signs(new int[]{1,2,3,4}));\n    System.out.println(prod_signs(new int[]{1,2,3,4,5}));\n    System.out.println(prod_signs(new",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prod_signs(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(prod_signs(new int[]{1,2,3,4,5,6,7,8,9,10}));\n    System.out.println(prod_signs(new int[]{1,",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prod_signs(new int[]{1,2,3,4}));\n    System.out.println(prod_signs(new int[]{1,2,3,4,5}));\n    System.out.println(prod_signs(new int[]{1,2,3,4,5,6}));\n    System.out.println(pro"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return val;\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.max(val,",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[]{val};\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[]{val};\n}\n\npublic static int[][] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val =",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[]{val};\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = max(val,",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[] {val};\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return val;\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 0) {\n                val = Math.max(val,",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[]{val};\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 0) {\n                val = max(val,",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[]{val};\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 0) {\n                val = Math.",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return new int[] {val};\n}\n\npublic static int[][] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val =",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    return val;\n}\n\npublic static int[] max_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.max(val, grid[i]["
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1 - n];\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    System.out.println(tri(3));\n    System.out.println(tri(4));\n    System.out.println(tri(5));\n    System.out.println(tri(6));\n    System.out.println(tri(7));\n    System.out.println(tri(",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    System.out.println(tri(4));\n    System.out.println(tri(5));\n    System.out.println(tri(6));\n    System.out.println(tri(7));\n    System.out.println(tri(8));\n    System.out.println(tri(",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    System.out.println(tri(5));\n    System.out.println(tri(6));\n    System.out.println(tri(7));\n    System.out.println(tri(8));\n    System.out.println(tri(9));\n    System.out.println(tri(",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 0; i < n; i++) {\n        System.out.print(sequence[i] + \" \");\n    }\n    System.out.println();\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 1; i <= n; i++) {\n        System.out.print(sequence[i] + \" \");\n    }\n    System.out.println();\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 1];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 1; i < n; i++) {\n        System.out.print(sequence[i] + \" \");\n    }\n    System.out.println();\n}\n"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 0) {\n        odd_count++;\n      }\n      n /= 2;\n    }\n    if (odd_count > 0) {\n      product *= 2;\n    }\n    return product;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    return odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      product *= 10;\n      odd_count++;\n      n /= 10;\n    }\n    return odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    if (odd_count == 0) {\n      return 1;\n    } else {\n      return product;\n    }\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    return product;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 0) {\n        odd_count++;\n      }\n      n /= 2;\n    }\n    if (odd_count > 0) {\n      product *= 2;\n    }\n    return product;\n  }\n\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 0; i < n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    return odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 0) {\n        odd_count++;\n      }\n      n /= 2;\n    }\n    if (odd_count > 0) {\n      product *= 2;\n      odd_count--;\n    }\n    return product;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    if (odd_count == 0) {\n      return 1;\n    } else {\n      return product;\n    }\n  }\n\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n      }\n      product *= i;\n    }\n    if (odd_count == 1) {\n      return product;\n    } else {\n      return product / (odd_count + 1);\n    }\n  }\n}\n"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0;\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) return true;\n        }\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(brackets.charAt(opening_brackets.get(i)) == brackets.charAt(closing_brackets.get(j))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) == closing_brackets.get(i)) return true;\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) == closing_brackets.get(i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) == closing_brackets.get(i)) return true;\n    }\n    return false;\n  }\n}\n"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static long sum_squared_nums(long[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static double sum_squared_doubles(double[] lst) {\r\n        double sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        ",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += Math.pow(lst[i], 2);\n        }\n        return sum;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static double sum_squared_doubles(double[] lst) {\r\n        double sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += Math.pow(lst[i], 2);\r\n",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static double sum_squared_doubles(double[] lst) {\r\n        double sum = 0.0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static double sum_squared_doubles(double[] lst) {\r\n        double sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += (lst[i] * lst[i]);\r\n",
        "public static long sum_squared_nums(double[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i] * lst[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static long sum_squared_nums(long[] lst) {\r\n        long sum = 0;\r\n        for (int i = 0; i < lst.length; i++) {\r\n            sum += lst[i];\r\n        }\r\n        return sum;"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last = parts[i];\n      if (!Character.isLetter(last.charAt(0))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last = parts[i];\n      if (!Character.isLetter(last.charAt(0))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (String part : parts) {\n      if (Character.isLetter(part.charAt(0))) {\n        last = part;\n        break;\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (String part : parts) {\n      if (Character.isDigit(part",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length - 1; i++) {\n      if (Character.isLetter(parts[i].charAt(0))) {\n        last = parts[i];\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i <",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length - 1; i++) {\n      if (Character.isLetter(parts[i].charAt(0))) {\n        last = parts[i];\n        break;\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i =",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      if (Character.isLetter(parts[i].charAt(0))) {\n        last = parts[i];\n        break;\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0;",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last = parts[i];\n      if (!Character.isLetter(last.charAt(0))) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last = parts[i];\n      if (!Character.isLetter(last.charAt(0))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \"\";\n    for (int i = 0; i < parts.length; i++) {\n      last =",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length - 1; i++) {\n      if (Character.isLetter(parts[i].charAt(0))) {\n        last = parts[i];\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i <",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length - 1; i++) {\n      if (Character.isLetter(parts[i].charAt(0))) {\n        last = parts[i];\n        break;\n      }\n    }\n    return last.equals(parts[parts.length - 1]);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i ="
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(long[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(short[] arr) {",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(long[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(double[] arr) {",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(long[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(float[] arr) {",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(double[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(String[] arr",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(double[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(float[] arr",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(double[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(long[] arr",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(long[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(String[] arr) {",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(long[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n\n    public static int can_arrange(boolean[] arr)",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(double[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(double[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < 0) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    public static int can_arrange(Object[] arr"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] result = new int[lst.length];\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > result[i]) {\n                result[i] = lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            res[i] = Math.min(res[i], lst[i]);\n        }\n        return res;\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n\n    public static int[] largest_smallest_integers(int[] lst, int",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > res[i]) {\n                res[i] = lst[i];\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] res = new int[lst.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < lst.length; i++) {\n            res[i] = Math.min(lst[i], res[i]);\n        }\n        return res;\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int[] result = new int[lst.length];\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > result[i]) {\n                result[i] = lst[i];\n            }\n        }\n        return result;\n    }\n\n}\n"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(temp_a > temp_b) {\n        return 1;\n    }\n    else if(temp_a < temp_b) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n\npublic static Object compare_two(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).intValue();\n        temp_b = ((Integer)b).intValue();\n    }\n    if(a instanceof Long && b instanceof Long) {\n        temp_a = ((Long)a).longValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).doubleValue();\n        temp_b = ((Integer)b).doubleValue();\n    }\n    if(a instanceof Long && b instanceof Long) {\n        temp_a = ((Long)a).doubleValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).intValue();\n        temp_b = ((Integer)b).intValue();\n    }\n    if(a instanceof Float && b instanceof Float) {\n        temp_a = ((Float)a).floatValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).doubleValue();\n        temp_b = ((Integer)b).doubleValue();\n    }\n    if(a instanceof Float && b instanceof Float) {\n        temp_a = ((Float)a).doubleValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).intValue();\n        temp_b = ((Integer)b).intValue();\n    }\n    if(a instanceof Long && b instanceof Long) {\n        temp_a = ((Long)a).intValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double && b instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Integer && b instanceof Integer) {\n        temp_a = ((Integer)a).intValue();\n        temp_b = ((Integer)b).intValue();\n    }\n    if(a instanceof Float && b instanceof Float) {\n        temp_a = ((Float)a).doubleValue();\n        temp_b = ((",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(temp_a > temp_b) {\n        return 1;\n    }\n    else if(temp_a < temp_b) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n\npublic static Object compare_two(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a = Double.parseDouble(temp_a_",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Number) {\n        temp_a = ((Number)a).doubleValue();\n    }\n    if(b instanceof Number) {\n        temp_b = ((Number)b).doubleValue();\n    }\n    if(temp_a > temp_b) {\n        return 1;\n    }\n    else if(temp_a < temp_b) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Number) {\n        temp_a = ((Number)a).doubleValue();\n    }\n    if(b instanceof Number) {\n        temp_b = ((Number)b).doubleValue();\n    }\n    if(temp_a > temp_b) {\n        return 1;\n    }\n    else if(temp_a < temp_b) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n\npublic static Object compare_two(Object a, Object b) {"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(float n) {\n        return n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(double n) {\n        return n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2!= 0;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2!= 0;\n    }\n\n    public static boolean is_equal_to_sum_even(float n) {\n        return n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(short n) {\n        return n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2!= 0;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2!= 0;\n    }\n\n    public static boolean is_equal_to_sum_even(double n) {\n        return n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(BigInteger n) {\n        return",
        "public static boolean is_equal_to_sum_even(int n) {\n        return (n % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return (n % 2 == 1);\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return (n % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return (n % 2 == 1);\n    }\n\n    public static boolean is_equal_to_sum_even(float n) {",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(boolean n) {\n        return",
        "public static boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return n % 2 == 1;\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return n % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return n % 2 == 1;\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n        return (n % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        return (n % 2 == 1);\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n        return (n % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(long n) {\n        return (n % 2 == 1);\n    }\n\n    public static boolean is_equal_to_sum_even(double n) {"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i;\n  }\n\n  public",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  ",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact *= i;\n    }\n    return fact_i * special_fact;\n  ",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(int n) {\n    long fact_",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i < n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i < n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i < n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i < n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(int n) {\n    long fact_",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    while (fact_i <= n) {\n      fact_i *= n;\n      special_fact *= n;\n    }\n    return special_fact;\n  }\n\n  public static long factorial2(long n) {\n    long fact"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n  }\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    new_text += text.substring(start, text.length());\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    new_text += text.substring(start, i);\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    new_text += text.substring(start, text.length());\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    new_text += text.substring(start, text.length());\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    new_text += text.substring(start, text.length());\n    return new_text;\n  }\n}\n"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return lst[0];\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return lst[0] + \".\" + lst[1];\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    return \"No\";\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    return \"No\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    return \"No\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    return \"No\";\n}\n\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    return \"No\";\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    return \"No\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    return \"No\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    if (lst[1].equals(\"exe\"))\n        return \"Yes\";\n    if (lst[1].equals(\"dll\"))\n        return \"Yes\";\n    if (lst[1].equals(\"txt\"))\n        return \"Yes\";\n    return \"No\";\n}"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }\n\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_squares(new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_squares(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(sum_squares(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(sum_squares(new int[]{1,2,3,4",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_squares(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}));\n    System.out.println(sum_squares(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}));\n    System.out.println(sum_squares(new int[]{1, 2, 3, 4",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_squares(new int[]{1,2,3,4,5,6,7,8,9}));\n    System.out.println(sum_squares(new int[]{1,2,3,4,5,6,7,8,9,10}));\n    System.out.println(sum_squares(new int[]{1,2,3"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_phrase(String phrase) {\n    String result = \"\";\n    for (String word : phrase.split(\" \")) {\n        int flag =",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_sentence2(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_word(String word) {\n    String result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_sentence2(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        for",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_sentence2(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        if",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                flag = 1;\n            } else {\n                flag = 0;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n        }\n    }\n    return result;\n}\n\npublic static String words_in_phrase(String phrase) {\n    String result = \"\";\n    for (int i = 0; i < phrase.length(); i++) {\n"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator == denom;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator % denom == 0;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator / denom == 0;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator > denom) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator > denom) {\n      return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    int result = numerator / denom;\n    return result > 0;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator > denom) {\n      return false;\n    } else if (numerator < denom) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits_number.size(); i += 1",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n % 10;\n            n /= 10;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i <",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1) {\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits_number.size(); i +=",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n - j;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits_number.size(); i",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += n % 10;\n            n /= 10;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits_number.size(); i",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).addAll(digits_number.get(digits.get(i)));\n    }\n    for (int i = 0; i <",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n - j;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits.size(); i += 1",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1) {\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    for (int i = 0; i < digits.size(); i += 1)",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit *= 10;\n            digit += n % 10;\n            n /= 10;\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(n);\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(digits.get(i));\n    }\n    ArrayList<Integer> result = new Array"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(number_as_string)) {\n                count++;\n            }\n        }\n    }\n    return count;\n  }\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (!odd_digits.contains(number_as_string)) {\n                odd_digits.add(number_as_string);\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (!odd_digits.contains(number_as_string)) {\n                odd_digits.add(number_as_string);\n                count++;\n            }\n        }\n    }\n    return count;\n  }\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    odd_digits.remove(number_as_string.charAt(i));\n                } else {\n                    odd_digits.add(number_as_string.charAt(i));\n                }\n            }\n        } else {\n            odd_digits.add(num);\n        }\n        count++;\n    }\n    return count;",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    count++;\n                }\n            }\n        } else {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n  }\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    odd_digits.remove(number_as_string.charAt(i));\n                } else {\n                    odd_digits.add(number_as_string.charAt(i));\n                }\n            }\n        } else {\n            odd_digits.remove(num);\n        }\n        count++;\n    }\n    return count;",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    odd_digits.remove(number_as_string.charAt(i));\n                }\n            }\n        }\n        count++;\n    }\n    return count;\n}\n"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result += A[i];\n    return result;\n  }\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        if (A[i] > result)\n            result = A[i];\n    }\n    return result;\n}\n\npublic static int get_min_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n;",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result += A[i - 1];\n    return result;\n  }\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        if (A[i] > result)\n            result = A[i];\n    }\n    return result;\n}\n\npublic static int get_min_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - 1;\n    int result = 0;\n    for (int i = 1; i <= n; i +=",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result = Math.max(result, A[i - 1]);\n    return result;\n  }\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        if (A[i] > result)\n            result = A[i];\n    }\n    return result;\n  }\n\n  public static int get_min_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        if (A[i] > result)\n            result = A[i];\n    }\n    return result;\n  }\n\n  public static int get_min_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - 1;\n    int result = 0;\n    for (int i = 1; i <= n; i",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        if (A[i] > result)\n            result = A[i];\n    }\n    return result;\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result += A[i - 1] * A[i];\n    return result;\n  }\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result = Math.max(result, A[i]);\n    return result;\n  }\n}\n"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1 || planet2_index == -1)\n        return result;\n    result.add(planet1);\n    result.add(planet2);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    result.add(planet1);\n    result.add(planet2);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1 || planet2_index == -1)\n        return result;\n    result.add(planet1);\n    result.add(planet2);\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    String planet1_name = planet_names.get(planet1_index);\n    String planet2_name = planet_names.get(planet2_index);\n    result.add(planet1_name);\n    result.add(planet2_name);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    result.add(planet1);\n    result.add(planet2);\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    String planet1_name = planet_names.get(planet1_index);\n    String planet2_name = planet_names.get(planet2_index);\n    result.add(planet1_name);\n    result.add(planet2_name);\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    if (planet1_index < planet2_index) {\n        result.add(planet1);\n        result.add(planet2);\n    } else {\n        result.add(planet2);\n        result.add(planet1);\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    if (planet1_index < planet2_index)\n        result.add(planet1);\n    else\n        result.add(planet2);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    if (planet1_index == planet2_index)\n        return result;\n    result.add(planet1);\n    result.add(planet2);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index == -1)\n        return result;\n    if (planet2_index == -1)\n        return result;\n    String planet1_name = planet_names.get(planet1_index);\n    String planet2_name = planet_names.get(planet2_index);\n    result.add(planet1_name);\n    result.add(planet2_name);\n    return result;\n  }\n}"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n          public int compare(String o1, String o2) {\n            return o1.length() - o2.length();\n          }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n          @Override\n          public int compare(String o1, String o2) {\n            return o1.length() - o2.length();\n          }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o2.length() - o1.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n      if (str.length() % 2 == 1) continue;\n      result.add(str);",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list_min(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list_min(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        "
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  ",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 1; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  ",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return x;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  ",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return x;\n    for (int i = 2; i < n; i += 1) {\n      if (y == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  ",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (y == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  ",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 1; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == y) return i;\n      if (x < y) return x_or_y(n, x, y);\n      if (x > y) return x_or_y(n, x, y);\n    }\n    return x_or_y(n, x, y);\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_or_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x == x_and_y(i, x, y)) {\n        return i;\n      }\n    }\n    return n;\n  }\n\n"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result = d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            } else {\n                result--;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        } else {\n            result++;\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 1;\n            } else {\n                result -= 1;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 1;\n            } else {\n                result -= 1;\n            }\n        } else {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            } else {\n                result--;\n            }\n        } else {\n            result++;\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 1;\n            } else {\n                result -= 1;\n            }\n        } else {\n            result += 1;\n        }\n    }\n    return result;\n}"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = game[i] - guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = guess[i] - game[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = game[i] - guess[i];\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = game[i] - guess[i];\n      if (result[i]!= 0) {\n        return result;\n      }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        } else if (SM > val) {\n            strong = s;\n            val = SM;\n        }\n    }\n    return strong;\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n        if (SM > val) {\n            strong = s;\n            val = SM;\n        }\n    }\n    return strong;",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            } else if (Character.isLowerCase(c)) {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return strong;\n  }\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return strong;\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n        if (SM > val) {\n            strong = s;\n            val = SM;\n        }\n    }\n    if (strong",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        } else if (SM > val) {\n            strong = s;\n            val = SM;\n        } else {\n            strong = s;\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        } else if (SM > val) {\n            strong = s;\n            val = SM;\n        }\n    }\n    if (strong ==",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n            if (c >= '0' && c <= '9') {\n                CAP++;\n            }\n            if (c == '-') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        } else if (SM > val) {\n            strong = s;\n"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = c.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = c.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= c.charAt(i)) {\n        return false;\n      ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i))\n        return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i) && a.charAt(i)",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i) || a.charAt(i)",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) return false;\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i) || c.charAt(i)"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 1)",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[] {even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 1)",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count += 1;\n      } else {\n        odd_count += 1;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i %",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0)",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 1) {\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[] {even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0)",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count += 1;\n      } else {\n        odd_count += 1;\n      }\n    }\n    return new int[] {even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i %",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[] {even_count, odd_count};\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int odd_count = 0;\n    int even_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 1)"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      result += sym[i];\n      number /= 10;\n      i--;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      result += sym[i];\n      number = number / num[i];\n      i--;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      result += sym[i % num.length];\n      number /= num[i % num.length];\n      i++;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n        i--;\n      } else {\n        i++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n      }\n      i++;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      result += sym[i % num.length];\n      number /= num[i % num.length];\n      i++;\n    }\n    return result;\n  }\n\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n      } else {\n        i++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n      } else {\n        i--;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n        i--;\n      } else {\n        i++;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      if (number % num[i] == 0) {\n        result += sym[i];\n        number /= num[i];\n      }\n      i--;\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b < c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a < c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && b > c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return c > a && c > b;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && b > c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b < c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b < c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && b > c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && b > c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a < c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a > b && a < c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b < c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && b > c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && b > c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && b > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return b > a && a > c;\n    }\n\n    public static boolean right",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a > c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a < c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a > b && a < c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a < b && a > c;\n    }\n\n    public static boolean right"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() : s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n  public static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? -1 : s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() > s2.size()? s1.size() - s2.size() : s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n\npublic static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            if (s1.size() > s2.size()) {\n                return -1;\n            } else if (s1.size() < s2.size()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 1;\n            number = number / 1;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number = number / 10;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % number;\n            number = number / number;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % need;\n            number = number / need;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 2;\n            number = number / 2;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % i;\n            number = number / i;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 100;\n            number = number / 100;\n        }\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number;\n            number = number % need;\n        }\n        return result;\n    }\n\n",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number;\n        }\n        for (int i = need; i < remaining; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number;\n        ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % remaining;\n            number = number / remaining;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number;\n            number = number % number;\n        }\n        return result;\n    }\n\n"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    if (engine == null) {\n      throw new ScriptException(\"JavaScript engine not found\");\n    }\n    return engine.eval(String.format(operator[0], operand));\n  }\n\n  public static double do_algebra(String[] operator, double operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    if (engine == null) {\n      throw new ScriptException(\"JavaScript engine not found\");\n    }\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    if (operator.length == operand.length) {",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    if (operator.length!= operand.length) {",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    if (engine == null) {\n      throw new ScriptException(\"JavaScript engine not found\");\n    }\n    return engine.eval(String.format(operator[0], operand));\n  }\n\n  public static double do_algebra(String[] operator, double operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    if (engine == null) {\n      throw new ScriptException(\"JavaScript engine not found\");\n    }\n\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n\n    if (operator.length!= operand.length) {",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    if (operator.length!= operand.length)\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n\n    if (operator.length == operand.length) {",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    ScriptContext context = engine.getContext();\n    context",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n    engine.put(ScriptEngine.ENGINE_VAR_NAME, engine);\n\n    if (operator.length!= operand.length)\n"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n      } else if (flg == 1) {\n        sb.append(c);\n        flg = 0;\n      } else if (flg == 2) {\n        sb.append(c);\n        flg = 0;\n      } else if (flg == 3) {\n        sb.append(c);\n        flg = 0;\n      } else if (flg == 4) {\n        sb.append(c);\n        flg = 0;\n      ",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else if (flg == 1) {\n        sb.append(\" \");\n        flg = 0;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else if (flg == 1) {\n        sb.append(c);\n        flg = 0;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else {\n        sb.append(c);\n        flg = 0;\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else {\n        flg = 0;\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n      } else if (flg == 1) {\n        sb.append(c);\n        flg = 0;\n      } else if (flg == 2) {\n        sb.append(c);\n        flg = 0;\n      } else if (flg == 3) {\n        sb.append(c);\n        flg = 1;\n      } else if (flg == 4) {\n        sb.append(c);\n        flg = 2;\n      ",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (Character.isDigit(c)) {\n        sb.append(c);\n      } else {\n        if (flg == 0) {\n          flg = 1;\n        } else {\n          flg = 0;\n        }\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else if (flg == 1) {\n        sb.append(\" \");\n        flg = 0;\n      }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        sb.append(c);\n        flg = 1;\n      } else if (flg == 1) {\n        sb.append(c);\n        flg = 0;\n      }\n    }\n    return sb.toString();\n  }\n\n}\n"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuffer sb = new StringBuffer();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (NoSuchAlgorithmException e) {",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (NoSuchAlgorithmException e) {",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(text.getBytes());\n    byte[] bytes = md5.digest();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < bytes.length; i++) {\n      sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes(\"UTF-8\"));\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (NoSuchAl",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuffer sb = new StringBuffer();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toHexString((bytes[i] & 0xFF) | 0x100).substring(1));\n      }\n      return sb.toString();\n    } catch (NoSuchAlgorithmException e)",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toHexString((bytes[i] & 0xFF) | 0x100).substring(1));\n      }\n      return sb.toString();\n    } catch (NoSuchAlgorithmException e)",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes(\"UTF-8\"));\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (UnsupportedEnc",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes(\"UTF-8\"));\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (Exception e)",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuffer sb = new StringBuffer();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (Exception e) {\n      throw new",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(text.getBytes());\n      byte[] bytes = md.digest();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      return sb.toString();\n    } catch (Exception e) {\n      throw new"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        for (int i = c; i <= b",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        for (int i = c; i",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            for (int j = c; j <= b; j++) {\n                list.add(i",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            for (int j = c; j <= b; j++) {\n                list.add",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        for (int i = c; i",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(String.valueOf(i));\n        }\n        return result;\n    }\n\n    public",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(String.valueOf(i));\n        }\n        return list;\n    }\n\n    public",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        for (int i = c; i <= b",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            for (int j = c; j <= b; j++) {\n                result.add(i",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        for (int i = a; i <= c"
      ]
    }
  },
  "model": "codegen-350M-multi",
  "time": 718
}