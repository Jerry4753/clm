{
  "config": "CODEGEN_COMPLETE_CODEFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static List<Double> get_close_elements(List<Double> numbers, double threshold){\n    List<Double> close_elements = new ArrayList<Double>();\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static List<Double> get_close_elements(List<Double> numbers, double threshold){\n    List<Double> close_elements = new ArrayList<>();\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scanner.nextDouble());\n    ",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in.nextDouble());\n    }",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args){\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scanner.nextDouble());\n    }",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in.nextDouble());\n    }",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args){\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in.nextDouble());\n    }\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<Double>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in.nextDouble());\n    ",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<Double>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scanner.nextDouble());\n"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += String.valueOf(c);\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += String.valueOf(c);\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0){\n        result.add(current_string);\n    }\n    return",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += String.valueOf(c);\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_depth!= 0){\n        result.add(current_string);\n    }\n    return result;\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0){\n        result.add(current_string);\n    }\n    return result;\n}\n\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += String.valueOf(c);\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    if (!current_string.isEmpty()){\n        result.add(current_string);\n    }\n    return result",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n            else{\n                current_string += String.valueOf(c);\n            }\n        }\n        else{\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static int round_number(int number) {\n        return (int) Math.round(number);\n    }\n\n    public static float",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static int round_number(int number) {\n        return (int) Math.round(number);\n    }\n\n    public static long",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static short truncate_number(short number) {\n        return (short) Math.floor(number);\n    }",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static int round_number(int number) {\n        return Math.round(number);\n    }\n\n    public static long round_number",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static int round_number(int number) {\n        return Math.round(number);\n    }\n\n    public static float round_number",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.round(number);\n    }\n\n    public static",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static double round_number(double number) {\n        return Math.floor(number + 0.5);\n    }",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n\n    public static double round(double number) {\n        return Math.round(number);\n    }\n\n    public static int round",
        "public static double truncate_number(double number) {\n        return Math.floor(number);\n    }\n\n    public static int truncate_number(int number) {\n        return (int) Math.floor(number);\n    }\n\n    public static long truncate_number(long number) {\n        return (long) Math.floor(number);\n    }\n\n    public static float truncate_number(float number) {\n        return (float) Math.floor(number);\n    }\n}\n"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\npublic static boolean equal_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n}\n\npublic static boolean not_equal_zero(List<Integer> operations",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\npublic static boolean equal(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance == 0;\n}\n\npublic static boolean not_equal(List<Integer> operations) {\n    ",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> operations = new ArrayList<>();\n    for (int i = 0; i < n; i++){",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Integer> operations = new ArrayList<>();\n    for (int i = 0; i < n; i++){",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}\n\npublic static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance -= op;\n    }\n    return balance > 0;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> operations = new ArrayList<Integer>();\n    for (int i = 0; i < n; i++"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double standard_deviation(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double mean_absolute_deviation(double[] numbers) {\n    double sum = 0.;\n    for (double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.length;\n    double deviation_sum = 0.;\n    for (double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    ",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return deviation_sum / numbers.size();\n}\n\npublic static double standard_deviation(List<",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double mean(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    return sum / numbers.size();\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double sum = 0.;\n    for (Double number :",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return deviation_sum / (numbers.size() - 1);\n}\n\npublic static double standard_",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double standard_deviation(List<Double> numbers) {\n    return Math.sqrt(variance(numbers));\n}\n\npublic static double variance(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return deviation;\n}\n}\n"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> reverse(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = numbers.size() - 1; i >= 0; i--) {\n        result.add(numbers.get(",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> reverse(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = numbers.size() - 1; i >= 0; i--)\n        result.add(numbers.get(i",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> reverse(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = numbers.size() - 1; i >=",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> intersperse(List<Integer> numbers, int... delimeters) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    List<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(1);\n    numbers.add(2);\n    numbers.add(3);\n    numbers.add(4);\n    ",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> reverse(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(numbers.size()"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups)",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    List<Integer> result = new ArrayList<Integer>();\n    String[] paren_groups = paren_string.split(\" \");\n    for (String paren_group : paren_"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    Pattern pattern = Pattern.compile(regex);\n    for (String string : strings){\n      if (pattern.matcher(string).matches()){\n        result.add(string);\n      }\n    }\n    ",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.toLowerCase().contains(substring.toLowerCase())){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex){\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += numbers.get(i);\n            }\n        }\n        return result;\n    }\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += numbers.get(i);\n            }\n        }\n        return result;\n    }\n\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n            }\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        ",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += result[i];\n            }\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += result[j];\n            }\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += result[i];\n            }\n        }\n        return result;\n    }\n\n    public",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n        }\n        for (int i = 0; i < result.length; i++) {\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += result[j];\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += result[i];\n            }\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i);\n            for (int j = i + 1; j < result.length; j++) {\n                result[i] += numbers.get(j);\n                result[j] += result[i];\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.as"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min == null || n < running_min){\n        running_min = n;\n      }\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max) {\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min == null || n < running_min) {\n        running_min = n;\n      ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else if (n > running_max){\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min == null){\n        running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min ==",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n  \n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max) {\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers) {\n      if (running_min == null || n < running_min) {\n        running_min = n;\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else {\n        if (n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_sum(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_sum = 0;\n    for (Integer n : numbers){\n      running_sum += n;",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null){\n        running_max = n;\n      } else if (n > running_max){\n        running_max = n;\n      }\n      result.add(running_max);\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0, j = str.length() - 1; i < j; i++,",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    return result.substring(beginning_of_suffix, end_of_suffix + 1);\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    int i = 0;\n    int j = str.length() - 1;\n    while (i <",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length()/2; i++){\n        if (",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = str.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    int length = str.length();\n    for (int i = 0; i < length / 2; i",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    for (int i = 0;",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++)\n        if (str",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int end_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(0, end_of_suffix))){\n        end_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, end_of_suffix + 1);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++) {\n        if ("
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (b.charAt(i) == a.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n\npublic static String string_and(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    for (int i = 0; i < b.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args){\n    Scanner in = new Scanner(System.in);\n    String a = in.next();\n    String b = in.next"
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen)\n        maxlen = string.length();\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(strings.size() - 1);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}\n\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      int len = string.length();\n      if (len > maxlen){\n        maxlen = len;\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n\n}\n"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    System.out.println(greatest_common_divisor(a, b));\n}\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    int gcd = greatest_common_divisor(a, b);\n    System.out.println(gcd);\n}\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    System.out.println(greatest_common_divisor(a,b));\n}\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    System.out.println(greatest_common_divisor(a, b));\n}\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    System.out.println(greatest_common_divisor(a, b));\n  }\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    int gcd = greatest_common_divisor(a, b);\n    System.out.println(gcd);\n  }\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    System.out.println(greatest_common_divisor(a, b));\n}\n\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int a = in.nextInt();\n    int b = in.nextInt();\n    int gcd = greatest_common_divisor(a, b);\n    System.out.println(gcd);\n}\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    int b = in.nextInt();\n    int gcd = greatest_common_divisor(a, b);\n    System.out.println(a/gcd);\n    System.out.println(b/gcd);\n}\n}\n"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n        result.add(string.substring(i, string.length()));\n    }\n    return result;\n}\n\npublic static List<String> all_substrings(String string){\n    List",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n        result.add(string.substring(i, string.length()));\n    }\n    return result;\n}\n\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n\n  public static List<String> all_substrings(String string){\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string,",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n  \n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n  \n  public static List<String> all_suffixes",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n        result.add(string.substring(i, string.length()));\n    }\n    return result;\n}\n\npublic static List<String> all_combinations(String string){\n    List",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i + 1));\n    }\n    return result;\n  }\n  \n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n      result.add(string.substring(i, string.length()));\n    }\n    return result;\n  }\n  \n  public static List<String> all_substrings("
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(string_sequence(n));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(string_sequence(n));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    System.out.println(string_sequence(n));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(10));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println(string_sequence(n));\n}\n}\n"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\nusing namespace std;\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}\n}\n"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "8,5-20,5",
      "output": [
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); ++i) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      String note = music_string.substring(i, i + 1);\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i+1))) {\n        result.add(note_map.get(music_string.substring(i, i+1)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      String s = music_string.substring(i, i + 1);\n      if (note_map.containsKey(s)) {\n        result.add(note_map.get(s));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    int index = 0;\n    while ((index = string.indexOf(substring, index))!= -1) {\n      times++;\n      index += substring.length();\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    int index = 0;\n    while ((index = string.indexOf(substring, index))!= -1) {\n        times++;\n        index += substring.length();\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    while (string.indexOf(substring)!= -1) {\n        times++;\n        string = string.substring(string.indexOf(substring) + substring.length());\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    int index = string.indexOf(substring);\n    while (index!= -1) {\n        times++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}\n\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    int index = 0;\n    while ((index = string.indexOf(substring, index))!= -1) {\n        times++;\n        index += substring.length();\n    }\n    return times;\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.charAt(i) == substring.charAt(0)) {\n            times++;\n        }\n    }\n    return times;\n}\n}\n"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    StringBuilder sb = new StringBuilder",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          return value_map.get(o1) - value_map.get(o2);\n        } else if (value_map.containsKey(o2)) {\n          return value_map.get(o2) - value_map.get(o1);\n        } else {\n          return o1.comp",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    return number_array.toString();",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String a, String b) {\n        if (value_map.get(a) > value_map.get(b)) {\n          return 1;\n        } else if (value_map.get(a) < value_map.get(b)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    StringBuilder sb = new StringBuilder();\n    for (String number : number_",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          return value_map.get(o1) - value_map.get(o2);\n        } else if (value_map.containsKey(o2)) {\n          return value_map.get(o2) - value_map.get(o1);\n        } else {\n          return 0;\n        ",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    return number_array.get(0",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    StringBuilder result = new StringBuilder();",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    String sorted_numbers = \"\";",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String a, String b) {\n        if (value_map.get(a) > value_map.get(b)) {\n          return 1;\n        } else if (value_map.get(a) < value_map.get(b)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    String sorted_numbers = \"\";\n    for (String number : number_array",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String a, String b) {\n        if (value_map.get(a) > value_map.get(b)) {\n          return 1;\n        } else if (value_map.get(a) < value_map.get(b)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    return number_array.toString();\n  }\n}\n"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i!= j){\n          double d = Math.pow(numbers[i] - numbers[j], 2);\n          if (d < distance){\n            distance = d;\n            result[0] = i;\n            result[1] = j;\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i!= j){\n                double d = Math.abs(numbers[i] - numbers[j]);\n                if (d < distance){\n                    distance = d;\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i == j){\n          continue;\n        }\n        double d = Math.pow(numbers[i] - numbers[j], 2);\n        if (d < distance){\n          distance = d;\n          result[0] = i;\n          result[1] = j;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i!= j){\n                double d = Math.pow(numbers[i] - numbers[j], 2);\n                if (d < distance){\n                    distance = d;\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i!= j){\n                double d = Math.pow(numbers[i] - numbers[j], 2);\n                if (d < distance){\n                    distance = d;\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i == j){\n                continue;\n            }\n            double d = Math.pow(numbers[i] - numbers[j], 2);\n            if (d < distance){\n                distance = d;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i!= j){\n          double d = Math.pow(numbers[i] - numbers[j], 2);\n          if (d < distance){\n            distance = d;\n            result[0] = i;\n            result[1] = j;\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    double[] numbers = {1, 2, 3, 4,",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i!= j){\n                double d = Math.pow(numbers[i] - numbers[j], 2);\n                if (d < distance){\n                    distance = d;\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            if (i!= j){\n                double d = Math.pow(numbers[i] - numbers[j], 2);\n                if (d < distance){\n                    distance = d;\n                    result[0] = i;\n                    result[1] = j;\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n\n    ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i == j){\n          continue;\n        }\n        double d = Math.pow(numbers[i] - numbers[j], 2);\n        if (d < distance){\n          distance = d;\n          result[0] = i;\n          result[1] = j;\n        }\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    double[] numbers = {1, 2,"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] new_numbers = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        new_numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return new_numbers;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] new_numbers = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        new_numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return new_numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] scaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        scaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return scaled;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] scaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        scaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return scaled;\n}\n}\n"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n      if (value instanceof Long){\n        result.add((Long) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Float> filter_floats(List<Object> values",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n      if (value instanceof Long){\n        result.add((Long) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values) {\n    List<Double> result = new ArrayList<Double>();\n    for (Object value : values){\n      if (value instanceof Double){\n        result.add((Double) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values) {\n    List<Double> result = new ArrayList<Double>();\n    for (Object value : values){\n      if (value instanceof Double){\n        result.add((Double)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values) {\n    List<Double> result = new ArrayList<Double>();\n    for (Object value : values){\n      if (value instanceof Double){\n        result.add((Double) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Float> filter_floats(List<Object>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String)value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Boolean> filter_booleans(List<Object>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String)value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\t",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) ==''){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\r'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\t",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n' || string.charAt(i) == '\\r')",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i)!= '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\t",
        "public static int strlen(String string){\n        int len = 0;\n        for(int i = 0; i < string.length(); i++){\n            if(string.charAt(i)!=''){\n                len++;\n            }\n        }\n        return len;\n    }\n}\n",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\tif(string",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\t'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\t",
        "public static int strlen(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n\t\t}\n\t\treturn len;\n\t}\n\t\n\tpublic static int strlen2(String string){\n\t\tint len = 0;\n\t\tfor(int i = 0; i < string.length(); i++){\n\t\t\tlen++;\n\t\t\tif(string.charAt(i) == '\\n'){\n\t\t\t\tlen++;\n\t\t\t}\n",
        "public static int strlen(String string){\n        int len = 0;\n        for(int i = 0; i < string.length(); i++){\n            if(string.charAt(i) ==''){\n                len++;\n            }\n        }\n        return len;\n    }\n}\n"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        ",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n % 2 == 0) {\n            return largest_divisor(n / 2);\n        } else if (n % 3 == 0) {\n            return largest_divisor(n /",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }\n\n    ",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }\n}",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return largest_divisor(n / 2)",
        "public static int largest_divisor(int n) {\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(largest_divisor(n));\n    }\n}\n",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        return largest_divisor(",
        "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n >= 7) {\n            return 7;\n        ",
        "public static int largest_divisor(int n) {\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(largest_divisor(n));\n    }\n}\n"
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n!= 1){\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1) result.add(n);\n    return result;\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= n){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)Math.sqrt(n) + 1){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i < n){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) > 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (!count.containsKey(n)){\n            result.add(n);\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        }\n        else{\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()) {\n        if (count.get(n) > 1) {\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> remove_duplicates2(List<Integer> numbers)",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n\npublic static void main(String[] args) {\n    System.out.println(flip_case(\"hello\"));\n    System.out.println(flip_case(\"HELLO\"));\n    System.out.println(flip_case(\"",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}\n\npublic static void main(String[] args) {\n    System.out.println(flip_case(\"Hello World\"));\n}\n}\n"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder builder = new StringBuilder();\n        for (String string : strings) {\n            builder.append(string);\n        }\n        return builder.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i!= strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String string : strings) {\n            sb.append(string);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.size(); i++) {\n            sb.append",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String concatenate(String[] strings, String separator) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i!= strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String concatenate(String[] strings, String separator) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb",
        "public static String concatenate(String[] strings) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String concatenate(Collection<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String string : strings) {\n            sb.append(string);\n            sb.append"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.endsWith(suffix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if(string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if(string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_zero(List<Integer> numbers) {\n    List<Integer",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_zero(List<Integer> numbers) {\n    List",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_odd(List<Integer> numbers) {\n    List<Integer",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    List<Integer> numbers = Arrays.as",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_odd(List<Integer> numbers) {\n    List",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    List<Integer> numbers = new ArrayList<"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0)\n                return false;\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(is_",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0)\n                return false;\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 1; i <= n; i",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 1; i",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    if (is_prime(n))",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    else {\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    if (is_"
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x){\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        result += xs.get(i) * Math.pow(x, i);\n    }\n    return result;\n}\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = xs.size() - 1; i >= 0; i--) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x){\n    double sum = 0.;\n    for (int i = xs.size() - 1; i >= 0; i--) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x){\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n\npublic static void main(String[] args",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n\npublic static void main(String[]",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = xs.size() - 1; i >= 0; i--) {\n        sum += xs.get(i) * Math.pow(x, i);\n    }\n    return sum;\n}\n\npublic static double",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 0.;\n    for (int i = 0; i < xs.size(); i++) {\n        result += xs.get(i) * Math.pow(x, i);\n    }\n    return result;\n}\n\npublic static void main(String[]"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        }\n        result.add(l.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        }\n        result.add(l.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i / 3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i / 3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    ",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        }else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i / 3));\n        }else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    ",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if(!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)) {\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n))\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(5);\n    l.add(6);\n    l.add(7);\n    l.add(8);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(1);\n    l.add(2);\n    l.add(2);\n    l.add(3);\n    l.add(3);\n    l.add(4);\n    l.add(4);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(1);\n    l.add(1);\n    l.add(2);\n    l.add(2);\n    l.add(2);\n    l.add(3);\n    l.add(3);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(2);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(5);\n    l.add(6);\n    l.add(7);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(1);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(5);\n    l.add(6);\n    l.add(7);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(1);\n    l.add(2);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(4);\n    l.add(5);\n    l"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {",
      "function range": "6,5-14,5",
      "output": [
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int min_element(List<Integer> l) {\n        int min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                ",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int max_element(int[] l) {\n        int max = l[0];\n        for (int i = 1; i < l.length; i++) {\n            if (l[i] > max) {\n                max = l[i];",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static int max_element2(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n",
        "public static int max_element(List<Integer> l) {\n        int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > result) {\n                result = l.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        List<Integer> l = new ArrayList<>();\n        for (int i = 0; i <",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n}\n",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        l",
        "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        "
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result = result + 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 3 == 0 || i % 5 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0 || i % 17 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 5 == 0 || i % 7 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\npublic static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else {\n            result += 0;\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 1) {\n        result[i] = l[i];",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2!= 0) {\n        result[i] = l[i];",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  ",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    for (int i = 0; i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n        result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n}\n\npublic static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n        result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n}\n\npublic static",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i] + 1;\n    }\n    Arrays.sort(result);\n    return result;\n  ",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i + 1];\n    }\n    Arrays.sort(result);\n    return result;\n  }",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n  \n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 1) {\n        result[i] = l[",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    Arrays.sort(result);\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (i % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    Arrays."
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n      sb.append(groups.get(i));\n    }\n    return sb.toString();\n  }\n\n  public static String decode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      sb.append(groups.get(i % groups.size()));\n    }\n    return sb.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    Collections.shuffle(groups);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      sb.append(groups.get(i));\n    }\n    return sb.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    Collections.shuffle(groups);\n    StringBuilder sb = new StringBuilder();\n    for (String group : groups) {\n      sb.append(group);\n    }\n    return sb.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n      sb.append(groups.get(i));\n    }\n    return sb.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    Collections.shuffle(groups);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      sb.append(groups.get(i));\n    }\n    return sb.toString();\n  }\n\n  public static String decode_cyclic(String s) {\n    ArrayList<String> groups = new",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n      sb.append(groups.get(i));\n      if (i!= groups.size() - 1) {\n        sb.append(\"-\");\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n      sb.append(groups.get(i));\n      if (i!= groups.size() - 1) {\n        sb.append(\"-\");\n      }\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[]",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    Collections.shuffle(groups);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      sb.append(groups.get(i));\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[] args) {\n    System.out.println(encode_cycl",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n      groups.add(s.substring(i, i + 1));\n    }\n    for (int i = 0; i < groups.size(); i++) {\n      for (int j = i + 1; j < groups.size(); j++) {\n        if (groups.get(i).equals(groups.get(j))) {\n          groups.remove(j);\n          j--;\n        }\n      }\n    }\n    return groups.toString();\n  "
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) >= n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) >= n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i - 1) + fib.get(i - 2));\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) > n) {\n            break;\n        }\n    }\n    return fib.get(fib.size() - 1);\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i - 1) + fib.get(i - 2));\n        }\n        if (fib.get(n - 1) == n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) > n) {\n            break;\n        }\n    }\n    return fib.get(fib.size() - 1);\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i-1) + fib.get(i-2));\n        }\n        if (fib.get(n-1) == n) {\n            return fib.get(n-1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i - 1) + fib.get(i - 2));\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i - 1) + fib.get(i - 2));\n        }\n        if (fib.get(n - 1) == n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i - 1) + fib.get(i - 2));\n        }\n        if (fib.get(n - 1) == n) {\n            return fib.get(n - 1);\n        }\n        if (fib.get(n - 1) > n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i]!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            if (numbers[i] + numbers[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n  }\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            if (numbers[i] + numbers[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i]!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                int sum = numbers[i] + numbers[j] + numbers[k];\n                if (sum == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        int sum = 0;\n        for (int j = i; j < numbers.length; j += 1) {\n            sum += numbers[j];\n        }\n        if (sum!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        } else if (n == 8) {\n            return 8;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else if (n == 3) {\n            return 2;\n        } else if (n == 4) {\n            return 3;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 5;\n        } else if (n == 7) {\n            return 6;\n        } else if (n == 8) {\n            return 7;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 4) {\n            return 5;\n        } else if (n == 5) {\n            return 6;\n        } else if (n == 6) {\n            return 7;\n        } else if (n == 7) {\n            return 8;\n        ",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {",
        "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else if (n == 3) {\n            return 2;\n        } else if (n == 4) {\n            return 3;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 5;\n        } else if (n == 7) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }\n\n    ",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        } else {\n            return 8;\n        }\n    }\n\n    ",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else if (n == 3) {\n            return 2;\n        } else if (n == 4) {\n            return 3;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 5;\n        } else if (n == 7) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }\n}",
        "public static int car_race_collision(int n) {\n        if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else if (n == 7) {\n            return 7;\n        } else {\n            return 8;\n        }\n    }\n}"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> add_list(List<Integer> l1, List<Integer> l2) {\n    List<Integer> result = new ArrayList<Integer>",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n+1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n-1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n  \n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n  \n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n  \n  public static List<Integer> add_list(List<Integer> l1, List<Integer> l2) {\n    List<Integer> result = new Array",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> add_list(List<Integer> a, List<Integer> b) {\n    List<Integer> result = new ArrayList<Integer>();\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add("
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) == 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> l = new ArrayList<>();\n    for (int i = 0; i < n; i",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      int sum = 0;\n      for (int j = i; j < l.size(); j += 1) {\n        sum += l.get(j);\n      }\n      if (sum!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> l = new ArrayList<Integer>();\n    for (int i = 0; i < n;",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        int sum = 0;\n        for (int j = i; j < l.size(); j += 1) {\n            sum += l.get(j);\n        }\n        if (sum!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Integer> l = new ArrayList<>();\n    for (int i = 0; i < n; i",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> l = new ArrayList<>(n);\n    for (int i = 0; i < n;",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            int sum = l.get(i) + l.get(j);\n            if (sum == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Integer> l = new ArrayList<Integer>(n);\n    for (int i = 0; i < n"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = (char) (x % base + '0') + result;\n      x = x / base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int x = in.nextInt();\n        int base = in.nextInt();\n        System.out.println(change_base(x, base));\n    }\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        int base = in.nextInt();\n        System.out.println(change_base(n, base));\n    }\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int a = in.nextInt();\n        int b = in.nextInt();\n        System.out.println(change_base(a, b));\n    }\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();\n        int d = in.nextInt();",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        System.out.println(change_base(n, 10));\n    }\n}\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        System.out.println(change_",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();\n        System.out.println(change_",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (char) (x % base + '0') + result;\n        x = x / base;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int n = in.nextInt();\n        System.out.println(change_"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * (a - h) * (a + h) + b * (b - h) * (b + h));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * (a - h) * (a + h) + b * (",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(Math.pow(a, 2)",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(Math.pow(a, 2) + Math.",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * (a - h) * (a + h)) + Math.sqrt(b * (b - h) * (b + h));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * (a - h) * (a + h",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * (a - b) * (a + b) + b * (b - c) * (b + c) + c * (c - a) * (c + a));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return Math.sqrt(a * (",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2) + Math.pow(b, 2));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(Math.pow(a, 2)",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        return Math.sqrt(a * (a - b) * (a + b) + b * (b - c) * (b + c) + c * (c - a) * (c + a));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        return triangle_area(a, b,",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * (a - h) * (a + h) + b * (b - h) * (b + h));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt((a - h) * (a + h) * (b - h) *",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * (a - h) * (a + h) + b * (b - h) * (b + h));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * (a - h) * (a + h) * (a -",
        "public static double triangle_area(double a, double h) {\n        return Math.sqrt(a * (a - h) * (a + h));\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * (a - h) * (a + h)) + Math.sqrt(b * (b - h) * (b + h));\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return triangle_area(a, b, c) + triangle_area(a,"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n    result.add(1);\n    if (n < 3)\n        return result.get(n);\n    for (int i = 3; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 5)\n        return result.get(n);\n    for (int i = 5; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    result.add(1);\n    if (n < 5)\n        return result.get(n);\n    for (int i = 5; i < n + 1; i += 1) {\n        result.add(\n            ",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(1);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(0);\n    if (n < 5)\n        return result.get(n);\n    for (int i = 5; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] list = new int[n];\n    for (int i = 0; i < n; i++) {\n        list[i] = in.nextInt();\n    }\n    System.out.println(",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) list.length / 2]) /",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}\n\npublic static double mean(int[] list) {\n    double sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i];\n    }\n    return sum / list.length;\n}\n\npublic static double variance(int[] list) {\n    double mean = mean(list);\n    double sum = 0",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2.0;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2 - 1)] + list[(int) list.length / 2])"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1){\n        String text = in.next();\n        if (is_palindrome(text)){\n            System.out.println(",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1){\n        String text = in.next();\n        if (is_palindrome(text)){\n            System.out.println(\"",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    for (int i = 0; i < n; i += 1){\n        String text = scanner.next();\n        if (is_palindrome(text)){\n            System.out.println(",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    String text = scanner.nextLine();\n    System.out.println(is_palindrome(text));\n}\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String text = in.next();\n        if (is_palindrome(text)){\n            System.out.println",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String text = in.next();\n    System.out.println(is_palindrome(text));\n}\n}\n"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static long modp(long n, long p) {\n    long result = 1;\n    for (int i = 0; i < n; i += 1){\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m, int q) {\n    int result = 1;\n    for (int i = 0; i < n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static long modp(long n, long p) {\n    long result = 1;\n    for (long i = 0; i < n; i += 1){\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m, int k) {\n    int result = 1;\n    for (int i = 0; i < n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static long modp(long n, int p) {\n    long result = 1;\n    for (int i = 0; i < n; i += 1){\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m, int m2) {\n    int result = 1;\n    for (int i = 0; i <",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % n;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p, int m) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * p) % m;\n    }\n    return result;\n  }\n\n  public static int modp(long n, long p) {\n    long result = 1;\n    for (long i = 0; i < n; i += 1){\n"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c == '+') {\n        sb.append(' ');\n      } else if (c == '/') {\n        sb.append('_');\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c =='') {\n        sb.append('+');\n      } else",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 'A'));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else if (c == '+') {\n        sb.append(' ');\n      } else if (c == '/') {\n        sb.append('_');\n      ",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(decode_shift(c));\n    }\n    return sb.toString();\n  }\n\n  public static char decode_shift(char c) {\n    if (c >= 'A' && c <= 'Z') {\n      return (char) (c - 'A' + 'a');\n    } else if (c >= 'a' && c <= 'z') {\n      return (char) (c - 'a' + 26);\n    } else if (c >= '0' && c <= '9') {\n      return (",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 'A'));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else if (c == '+') {\n        sb.append('-');\n      } else if (c == '/') {\n        sb.append('_');\n      ",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      sb.append(decode_shift(c));\n    }\n    return sb.toString();\n  }\n\n  public static char decode_shift(char c) {\n    if (c >= 'A' && c <= 'Z') {\n      return (char) (c - 'A' + 'a');\n    }\n    if (c >= 'a' && c <= 'z') {\n      return (char) (c - 'a' + 26);\n    }\n    if (c >= '0' && c <= '9') {\n      ",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 'A'));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else if (c == '+') {\n        sb.append(' ');\n      } else if (c == '/') {\n        sb.append(' ');\n      ",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 'A'));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 'A'));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append(c);\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c == '+') {\n        sb.append(' ');\n      } else if (c == '/') {\n        sb.append('_');\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c == '_') {\n        sb.append('/');\n      } else",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c == '+') {\n        sb.append(' ');\n      } else if (c == '/') {\n        sb.append('_');\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n        return true;\n      default:",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!Character.isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n        return true;\n    }\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  public static void main(String[] args) {\n    System.out.println",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!VOWELS.contains(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static boolean isVowel(char c) {\n    switch (c) {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  public static void main(String[] args) {\n"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] < t) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        l[i] = in.nextInt();\n    }\n    int t = in.nextInt();\n    System.out.println(",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] < t) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        l[i] = in.nextInt();\n    }\n    int t = in.nextInt();\n    if (below_threshold",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean below_threshold(long[] l, long t) {\n    for (int i = 0; i",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] < t) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        l[i] = in.nextInt();\n    }\n    int t = in.nextInt();\n    System.out.println(",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        l[i] = in.nextInt();\n    }\n    int t = in.nextInt();\n    System.out.println(",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] < t) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] l = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        l[i] = in.nextInt();\n    }\n    int t = in.nextInt();\n    if (below_threshold"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int and(int x, int y) {\n        return x & y;\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int negate(int x) {\n        return -x;\n    }\n\n    ",
        "public static int add(int x, int y) {\r\n        return x + y;\r\n    }\r\n\r\n    public static int sub(int x, int y) {\r\n        return x - y;\r\n    }\r\n\r\n    public static int mul(int x, int y) {\r\n        return x * y;\r\n    }\r\n\r\n    public static int div(int x, int y) {\r\n        return x / y;\r\n    }\r\n\r\n    public static int mod(int x, int y) {\r\n        return x % y;\r\n    }",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int shl(int x, int y) {\n        return x << y;",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int subtract(int x, int y) {\n        return x - y;\n    }\n\n    public static int multiply(int x, int y) {\n        return x * y;\n    }\n\n    public static int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static int remainder(int x, int y) {\n        return x % y;\n    }\n\n    public static int negate(int x) {\n        return -x;\n    }\n\n    ",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int neg(int x) {\n        return -x;\n    }\n\n    ",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int subtract(int x, int y) {\n        return x - y;\n    }\n\n    public static int multiply(int x, int y) {\n        return x * y;\n    }\n\n    public static int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static int modulus(int x, int y) {\n        return x % y;\n    }\n\n    public static int negate(int x) {\n        return -x;\n    }\n\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n\n    public static int bitAnd(int x, int y) {\n        return x & y;",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n\n    public static int mod(int x, int y) {\n        return x % y;\n    }\n}\n",
        "public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n        return x / y;\n    }\n}\n"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        if (c0.length!= c1.length) {\n            return false;\n        }\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i]!= c1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length())\n            return false;\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i))\n                return false;\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) return false;\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) return false;\n        }\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length())\n            return false;\n        for (int i = 0; i < s0.length(); i++)\n            if (s0.charAt(i)!= s1.charAt(i))\n                return false;\n        return true;\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(same"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib2(n - 1) + fib2(n - 2);\n        }\n    }",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fib2(n -",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(fib(n));\n    }\n}\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib2(n - 2);\n        }\n    }\n\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib2(n - 2) + fib2(n - 1);\n        }\n    }",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(fib(n));\n    }\n}\n",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    ",
        "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n\n    public static int fib2(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib2(n - 2);\n        }\n    }\n"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n    }\n    return depth == 0;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        String brackets = in.next();\n        if (correct_bracketing(brackets))\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String brackets = in.next();\n    System.out.println(correct_bracketing(brackets));\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    while (in.hasNext()) {\n        String brackets = in.next();\n        if (correct_bracketing(brackets))\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        String brackets = in.next();\n        if (!correct_bracketing(brackets))\n            System.out.println(\"NO\");\n        else\n            System.out.println(\"YES\");\n    }\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String brackets = in.next();\n    if (correct_bracketing(brackets))\n        System.out.println(\"YES\");\n    else\n        System.out.println(\"NO\");\n}\n}\n"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[l.length - i - 1] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[l.length - i - 1] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (l[i]!= reverse_sorted[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    return Arrays.equals(sorted, reverse_sorted);\n  }\n}\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (reverse_sorted[i]!= l[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[l.length - i - 1] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    return Arrays.equals(sorted, reverse_sorted);\n  }\n}\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[l.length - i - 1] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i])\n        return false;\n    }\n    return true;\n  }\n\n  "
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = l1[i] & l2[i];\n        }\n        return result;\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        } else if (l1 < l2) {\n            return l1;\n        } else {\n            return l2;\n        ",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        }\n        if (l1 < l2) {\n            return l1;\n        }\n        return l2;\n    }",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] ret = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            ret[i] = common(l1[i], l2[i]);\n        }\n        return ret;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        } else if (l1 < l2) {\n            return l1;\n        } else {\n            return l2;\n        ",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = Math.min(l1[i], l2[i]);\n        }\n        return result;\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        return Math.min(l1, l2);\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        }\n        if (l1 < l2) {\n            return l1;\n        } else {\n            return l2;\n",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] ret = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            ret[i] = common(l1[i], l2[i]);\n        }\n        return ret;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        }\n        if (l1 < l2) {\n            return l1;\n        }\n        return l2;\n    }",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        }\n        if (l1 < l2) {\n            return l2;\n        }\n        return l1;\n    }",
        "public static int[] common(int[] l1, int[] l2) {\n        int[] result = new int[l1.length];\n        for (int i = 0; i < l1.length; i++) {\n            result[i] = common(l1[i], l2[i]);\n        }\n        return result;\n    }\n\n    public static int common(int l1, int l2) {\n        if (l1 == l2) {\n            return l1;\n        } else if (l1 < l2) {\n            return 0;\n        } else {\n            return l2;\n        }"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        while (n % j == 0) {\n            largest = j;\n            n /= j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        while (n % j == 0) {\n            largest = j;\n            n = n / j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            while (n % j == 0) {\n                n /= j;\n            }\n            if (n > largest) {\n                largest = n;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            while (n % j == 0) {\n                largest = j;\n                n /= j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            while (n % j == 0) {\n                n /= j;\n            }\n            if (n > largest) {\n                largest = n;\n            }\n        }\n    }\n    if (n > largest) {\n        largest = n;\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    if (n > largest) {\n        largest = n;\n    }\n    return largest;\n}\n"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static int sum_to_n2(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n\n    public static int sum_to_n3(int n) {\n        int sum = 0;\n        for (int i =",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(6));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(sum_to_n(n));\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static int sum_to_n2(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * (i + 1) / 2;\n        }\n        return sum;\n    }\n\n    public static int sum_to_n3(int n) {\n        int sum = 0;\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int sum = sum_to_n(n);\n        System.out.println(sum);\n    }\n}\n",
        "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i + 1) - xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i + 1) - xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i + 1) - xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i) + xs.get(",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) + xs.get(i - 1));\n    ",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i + 1) - xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i - 1) + xs.get(i",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Integer> xs = new ArrayList<Integer>();\n    for (int i = 0; i < n; i++) {\n      xs.add(scanner",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size() - 1; i++) {\n      result.add(xs.get(i + 1) - xs.get(i",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n  public static List<Integer> integral(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i) + xs.get(i + 1));\n    ",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\npublic static void main(String[] args) {\n    System.out.println(fibfib(0));\n    System.out.println(fibfib(1));\n    System.out.println(fibfib(2));\n    System.out.println(fibfib(3));\n    System.out.println(fibfib(4));\n    System.out.",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\npublic static int fibfib2(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib2(n - 1) + fibfib2(n - 2);\n}\n\npublic static int fibfib3(int n) {\n    ",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(fibfib(n));\n  }\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(fibfib(n));\n  }\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\npublic static void main(String[] args) {\n    System.out.println(fibfib(0));\n    System.out.println(fibfib(1));\n    System.out.println(fibfib(2));\n    System.out.println(fibfib(3));\n    System.out.println(fibfib(4));\n}\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\n}\n"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O'\n                && c!= 'U')\n            result += 1;\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I'\n                && c!= 'O' && c!= 'U')\n            result += 1;\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l'\n                || c =='m' || c == 'n' ||",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U')\n            result += 1;\n    }",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U'))\n            result += 1",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k'\n                || c == 'l' || c =='m' || c == 'n' ||"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(shift);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(shift, s.length());\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(0, shift) + s.substring(shift);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        for (int i = shift; i < s.length(); i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(0, shift) + s.substring(shift, s.length());\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        for (int i = shift; i < s.length(); i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        for (int i = 0; i < shift; i += 1)\n            s = \"0\" + s;\n        return s;\n    }\n}\n}\n"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.getNumericValue(c);\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      String s = in.next();\n      System.out.println(digit_sum(s));\n    }\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String s = in.next();\n    System.out.println(digit_sum(s));\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        String s = in.next();\n        System.out.println(digit_sum(s));\n    }\n}\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        String s = in.next();\n        System.out.println(digit_sum(s));\n    }\n}\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String s = in.next();\n    System.out.println(digit_sum(s));\n}\n}\n"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      String s = in.next();\n      int n = in.nextInt();\n      System.out.println(fruit_distribution(s, n));\n    }\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result *= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      int n = in.nextInt();\n      String s = in.next();\n      int result = fruit_distribution(s, n);\n      System.out.println(result);\n    }\n  }\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      int n = in.nextInt();\n      String s = in.next();\n      System.out.println(fruit_distribution(s, n));\n    }\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      String s = in.next();\n      int n = in.nextInt();\n      int result = fruit_distribution(s, n);\n      System.out.println(result);\n    }\n  }\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      int n = in.nextInt();\n      String s = in.next();\n      int result = fruit_distribution(s, n);\n      System.out.println(result);\n    }\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      int n = in.nextInt();\n      String s = in.next();\n      System.out.println(fruit_distribution(s, n));\n    }\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= fruit_distribution(str, n);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String s = in.next();\n    int result = fruit_distribution(s, n);\n    System.out.println(result);\n  }\n}\n"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n        int[] newArr = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            newArr[i] = arr[i];\n        }\n        return newArr;\n    }\n\n    public static double[] pluck(double[] arr) {\n        double[] newArr = new double[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            newArr[i] = arr[i];\n        }\n        return newArr",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n}\n",
        "public static int[] pluck(int[] arr) {\n        int[] newArr = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            newArr[i] = arr[i];\n        }\n        return newArr;\n    }\n}\n",
        "public static int[] pluck(int[] arr) {\n        int[] arr2 = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n}\n",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int[] result = pluck(arr);\n        for (int i = 0; i < result.length; i++) {\n            System.out.println(result[i]);\n        }\n    ",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int[] result = pluck(arr);\n        for (int i = 0; i < result.length; i++) {\n            System.out.print(result[i] + \" \");\n",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int[] result = pluck(arr);\n        for (int i = 0; i < result.length; i++) {\n            System.out.println",
        "public static int[] pluck(int[] arr) {\n        int[] arr2 = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int[] arr2 = pluck(arr);\n        for (int i = 0; i < arr2.length; i++) {\n            ",
        "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int[] result = pluck(arr);\n        for (int i = 0; i < result.length; i++) {\n            System.out.print",
        "public static int[] pluck(int[] arr) {\n        int[] plucked = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            plucked[i] = arr[i];\n        }\n        return plucked;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int[] plucked = pluck(arr);\n        for (int i = 0; i < plucked.length; i++) {\n            "
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max)\n            result = i;\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (Integer i : lst) {\n        if (i == max)\n            result = i;\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; ++i) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for (int i = 0; i < n; i++) {\n        arr[i] = in.next"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }",
      "function range": "17,5-29,5",
      "output": [
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(0);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        Collections.swap(lst, 0, lst.size() - 1);\n        lst.remove(lst.size() - 1);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        Collections.swap(lst, 0, lst.size() - 1);\n    }\n    return result;\n}\n}\n"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "",
      "function range": "16,5-26,5",
      "output": []
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = in.nextInt();\n    int w = in.nextInt();\n    System.out.println(will_it_fly(q, w));\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = scanner.nextInt();\n    int w = scanner.nextInt();\n    System.out.println(will_it_fly(q, w));\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = in.nextInt();\n    int w = in.nextInt();\n    if (will_it_fly(q, w))\n        System.out.",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = in.nextInt();\n    int w = in.nextInt();\n    System.out.println(will_it_fly(q, w));\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = scanner.nextInt();\n    int w = scanner.nextInt();\n    if (will_it_fly(q, w))\n        System.out.",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i] = in.nextInt();\n    int w = in.nextInt();\n    if (will_it_fly(q, w))\n        System.out.println"
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                if (Math.abs(arr[i] - arr[j]) > result) {\n                    result = Math.abs(arr[i] - arr[j]);\n                }\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                result += arr[i] - arr[j];\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                result = Math.max(result, j - i);\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                result += arr[j] - arr[i];\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                result = Math.max(result, Math.abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                result = Math.max(result, Math.abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.next",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                if (Math.abs(arr[i] - arr[j]) > result) {\n                    result = Math.abs(arr[i] - arr[j]);\n                }\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                if (Math.abs(arr[i] - arr[j]) > result) {\n                    result = Math.abs(arr[i] - arr[j]);\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                if (Math.abs(arr[i] - arr[j]) > result) {\n                    result = Math.abs(arr[i] - arr[j]);\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int[] arr",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                result = Math.max(result, j - i);\n            }\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return res;\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return res;\n}\n\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return res;\n}\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n            }\n        }\n    }\n    return res;\n}\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n            }\n        }\n    }\n    return res;\n}\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n            }\n        }\n    }\n    return res;\n}\n\npublic static List",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n            }\n        }\n    }\n    return result;\n}\n\npublic static List"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }\n    return true;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args)",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % i == 0 || a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % i == 0 || a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % i == 0 && a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % i == 0 && a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){"
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        } else if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return true;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (x < 0) {\n            return false;\n        }\n        if (x == 0) {\n            return n == 0;\n        }\n        if (x == 1) {\n            return n == 1;\n        }\n        if (x == 2) {\n            return n == 2;\n        }\n        if (x == 3) {\n            return n == 3;\n        }\n        if (x == 4) {\n            return n == 4;\n        }\n        if (x == 5) {\n            return n == 5;",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        return false;\n    }\n\n",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return false;\n        }\n        if (n == 7) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        return false;\n    }\n",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return false;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        } else if (n == 1) {\n            return true;\n        } else if (n == 2) {\n            return true;\n        } else if (n == 3) {\n            return true;\n        } else if (n == 4) {\n            return true;\n        } else if (n == 5) {\n            return true;\n        } else if (n == 6) {\n            return true;\n        } else if (n == 7) {\n            return false;\n        ",
        "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return false;\n        }\n        if (n == 6) {\n            return false;\n        }\n        if (n == 7) {"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n            case 21:\n            case 22:\n            case 23:\n            case 24:\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            case 10:\n                return true;\n            case 11:\n                return true;\n            case 12:\n                return true;\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 0:\n                return false;\n            case 1:\n                return false;\n            case 2:\n                return false;\n            case 3:\n                return false;\n            case 4:\n                return false;\n            case 5:\n                return false;\n            case 6:\n                return false;\n            case 7:\n                return false;\n            case 8:\n                return false;\n            case 9:\n                return false;\n            case 10:\n                return false;\n            case 11:\n                return false;\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n                return true;\n            default:\n                return false;\n        }\n    }\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            case 10:\n                return true;\n            case 11:\n                return true;\n            default:\n                return false;\n        ",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            case 10:\n                return true;\n            default:\n                return false;\n        }\n    }\n}\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            case 10:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public static boolean is",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            default:\n                return false;\n        }\n    }\n}\n",
        "public static boolean iscude(int a) {\n        switch (a) {\n            case 1:\n                return true;\n            case 2:\n                return true;\n            case 3:\n                return true;\n            case 4:\n                return true;\n            case 5:\n                return true;\n            case 6:\n                return true;\n            case 7:\n                return true;\n            case 8:\n                return true;\n            case 9:\n                return true;\n            case 10:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public static void main"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= (c - '0');\n      } else if (c >= 'A' && c <= 'F') {\n        result |= (c - 'A' + 10);\n      } else if (c >= 'a' && c <= 'f') {\n        result |= (c - 'a' + 10);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n\n  /**",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n\n  /**",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + (c - '0');\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + (c - 'a' + 10);\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + (c - 'A' + 10);\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }\n  \n"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            if (decimal % 2 == 1) {\n                binary = \"1\" + binary;\n            } else {\n                binary = \"0\" + binary;\n            }\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        for (int i = 0; i < decimal; i++) {\n            binary += \"1\";\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, binary.length() - i - 1);\n            }\n        }\n        return",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        for (int i = 0; i < decimal; i++) {\n            binary += \"1\";\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, binary.length() - 1 - i);\n            }\n        }\n        return",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            if (decimal % 2 == 1) {\n                binary = \"1\" + binary;\n            } else {\n                binary = \"0\" + binary;\n            }\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            if (binary.",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        for (int i = 0; i < decimal; i++) {\n            binary += \"1\";\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                decimal++;\n            }\n        }\n        return decimal;\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        for (int i = 0; i < decimal; i++) {\n            binary += \"1\";\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, i);\n            }\n        }\n        return decimal;\n    }\n\n    ",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            if (decimal % 2 == 1) {\n                binary = \"1\" + binary;\n            } else {\n                binary = \"0\" + binary;\n            }\n            decimal /= 2;\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i)",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        for (int i = 0; i < decimal; i++) {\n            binary += \"1\";\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, i);\n            }\n        }\n        return decimal;\n    }\n}",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            if (decimal % 2 == 1) {\n                binary = \"1\" + binary;\n            } else {\n                binary = \"0\" + binary;\n            }\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            if (decimal % 2 == 1) {\n                binary = \"1\" + binary;\n            } else {\n                binary = \"0\" + binary;\n            }\n            decimal /= 2;\n        }\n        return binary;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            if (binary.char"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k) && s.charAt(i) == s.charAt(k))\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[]",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1))\n            return false;\n        if (s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k) && s.charAt(i) == s.charAt(k))\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i + 2)!= s.charAt(i + 3))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k) && s.charAt(i) == s.charAt(k))\n                    return true;\n            }\n        }\n    }\n    return false;\n}\npublic static void main(String[] args",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k)\n                        && s.charAt(i) == s.charAt(k))\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k)\n                        && s.charAt(i) == s.charAt(k))\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        for (int j = i + 1; j < s.length() - 1; j += 1) {\n            for (int k = j + 1; k < s.length(); k += 1) {\n                if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k) && s.charAt(i) == s.charAt(k))\n                    return false;\n            }\n        }\n    }\n    return true;\n}\n\npublic static void main(String[]"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else\n            ",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > -0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > -1.3)\n            letter_grade[i] = \"D-\";\n        else",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > -1.0)\n            letter_grade[i] = \"D\";\n        else if (gpa > -1.3)\n            letter_grade[i] = \"D-\";\n        else",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa >.7)\n            letter_grade[i] = \"D\";\n        else if (gpa >.3)\n            letter_grade[i] = \"D-\";\n        else if (gpa",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n    }\n    ",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else \n",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > -1.0)\n            letter_grade[i] = \"D\";\n        else if (gpa > -1.7)\n            letter_grade[i] = \"D-\";\n        else",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa >.7)\n            letter_grade[i] = \"D\";\n        else if (gpa >.3)\n            letter_grade[i] = \"D-\";\n        else\n            letter_",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else\n            letter_grade[i] = \"D-\";\n    }\n    return letter_grade;\n}\n\n"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String string = in.next();\n        if (prime_length(string))\n            System.out.println(string);\n    }\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String s = in.next();\n        if (prime_length(s))\n            System.out.println(s);\n    }\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        if (prime_length(String.valueOf(n)))\n            System.out.println(n);\n    }\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        if (prime_length(Integer.toString(n)))\n            System.out.println(n);\n    }\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String string = in.next();\n        if (prime_length(string))\n            System.out.println(string);\n    }\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == '0')\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        if (prime_length(n + \"\"))\n            System.out.println(n);\n    }\n}\n}\n"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n == 10)\n        return 10;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 1;\n    else if (n == 3)\n        return 2;\n    else if (n == 4)\n        return 3;\n    else if (n == 5)\n        return 4;\n    else if (n == 6)\n        return 5;\n    else if (n == 7)\n        return 6;\n    else if (n == 8)\n        return 7;\n    else if (n == 9)\n        return 8;\n    else if (n == 10)\n        return 9;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 2;\n    else if (n == 4)\n        return 3;\n    else if (n == 5)\n        return 3;\n    else if (n == 6)\n        return 4;\n    else if (n == 7)\n        return 4;\n    else if (n == 8)\n        return 5;\n    else if (n == 9)\n        return 5;\n    else if (n == 10)\n        return 6;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 2;\n    else if (n == 4)\n        return 3;\n    else if (n == 5)\n        return 4;\n    else if (n == 6)\n        return 5;\n    else if (n == 7)\n        return 6;\n    else if (n == 8)\n        return 7;\n    else if (n == 9)\n        return 8;\n    else if (n == 10)\n        return 9;\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n == 10)\n        return 10;\n\n    ",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else\n        return starts_one_ends(n - 1)",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return starts_one_ends(n -",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n}\n\npublic static",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 3;\n    else if (n == 4)\n        return 4;\n    else if (n == 5)\n        return 5;\n    else if (n == 6)\n        return 6;\n    else if (n == 7)\n        return 7;\n    else if (n == 8)\n        return 8;\n    else if (n == 9)\n        return 9;\n    else if (n >= 10)\n        return 10;\n    "
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Character.getNumericValue(((N + \"\").charAt(i)));\n    }\n    return String.valueOf(sum);\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Character.getNumericValue(((N + \"\").charAt(i)));\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Character.getNumericValue(((N + \"\").charAt(i)));\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Character.getNumericValue(((N + \"\").charAt(i)));\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    for (int i = 0; i < T; i++) {\n        int N = in.nextInt();\n        System.out.println(solve(N));\n    }\n}\n}"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2!= 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 1; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for (int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 == 0) {\n            "
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result.trim();\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n        result += \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result.substring(0, result.length() - 1);\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n        result += \" \";\n    }\n    return result.trim();\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}\n\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n        result += \" \";\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        for (char c : chars) {\n            sb.append(c);\n        }\n        result += sb.toString();\n    }\n    return result;\n}\n}\n"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      result.add(new Tuple(lst.get(i).get(x), i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x)!= null) {\n        result.add(new Tuple(lst.get(i).get(x), i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Tuple> get_column(ArrayList<ArrayList<Integer>> lst, int y) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        if (lst.get(i).get(x)!= null) {\n            result.add(new Tuple(lst.get(i).get(x), i));\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x, int y) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x)!= null) {\n        result.add(new Tuple(lst.get(i).get(x), i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x, int y) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x)!= null) {\n        result.add(new Tuple(lst.get(i).get(x), i));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x)!= null) {\n        result.add(new Tuple(lst.get(i).get(x), i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Tuple> get_column(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        if (lst.get(i).get(x)!= null) {\n            result.add(new Tuple(lst.get(i).get(x), i));\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        if (lst.get(i).get(x)!= null) {\n            result.add(new Tuple(lst.get(i).get(x), i));\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<ArrayList<Integer>> lst = new ArrayList<ArrayList<Integer>>();\n    for (int i = 0; i < n; i",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        if (lst.get(i).get(x)!= null) {\n            result.add(new Tuple(lst.get(i).get(x), i));\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x)!= null) {\n        result.add(new Tuple(lst.get(i).get(x), i));\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return sort_array(array);\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n\npublic static void main(String[] args) {\n    int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}\n\npublic static void main(String[] args) {\n    int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n\npublic static void main(String[] args) {\n    int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder sb = new",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder sb = new",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0' + 52));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        }else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0' + 52));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    ",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }\n        else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }\n        else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        }\n        else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    ",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(d.indexOf(c)));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n    System.out.println",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n    System.out.println",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        } else if ('0' <= c && c <= '9'){\n            sb.append(d.charAt(c - '0' + 52));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n    System"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_largest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int max = lst[",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_largest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static void main(String[] args) {\n        int",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_largest(int[] lst) {",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static void main(String[] args) {\n        Integer",
        "public static Integer next_smallest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }\n\n    public static Integer next_largest(int[] lst) {\n        if (lst.length == 0) {\n            return null;\n        }\n        int min = lst["
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\n\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\n\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result =",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n  \n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n  \n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n  \n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\"",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?\");\n    int",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.\");\n    int result = 0",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n  public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }\n\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\n\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}\n\npublic static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?\");\n    int result ="
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_double(double x, double y, double z)",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_int(double x, double y, double z, double w) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0;\n    }\n\n    public static boolean any_int(double x, double y, double z, double w, double u) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0 ||",
        "public static boolean any_int(double x, double y, double z) {\n\t\treturn x!= 0.0 || y!= 0.0 || z!= 0.0;\n\t}\n\n\tpublic static boolean any_int(double x, double y, double z, double w) {\n\t\treturn x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0;\n\t}\n\n\tpublic static boolean any_int(double x, double y, double z, double w, double u) {\n\t\treturn x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0 ||",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_int(double x, double y, double z, double w) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0;\n    }\n\n    public static boolean any_int(double x, double y, double z, double w, double a) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0 || w!= 0.0 ||",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_double(double x, double y, double z)",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_int(float x, float y, float z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_int(int x, int y, int z) {\n        return x!= 0 || y!= 0 || z!= 0;\n    }\n\n    public static boolean any_int(long x, long y, long z) {\n        return x!=",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_short(short x, short y, short z)",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_byte(byte x, byte y, byte z)",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_short(short x, short y, short z)",
        "public static boolean any_int(double x, double y, double z) {\n        return x!= 0.0 || y!= 0.0 || z!= 0.0;\n    }\n\n    public static boolean any_float(float x, float y, float z) {\n        return x!= 0.0f || y!= 0.0f || z!= 0.0f;\n    }\n\n    public static boolean any_long(long x, long y, long z) {\n        return x!= 0L || y!= 0L || z!= 0L;\n    }\n\n    public static boolean any_byte(byte x, byte y, byte z)"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isLowerCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n      char c = message.charAt(i);\n      if (Character.isUpperCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        } else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        sb.append(Character.toUpperCase(c));\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {",
      "function range": "22,5-35,5",
      "output": [
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result = result * 10 + (c - '0');\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n}\n"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else {\n                state =",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n        }\n        return",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else {\n                state =",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else\n                state = \"",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else {\n                state ="
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n\npublic static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n\npublic static List<Integer> count_up",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (isPrime(i)){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n\npublic static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i <",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n}"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static int divide(int a, int b) {\n        return a / b;\n    }\n\n    public static long divide(long a, long b) {\n        return a / b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return a * b * c;\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return a * b * c * d;\n    }\n\n    public static int multiply(int a, int b, int c, int d, int e) {\n        return a * b * c * d * e;\n    }\n\n    public static int multiply(int a, int b, int c,",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static float divide(float a, float b) {\n        return a / b;\n    }\n\n    public static double divide(double a, double b) {\n        return a / b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return multiply(multiply(a, b), c);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return multiply(multiply(a, b, c), d);\n    }\n\n    public static int multiply(int a, int b, int c, int d, int e) {\n        return multiply(multiply(a, b, c, d), e);\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static double divide(double a, double b) {\n        return a / b;\n    }\n\n    public static float divide(float a, float b) {\n        return a / b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static int subtract(int a, int b) {\n        return a - b;\n    }\n\n    public static long subtract(long a, long b) {\n        return a - b;\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n}\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static long multiply(long a, long b) {\n        return a * b;\n    }\n\n    public static float multiply(float a, float b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static BigInteger multiply(BigInteger a, BigInteger b) {\n        return a.multiply(b);\n    }\n\n    public static BigDecimal multiply(BigDecimal a, Big",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return a * b * c;\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return a * b * c * d;\n    }\n\n    public static int multiply(int a, int b, int c, int d, int e) {\n        return a * b * c * d * e;\n    }\n}\n",
        "public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return a * b * c;\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return a * b * c * d;\n    }\n\n    public static int multiply(int a, int b, int c, int d, int e) {\n        return a * b * c * d * e;\n    }\n\n    public static long multiply(long a, long b) {\n        "
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_digit(String",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isLowerCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_digit(String s) {\n    ",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\npublic static void main(String[] args) {",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\npublic static int count_digit(String s)",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_digits(",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n}\n"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    while (num > result) {\n        result++;\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num >= 0) {\n        result = (int) Math.floor(num);\n    } else {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else if (num < 0) {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) (num + 0.5);\n    } else {\n        result = (int) (num - 0.5);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else if (num < 0) {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) (num + 0.5);\n    } else if (num < 0) {\n        result = (int) (num - 0.5);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else if (num < 0) {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}\n\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else if (num < 0) {\n        result = (int) Math.ceil(num);\n    } else {\n        result = (int) num;\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.floor(num);\n    } else if (num < 0) {\n        result = (int) Math.ceil(num);\n    } else {\n        result = 0;\n    }\n    return result;\n}\n}\n"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 1; i <= n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList<Integer> pile = new ArrayList",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList<Integer> pile = new ArrayList",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n)",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList<Integer> pile = new",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t\tpile.add(i+2);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n)",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static void print_pile(ArrayList<Integer> pile) {\n\tfor(int i = 0; i < pile.size(); i++) {\n\t\tSystem.out.print(pile.get(i) + \" \");\n\t}\n\tSystem.out.println();\n}\n\npublic static void main(String[] args) {\n\tArrayList<Integer> pile = make_a_pile(10);\n\tprint_pile(pile",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static void print_pile(ArrayList<Integer> pile) {\n\tfor(int i = 0; i < pile.size(); i++) {\n\t\tSystem.out.print(pile.get(i) + \" \");\n\t}\n\tSystem.out.println();\n}\n\npublic static void main(String[] args) {\n\tArrayList<Integer> pile = make_a_pile(5);\n\tprint_pile(pile",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static void print_pile(ArrayList<Integer> pile) {\n\tfor(int i = 0; i < pile.size(); i++) {\n\t\tSystem.out.print(pile.get(i)+\" \");\n\t}\n\tSystem.out.println();\n}\n\npublic static void main(String[] args) {\n\tArrayList<Integer> pile = make_a_pile(10);\n\tprint_pile(pile);",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static void print_pile(ArrayList<Integer> pile) {\n\tfor(int i = 0; i < pile.size(); i++) {\n\t\tSystem.out.print(pile.get(i) + \" \");\n\t}\n\tSystem.out.println();\n}\n\npublic static void main(String[] args) {\n\tArrayList<Integer> pile = make_a_pile(3);\n\tprint_pile(pile",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i+1);\n\t}\n\treturn pile;\n}\n\npublic static void print_pile(ArrayList<Integer> pile) {\n\tfor(int i = 0; i < pile.size(); i++) {\n\t\tSystem.out.print(pile.get(i) + \" \");\n\t}\n\tSystem.out.println(\"\");\n}\n\npublic static void main(String[] args) {\n\tArrayList<Integer> pile = make_a_pile(10);\n\tprint_pile(p"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\npublic static ArrayList<String> words_strings2(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\npublic static ArrayList<String> words_strings2(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetterOrDigit",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString[] words = s.split(\" \");\n\tfor (int i = 0; i < words.length; i++) {\n\t    result.add(words[i]);\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString[] words = s.split(\" \");\n\tfor (int i = 0; i < words.length; i++) {\n\t    result.add(words[i]);\n\t}\n\treturn result;\n    }\n\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString[] words = s.split(\" \");\n\tfor (String word : words) {\n\t    result.add(word);\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tString[] words = s.split(\" \");\n\tfor (int i = 0; i < words.length; i++) {\n\t\tresult.add(words[i]);\n\t}\n\treturn result;\n}\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\npublic static ArrayList<String> words_strings2(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\npublic static ArrayList<String> words_strings2(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (!Character.isLetter(s."
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x <= y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x > y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        int[][] matrix = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                matrix[",
        "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x == y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x > y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static",
        "public static int choose_num(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n}\n"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else if(rem > 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int m = scanner.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    System.out.println(rounded_avg(n, m));\n}\n}"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    for(int i =",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    for(int i =",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    x.add(1);\n    x.add(2);\n    x.add(3);\n    x.add(4",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    x.add(1);\n    x.add(2);\n    x.add(3);\n    x.add(4",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    x.add(1);\n    x.add(2);\n    x.add(3);\n    x.add(",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> x = new ArrayList<Integer>();\n    x.add(1);\n    x.add(2);\n    x.add(3);\n    x.add("
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    Collections.reverse(result);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    Collections.sort(result);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      } else {\n        result.add(String.valueOf(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    Collections.sort(result);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> a = new ArrayList<>();\n    a.add(1);\n    a.add(2);\n    a.add(3);\n    a.add(4);\n    a.add(5);\n    a.add(6);\n    a.add(7);\n    a.add(8);\n    a.add(9);\n    a."
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) {\n                x += j;\n            }\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    System.out.println(factorial(10));\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(5);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(factorial(n));\n}\n"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<Integer>();\n    even_odd_palindrome.add(even_palindrome_count);\n    even_odd_palindrome.add(odd_palindrome_count);\n    return even_odd_palind",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> even_odd_palindrome = new ArrayList<Integer>();\n    even_odd_palindrome.add(even_palindrome_count);\n    even_odd_palindrome.add(odd_palindrome_count);\n    return even_odd_pal",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            }\n            else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    int reversed",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    if(",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean isPalindrome(int n) {\n    int reversed = 0",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    int reverse",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    String s",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    String str",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    return n"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num!= 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num!= 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        boolean pos = num > 0;\n        if(neg || pos) {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            count += num % 10;\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num!= 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<>();\n    for(int i = 0; i < n;",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num!= 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            if(num % 10 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        for(int i = 0; i < num; i++) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    ",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            count += num % 10;\n            num /= 10;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i + 1) - sorted_arr.get(i) == 1) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.set(i + 1, sorted_arr.get(i) - 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.remove(i + 1);\n        sorted_arr.add(i, sorted_arr.get(i) + sorted_arr.get(i + 1));\n        sorted_arr.remove(i + 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i + 1) - sorted_arr.get(i) == 1) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.set(i + 1, sorted_arr.get(i + 1) - 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i + 1) - sorted_arr.get(i) == 1) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.set(i + 1, sorted_arr.get(i) - 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i + 1) - sorted_arr.get(i) == 1) {\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i + 1, sorted_arr.get(i));\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.set(i + 1, sorted_arr.get(i) - 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) + 1 == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.remove(i + 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) + 1 == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.remove(i + 1);\n        return move_one_ball(sorted_arr);\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) + 1 == sorted_arr.get(i + 1)) {\n        sorted_arr.set(i, sorted_arr.get(i) + 1);\n        sorted_arr.set(i + 1, sorted_arr.get(i) - 1);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr.remove(i + 1);\n        sorted_arr.add(i, sorted_arr.get(i) + sorted_arr.get(i + 1));\n        sorted_arr.remove(i + 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 0) {\n            even += lst1.get(i);\n        } else {\n            odd += lst1.get(i);\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 0) {\n            even += lst2.get(i);\n        } else {",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 1) {\n            odd--;\n        } else {\n            even--;\n        }\n    }\n    if (odd == 0 && even == 0)",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n      if (lst1.get(i) % 2 == 1) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n      if (lst2.get(i) % 2 == 1) {\n        odd--;\n      } else {\n        even--;\n      }\n    }\n    if (odd == 0 && even == 0)",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 1) {\n            odd--;\n        } else {\n            even--;\n        }\n    }\n    if (odd > 0) {\n        return",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n      if (lst1.get(i) % 2 == 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n      if (lst2.get(i) % 2 == 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    if (odd > even) {\n      return \"O",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    if (odd > even) {\n        return \"O",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n      if (lst1.get(i) % 2 == 1) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n      if (lst2.get(i) % 2 == 1) {\n        odd--;\n      } else {\n        even--;\n      }\n    }\n    if (odd > 0) {\n      return",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 1) {\n            odd--;\n        } else {\n            even--;\n        }\n    }\n    if (odd < 0) {\n        odd",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    if (odd > even) {\n        return \"O",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1.get(i) % 2 == 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2.get(i) % 2 == 1) {\n            odd--;\n        } else {\n            even--;\n        }\n    }\n    if (odd < 0) {\n        return"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(res.containsKey(c)) {\n            res.put(c, res.get(c) + 1);\n        } else {\n            res.put(c, 1);\n        }\n    }\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(res.containsKey(c)) {\n            res.put(c, res.get(c) + count_letter[c - 'a']);\n        } else {\n            res.put(c, count_letter[c - '",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.put((char)('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) most_count = count_letter[i];\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put((char)('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            res.put((char)('a' + i), count_letter[i]);\n            most_count = count_letter[i];\n        }\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a'] / most_count);\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(res.containsKey(c)) {\n            res.put(c, res.get(c) + count_letter[c - 'a']);\n        }\n        else {\n            res.put(c, count_letter[c",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']/most_count);\n    }\n    return res;\n}\n}\n"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String s = in.next();\n    String c = in.next();",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> ret = new ArrayList<Object>();\n    ret.add(new_s);\n    return ret;\n}\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String s = in.next",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> ret = new ArrayList<Object>();\n    ret.add(new_s);\n    return ret;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        }\n        else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String s = in.nextLine();\n    String c = in.next",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        }\n        else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System."
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            ",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            ",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) n++;\n        }\n        if(n % 2 == 1) result.add(s);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<String> lst = new ArrayList<>();\n    for(int i = 0; i < n; i++) {\n        lst.add("
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < min_sum) {\n            min_sum = s;\n        }\n    }\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      if(s > max_sum) {\n        max_sum = s;\n      }\n    }\n    return max_sum;\n  }\n}\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < 0) {\n            s = 0;\n        }\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }\n}\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        min_sum = Math.min(min_sum, s);\n    }\n    return min_sum;\n}\n\npublic static void main(String[] args) {",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < 0) {\n            s = 0;\n        }\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n}\n\npublic static void main(String[] args) {",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < 0) {\n            s = 0;\n        }\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > 0) {\n            s = 0;\n"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                return result;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity >= bucket_capacity) {\n                result = Math.max(result, row_capacity);\n                row_capacity = 0;\n            }\n        }\n        if(row_capacity > 0) {\n            result = Math.max(result, row_capacity);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                return result;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n\npublic static int max_fill(int[][] grid) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity =",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity >= bucket_capacity) {\n                result = Math.max(result, row_capacity);\n                row_capacity = 0;\n            }\n        }\n        if(row_capacity > 0) {\n            result = Math.max(result, row_capacity);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int[][",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > row_capacity) {\n                row_capacity = grid[i][j];\n            }\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n\npublic static int max_fill(int[][] grid) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > row_capacity) {\n                row_capacity = grid[i][j];\n            }\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity >= bucket_capacity) {\n                result = Math.max(result, row_capacity);\n                row_capacity = 0;\n            }\n        }\n        if(row_capacity > 0) {\n            result = Math.max(result, row_capacity);\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                return result;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[][] grid = new int[n"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {",
      "function range": "31,10-42,10",
      "output": [
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1 - o2;\n   } else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else if(num_ones_o1 > num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return 0;\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}\n\n}\n"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isUpperCase(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(is_consonant(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static boolean is_consonant(char c) {\n    if(c == 'a' || c == 'e' || c == 'i' || c",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    String",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(is_consonant(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static boolean is_consonant(char c) {\n    switch(c) {\n        case 'a':\n        case 'e':\n        case '",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    String",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(is_consonant(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static boolean is_consonant(char c) {\n    switch(c) {\n        case 'a':\n        case 'e':\n        case '",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) return word.substring(i",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.sub",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) return word.substring(0",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) return word.substring(i",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i)) && consonants.contains(",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.sub",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) return word.substring(0",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i)) && consonants."
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - i - 1));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - 1 - i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - 1));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7);\n    arr.add(",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - i - 1));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7);\n    arr.add(8",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - 1 - i));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(arr.size() - 1));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7);\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    System.out.println(maximum_k(arr,"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> lst = new ArrayList<Integer>();\n    lst.add(1);\n    lst.add(2);\n    lst.add(3);\n    lst.add(4);\n    lst.add(5);\n    lst.add(6);\n    lst.add(7);\n    lst.add(8);\n    lst.add",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution3(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(lst.size() - i - 1);\n    }\n    return result;\n}\n\npublic static int solution3(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i <",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result *= lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution3(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++)",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result *= lst.get(i);\n    }\n    return result;\n}\n\npublic static int solution3(ArrayList<Integer> lst) {\n    int result = 1;\n    for(int i = 0; i < lst.size(); i++)",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      for(int j = i + 1; j < lst.size(); j++) {\n        if(lst.get(i) > lst.get(j)) {\n          result++;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int k = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    int result = add_elements(arr, k);\n    ",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int k = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    System.out.println(add_elements(arr, k",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.add(7);\n    arr.add(8);\n    arr.add(9);\n    arr.add(10);",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int k = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    int result = add_elements(arr, k);\n    System",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    int k = in.nextInt();\n    int result = add_elements(arr, k);\n    ",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    int k = in.nextInt();\n    System.out.println(add_elements(arr, k",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int k = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<>();\n    for(int i = 0; i < n; i++) {\n        arr.add(in.nextInt());\n    }\n    System.out.println(add_elements(arr, k));",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    for(int i = k; i < arr.size(); i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int k = in.nextInt();\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++)",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    for(int i = k; i < arr.size(); i++) {\n        result += arr.get(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        }",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n!= 1) {\n        result.add(n);\n        if(n % 2 == 0) {\n            n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if((n % 2) == 0) {\n            n = n / 2;\n            result.add(n);\n        } else {\n            n = 3 * n + 1;\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n!= 1) {\n        if((n % 2) == 0) {\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if((n % 2) == 0) {\n            n = n / 2;\n            result.add(n);\n        } else {\n            n = 3 * n + 1;\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            ",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if((n % 2) == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if(n == 1) result.add(1);\n    while(n!= 1) {\n        if(n % 2 ==",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n!= 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        int[] month_check3 = {2};\n        for(int i = 0; i < month_check3.length; i++) {\n            if(month == month_check3[i]) return true;\n        ",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return false;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month_check1[i] == month) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month_check2[i] == month) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check1 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        ",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < day",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {1, 3, 5, 7, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] day_check = {1, 3, 5, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i]) return true;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) return true;\n        }\n        int[] month_check3 = {2};\n        for(int i = 0; i < month_check3.length; i++) {\n            if(month == month_check3[i]) return false;\n        "
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr =='') {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLetter(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isWhitespace(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr =='' || curr == ',') {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr =='' || curr == ',') {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\",\");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n  }\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n\n}\n",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return txt.split(\" \");\n        } else {\n            return new String[]{txt};\n        }\n    }\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String[] words = new String[n];\n    for(int i = 0; i < n; i"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst));\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i+1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst));\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst));\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    if(is_sorted(lst)) {\n        System.out",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst)? \""
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" + max + \"]\";\n    }\n\n    public static String union(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" +",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int start1 = interval1[0];\n        int end1 = interval1[1];\n        int start2 = interval2[0];\n        int end2 = interval2[1];\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return null;\n        }\n        int[] result = new int[2];\n        result[0] = start;\n        result[1] = end;\n        return Arrays.toString",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" + max + \"]\";\n    }\n\n    public static String union(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \",\" +",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" + max + \"]\";\n    }\n\n    public static String union(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n\n        return \"[\" + min + \", \" +",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int start1 = interval1[0];\n        int end1 = interval1[1];\n        int start2 = interval2[0];\n        int end2 = interval2[1];\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return \"\";\n        }\n        return Arrays.toString(Arrays.copyOfRange(interval2, start, end + 1));\n    }\n}\n",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int start1 = interval1[0];\n        int end1 = interval1[1];\n        int start2 = interval2[0];\n        int end2 = interval2[1];\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return \"\";\n        }\n        return Arrays.toString(Arrays.copyOfRange(interval2, start, end + 1));\n    }\n\n    public static void main(String",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" + max + \"]\";\n    }\n}\n",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int start1 = interval1[0];\n        int end1 = interval1[1];\n        int start2 = interval2[0];\n        int end2 = interval2[1];\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return \"\";\n        } else {\n            return Arrays.toString(Arrays.copyOfRange(interval2, start, end + 1));\n        }\n    }\n\n    public",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int start1 = interval1[0];\n        int end1 = interval1[1];\n        int start2 = interval2[0];\n        int end2 = interval2[1];\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return \"\";\n        } else {\n            return Arrays.toString(Arrays.copyOfRange(interval1, start, end + 1));\n        }\n    }\n\n    public",
        "public static String intersection(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \", \" + max + \"]\";\n    }\n\n    public static String union(int[] interval1, int[] interval2) {\n        int min = Math.min(interval1[0], interval2[0]);\n        int max = Math.max(interval1[1], interval2[1]);\n        return \"[\" + min + \"..\""
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int arr_i = 0; arr_i < n; arr_i++){\n        arr[arr_i] = in.nextInt();\n    }\n    int prod = prod_signs(arr);\n    System.out.println(prod",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int arr_i = 0; arr_i < n; arr_i++){\n        arr[arr_i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    int prod = prod_signs(arr);\n    System.out.println(prod);\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod = prod * arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(prod_signs(arr));\n}\n}\n"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    int val",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return d",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\nprivate static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return 1",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\nprivate static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    int val",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\nprivate static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return d",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return Math",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return 1",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\nprivate static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    return Math",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j]!= 1) {\n        return k;\n    }\n    grid[i][j] = 0;\n    int val",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, dfs(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static int dfs(int[][] grid, int i, int j, int k) {\n    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {\n        return k;\n    }\n    grid[i][j] = 0;\n    int min"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i < n + 1; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = 3 * sequence[i - 1] + 2 * sequence[i - 2];\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 0; i < sequence.length; i++) {\n        System.out.print(sequence[i] + \" \");\n    }",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 2;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 0; i < sequence.length; i++) {\n        System.out.println(sequence[i]);\n    }\n}\n}"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 1) {\n        odd_count++;\n      }\n      n /= 2;\n      product *= 2;\n    }\n    return product + odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 1) {\n        odd_count++;\n      }\n      n /= 2;\n      product *= 2;\n    }\n    return product + odd_count;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(digits(1));\n    System.out.println(digits(2));\n    System.out.println(digits(3));\n    System.out.println(digits(4));\n    System.out.",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            odd_count++;\n        }\n        n /= 2;\n        product *= 2;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(digits(n));\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 1) {\n        odd_count++;\n      }\n      n = n / 2;\n      product *= 2;\n    }\n    return product + odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            odd_count++;\n        }\n        n /= 2;\n        product *= 2;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(digits(n));\n}\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            odd_count++;\n        }\n        n /= 2;\n        product *= 2;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1)",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            odd_count++;\n        }\n        n /= 2;\n        product *= 2;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        int n = in.nextInt();\n        System.out.",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            odd_count++;\n        }\n        n /= 2;\n        product *= 2;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        System.out.println(dig",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      int digit = n % 10;\n      n = n / 10;\n      if (digit % 2 == 1) {\n        odd_count++;\n      }\n      product *= digit;\n    }\n    return product + odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while (n > 0) {\n      if (n % 2 == 1) {\n        odd_count++;\n      }\n      n /= 2;\n      product *= 2;\n    }\n    return product * (odd_count + 1);\n  }\n}\n"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) return true;\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) return true;\n    }\n    return false;\n}\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) return false;\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    return opening_brackets.size() > 0 && opening_brackets.size() == closing_brackets.size();\n}\n\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(closing_brackets.get",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) return false;\n    for(int i = 0; i",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = opening_brackets.get(i) + 1; j < closing_brackets.get(i); j++) {\n            if(brackets.charAt(j) == '[') opening_brackets.add(j);\n            else closing_brackets.add(j);\n        }\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = closing_brackets"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_squared_nums(int[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_squared_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }\n\n",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(int[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_squared_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_squared_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }\n",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_nums(long[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum;\n    }\n\n    public static long sum_nums(",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n        return sum;\n    }\n\n    public static long sum_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += (long) lst[i];\n        }\n        return sum;\n    }\n\n    public static long sum_",
        "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n\n    public static long sum_squared_nums(int[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i];\n        }\n        return sum * sum;\n    }\n}\n"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    return Character.isLetter(last.charAt(0));\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    return Character.isDigit(last.charAt",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (Character.isLetter(last.charAt(0))) {\n      return true;\n    }\n    return false;\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    for (int i = 0; i < last.length(); i++) {\n      if (!Character.isLetter(last.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    return Character.isLetter(last.charAt(0));\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    return Character.isLetter(last.charAt(",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    for (int i = 0; i < last.length(); i++) {\n      if (Character.isLetter(last.charAt(i))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    return Character.isLetter(last.charAt(0));\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    for (int i = 0; i < last.length(); i++) {\n      if (!Character.isLetter(last.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    for (int i = 0; i < last.length(); i++) {\n      if (!Character.isLetter(last.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    for (int i = 0; i < last.length(); i++) {\n      if (Character.isLetter(last.charAt(i))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if"
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] arr = new int[n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] arr = new int[n];\n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static int can_arrange2(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] + arr[j] == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] arr = new",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] < arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] + arr[j] == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i",
        "public static int can_arrange(int[] arr) {\n        int count = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n        return new int[]{min, max};\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{min, max};\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{min, max};\n    }\n}\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scan",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n        return new int[]{min, max};\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scan",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scan",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n\n    public static int[] largest_smallest_integers(int[] lst, int",
        "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n\n    public static void main(String[] args) {\n        int[] lst = new"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    return Double.compare(temp_a, temp_b);\n}\n\npublic static Object compare_two(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer)a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer)b).doubleValue();\n    }\n    if(a instanceof Long) {\n        temp_a = ((Long)a).doubleValue();\n    }\n    if(b instanceof Long) {\n        temp_b = ((Long)b).doubleValue();\n    }\n    if(a instanceof Float) {\n        temp_a = ((Float)a",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer)a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer)b).doubleValue();\n    }\n    if(a instanceof Float) {\n        temp_a = ((Float)a).doubleValue();\n    }\n    if(b instanceof Float) {\n        temp_b = ((Float)b).doubleValue();\n    }\n    if(a instanceof Double) {\n        temp_a = ((Double)a",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    return Double.compare(temp_a, temp_b);\n}\n}\n",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer)a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer)b).doubleValue();\n    }\n    if(a instanceof Double) {\n        temp_a = ((Double)a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double)b).doubleValue();\n    }\n    if(a instanceof Float) {\n        temp_a = ((Float)a",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) {\n        temp_a = (Double) a;\n    }\n    if(b instanceof Double) {\n        temp_b = (Double) b;\n    }\n    if(a instanceof Float) {\n        temp_a = (Float) a;\n    }\n    if(b instanceof Float) {\n        temp_b = (Float) b;\n    }\n    if(a instanceof Integer) {\n        temp_a = (Integer) a;\n    }\n    if(b instanceof Integer",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) {\n        temp_a = (Double) a;\n    }\n    if(b instanceof Double) {\n        temp_b = (Double) b;\n    }\n    if(a instanceof Integer) {\n        temp_a = (Integer) a;\n    }\n    if(b instanceof Integer) {\n        temp_b = (Integer) b;\n    }\n    if(a instanceof Long) {\n        temp_a = (Long) a;\n    }\n    if(b instanceof Long",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) {\n        temp_a = (Double) a;\n    }\n    if(b instanceof Double) {\n        temp_b = (Double) b;\n    }\n    if(a instanceof Integer) {\n        temp_a = (Integer) a;\n    }\n    if(b instanceof Integer) {\n        temp_b = (Integer) b;\n    }\n    if(a instanceof Float) {\n        temp_a = (Float) a;\n    }\n    if(b instanceof Float",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) {\n        temp_a = (Double) a;\n    }\n    if(b instanceof Double) {\n        temp_b = (Double) b;\n    }\n    if(a instanceof Float) {\n        temp_a = (Float) a;\n    }\n    if(b instanceof Float) {\n        temp_b = (Float) b;\n    }\n    if(a instanceof Long) {\n        temp_a = (Long) a;\n    }\n    if(b instanceof Long",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    if(a instanceof Double) {\n        temp_a = (Double)a;\n    }\n    if(b instanceof Double) {\n        temp_b = (Double)b;\n    }\n    if(a instanceof Integer) {\n        temp_a = (Integer)a;\n    }\n    if(b instanceof Integer) {\n        temp_b = (Integer)b;\n    }\n    if(a instanceof Float) {\n        temp_a = (Float)a;\n    }\n    if(b instanceof Float"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2!= 0) {\n            return true;\n        ",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2!= 0;\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2!= 0) {\n            ",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 1) {\n            return true;\n        ",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2!= 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(is",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        if (sum % 2 == 1) {\n            ",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2!= 0;\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2) == 0;\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2)!= 0;\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2!= 0);\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2 == 0);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return (sum % 2!= 0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n      special_fact += fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (int i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        long n = in.nextLong();\n        System.out.println(special_factorial(n));\n    }\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        long n = in.nextLong();\n        System.out.println(special_factorial(n));\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(special_factorial(n));\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        int n = in.nextInt();\n        System.out.println(special_factorial(n));\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long n = in.nextLong();\n    System.out.println(special_factorial(n));\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(special_factorial(n));\n  }\n}\n"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n\npublic static void main(String",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}\n\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++) {\n        if (lst[0].charAt(i) < '0' || lst[0].charAt(i) > '9')\n            return \"No\";\n    }\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++) {\n        if (! Character.isLetterOrDigit(lst[0].charAt(i)))\n            return \"No\";\n    }\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++) {\n        if (lst[0].charAt(i) < 'A' || lst[0].charAt(i) > 'Z')\n            return \"No\";\n    }\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++) {\n        if (lst[0].charAt(i) < '0' || lst[0].charAt(i) > '9')\n            return \"No\";\n    }\n    return \"Yes\";\n}\n\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++)\n        if (lst[0].charAt(i) < '0' || lst[0].charAt(i) > '9')\n            return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    for (int i = 0; i < lst[0].length(); i++) {\n        if (lst[0].charAt(i) =='')\n            return \"No\";\n    }\n    return \"Yes\";\n}\n}\n"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += (lst[i] * lst[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1){\n        lst[i] = in.nextInt();\n    }\n    System.out.println(sum_squares(lst));\n}\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1){\n        lst[i] = in.nextInt();\n    }\n    int result = sum_squares(lst);\n    System.out.println(result",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += (lst[i] * lst[i]);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1){\n        lst[i] = in.nextInt();\n    }\n    System.out.println(sum_squares(lst));\n}\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += (lst[i] * lst[i]);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1){\n        lst[i] = in.nextInt();\n    }\n    int result = sum_squares(lst);\n    System.out.println(",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(sum_squares(lst));\n}\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += (lst[i] * lst[i]);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(sum_squares(lst));\n}\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        lst[i] = in.nextInt();\n    }\n    int result = sum_squares(lst);\n    System.out.println(",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i += 1){\n        lst[i] = scanner.nextInt();\n    }\n    System.out.println(sum_squares(lst));\n}\n}\n"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i) == word.charAt(0)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            for (int j = i + 1; j < word.length(); j++) {\n                if (word.charAt(i) == word.charAt(j)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 1) {\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i) == word.charAt(0)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            for (int j = i + 1; j < word.length(); j++) {\n                if (word.charAt(i) == word.charAt(j)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 1) {\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i) == word.charAt(0)) {\n                flag = 1;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i) == word.charAt(0)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n            result += \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (word.equals(result.substring(i, i + 1))) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            for (int j = i + 1; j < word.length(); j++) {\n                if (word.charAt(i) == word.charAt(j)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 1) {\n                break;\n            }\n        }\n        if (flag == 0) {\n            result = result + word + \" \";\n        }\n    }\n    return result.trim();\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < word.length(); i++) {\n            for (int j = i + 1; j < word.length(); j++) {\n                if (word.charAt(i) == word.charAt(j)) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 1) {\n                break;\n            }\n        }\n        if (flag == 1) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 0; i < result.length(); i++) {\n            if (result.charAt(i) == word.charAt(0)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word;\n            result += \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator / denom == 1;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    int gcd = gcd(numerator, denom);\n    if (gcd == 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static int gcd(int a, int b) {\n    if (b == 0) {\n      return a;\n    } else {\n      return gcd(b, a % b);\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    int gcd = gcd(numerator, denom);\n    if (gcd == 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    int gcd = gcd(numerator, denom);\n    if (gcd == 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static int gcd(int a, int b) {\n    if (b == 0) {\n      return a;\n    }\n    return gcd(b, a % b);\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      String x = in.next();\n      String n = in.next();\n      if (simplify(x, n)) {\n        System.out.println(\"Yes\");\n      } else {\n        ",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator == denom) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      String x = in.next();\n      String n = in.next();\n      if (simplify(x, n)) {\n        System.out.println(\"YES\");\n      } else {\n        "
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size(); i += 1){\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size(); i += 1){\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < result.length; i += 1){\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1){",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n    }\n    for (int i = 0; i < nums.length; i += 1){\n        digits.add(digits_number.get(nums[i]).get(0));\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < result.length; i += 1){\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n    }\n    for (int i = 0; i < digits_number.size(); i += 1){\n        digits.add(digits_number.get(i).get(0));\n    }",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1){",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size(); i += 1) {",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit = digit * 10 + (n + \"\").toCharArray()[j] - '0';\n        }\n        if (!digits_number.containsKey(digit)){\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(neg * i);\n        digits.add(digit);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size(); i += 1) {"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.charAt(i) + \"\"))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = number_as_string.length() - 1; i >= 0; i--) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.charAt(i) + \"\"))) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n}\n"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result += A[i - 1] * A[j - 1] * A[k - 1];\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result = Math.max(result, A[i - 1] + A[j - 1] + A[k - 1]);\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result += A[i - 1] * A[j - 1] * A[k - 1];\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k <= n; k += 1)\n                result = Math.max(result, A[i - 1] + A[j - 1] + A[k - 1]);\n    return result;\n  }\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result = Math.max(result, A[i - 1] + A[j - 1] + A[k - 1]);\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result += A[i - 1] * A[j - 1] * A[k - 1];\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result += A[i - 1] * A[j - 1] * A[k - 1];\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result = Math.max(result, A[i - 1] + A[j - 1] + A[k - 1]);\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result = Math.max(result, A[i - 1] + A[j - 1] + A[k - 1]);\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(get_max_",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i + 1; j <= n; j += 1) {\n            for (int k = j + 1; k <= n; k += 1) {\n                result += A[i - 1] * A[j - 1] * A[k - 1];\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++)\n        result.add(planet_names.get(i));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++)\n        result.add(planet_names.get(i));\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index + 1; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    result.add(planet_names.get(planet1_index + 1));\n    result.add(planet_names.get(planet2_index + 1));\n    result.add(planet_names.get(planet1_index + 2));\n    result.add(planet_names.get(planet2_index + 2));\n    result.add(planet_names.get(planet1_index + 3",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    result.add(planet_names.get(planet1_index + 1));\n    result.add(planet_names.get(planet2_index + 1));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    result.add(planet_names.get(planet1_index + 1));\n    result.add(planet_names.get(planet2_index + 1));\n    result.add(planet_names.get(planet1_index + 2));\n    result.add(planet_names.get(planet2_index + 2));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index > planet2_index) {\n        int temp = planet1_index;\n        planet1_index = planet2_index;\n        planet2_index = temp;\n    }\n    for (int i = planet1_index; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n}\n"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.length() - b.length();\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.length() - b.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                return a.length() - b.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o2.length() - o1.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o2.length() - o1.length();\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.parseInt(o1) - Integer.parseInt(o2);\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.parseInt(o1) - Integer.parseInt(o2);\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.parseInt(o1) - Integer.parseInt(o2);\n            }\n        });\n    return result;\n}\n}\n"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static int x_or_y(int n, int x, int y, int z) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0 || z % i == 0) {\n        return 0;\n      }\n    }\n    return 1;",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static int x",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int x = scanner.nextInt();\n    int y = scanner.nextInt();\n    System.out.println(x_or_y(n, x, y));\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int x = in.nextInt();\n    int y = in.nextInt();\n    System.out.println(x_or_y(n, x, y));\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static void main",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (x % i == 0 || y % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int x = in.nextInt();\n    int y = in.nextInt();\n    System.out.println(x_or_y(n, x, y));\n}\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 || y % i == 0) {\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int x = scanner.nextInt();\n    int y = scanner.nextInt();\n    int result = x_or_y(n, x, y);\n    System.out.println(result);\n  }\n}\n"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        } else {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result = result + d_int;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\npublic static int double_the_difference2(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n\npublic static int double_the_difference2(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = game[i] - guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    for (",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    for (",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    for ("
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            }\n            if (Character.isLowerCase(c)) {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n        if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n        if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            } else {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n        if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            } else if (c =='') {\n                CAP++;",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            } else if (c =='') {\n                CAP++;",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= '",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            }\n            if (c >= 'A' && c <= '",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n        if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            } else if (c == ':') {\n                CAP++;",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                CAP++;\n            } else if (c >= '0' && c <= '9') {\n                CAP++;\n            } else if (c == '_') {\n                CAP++;\n            } else if (c == '-') {\n                CAP++;\n            } else if (c == '.') {\n                CAP++;\n            } else {\n                SM++;\n            }\n        }\n"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n        return false;\n    }\n    for (int i = 0; i < l; i++) {\n        if (a.charAt(i)!= b.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check2(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (l > a.length()) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n        return false;\n    }\n    for (int i = 0; i < l; i++) {\n        if (a.charAt(i)!= b.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l)\n      return false;\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i))\n        return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) return false;\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) return false;\n    }\n    return true;\n  }\n}\n"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int num = in.nextInt();\n    int[] result = even_odd_count(num);\n    System.out.println(result[0",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int num = in.nextInt();\n    int[] result = even_odd_count(num);\n    System.out.println(result[0"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result = sym[i] + result;\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            result = sym[i] + result;\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            result = result + sym[i];\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result = sym[i] + result;\n        }\n        i--;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            result = sym[i] + result;\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_mini_roman(9",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_mini_roman(9",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result = sym[i] + result;\n        }\n        i--;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_mini_"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            if (right_angle_triangle(a, b, c))",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            if (right_angle_triangle(a, b, c))",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            System.out.println(right_angle_triangle(a,",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            System.out.println(right_angle_triangle(a,",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();\n        System.out.println(right_angle_triangle(a, b, c));\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();\n        if (right_angle_triangle(a, b, c)) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            if (left_angle_triangle(a, b, c))",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            if (left_angle_triangle(a, b, c))",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            System.out.println((right_angle_triangle(a,",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int c = in.nextInt();\n            if(right_angle_triangle(a, b, c))"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        });\n    return words_list.get(0);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(0);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(0);\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        });\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size()-1);\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size()-1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = need;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] =",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = number;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] =",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = need;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[1];\n        result[0] = number;\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = number;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[1];\n        result[0] = number;\n        return result;\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[1] = need;\n        return result;\n    }\n\n    public static int[] eat(int number, int remaining) {\n        int[] result = new int[2];\n        result[0] = number;\n        result[",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        if (number >= need) {\n            result[0] = number / need;\n            result[1] = number % need;\n        } else {\n            result[0] = remaining;\n            result[1] = number;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n        int need = scanner.nextInt();\n        int remaining = scanner",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        if (number >= need) {\n            result[0] = number / need;\n            result[1] = number % need;\n        } else {\n            result[0] = remaining;\n            result[1] = number;\n        }\n        return result;\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        if (number >= need) {\n            result[0] = number / need;\n            result[1] = number % need;\n        } else {\n            result[0] = remaining;\n            result[1] = number;\n        }\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, number);\n    }\n\n    public static int[] eat(int number) {\n        return eat(number, number);\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        if (number >= need) {\n            result[0] = number / need;\n            result[1] = number % need;\n            return result;\n        } else {\n            result[0] = remaining;\n            result[1] = number;\n            return result;\n        }\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        if (number >= need) {\n            result[0] = number / need;\n            result[1] = number % need;\n            return result;\n        } else {\n            result[0] = remaining;\n            result[1] = number;\n            return result;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n        int need = scanner.nextInt();\n"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n      expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n      expression += operand[i] + \" \";\n    }\n    return (Double) engine.eval(expression);\n  }\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    return (Double) engine.eval(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expr = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expr += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expr += operand[i] + \" \";\n    }\n    return (Double) engine.eval(expr);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    try {\n        return (Double) engine.eval(expression);\n    } catch (ScriptException e) {\n        throw e;\n    }\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    try {\n        return (Double) engine.eval(expression);\n    } catch (ScriptException e) {\n        throw e;\n    }\n}\n\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    Object result = engine.eval(expression);\n    if (result instanceof Number) {\n        return ((Number) result).doubleValue();\n    } else {\n        throw new ScriptException(expression + \" is not a number\");\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \" + operand[i] + \" \";\n    }\n    return (Double) engine.eval(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    try {\n        return (Double) engine.eval(expression);\n    } catch (Exception e) {\n        throw new ScriptException(e);\n    }\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expr = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expr += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expr += operand[i] + \" \";\n    }\n    Object result = engine.eval(expr);\n    if (result instanceof Number) {\n        return ((Number) result).doubleValue();\n    } else {\n        throw new ScriptException(expr + \" is not a number\");\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + \" \";\n    }\n    for (int i = 0; i < operand.length; i++) {\n        expression += operand[i] + \" \";\n    }\n    try {\n        return (Double) engine.eval(expression);\n    } catch (ScriptException e) {\n        throw e;\n    }\n}\n\npublic static void main(String[] args) throws NumberFormatException, Script"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      } else if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg = 1;\n      } else if (c == ')') {\n        flg = 0;\n      } else if (flg == 1) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.reverse().toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg = 1;\n      } else if (c == ')') {\n        flg = 0;\n      } else if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      String s",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        sb.append(Character.toLowerCase(c));\n      } else if (Character.isLowerCase(c)) {\n        sb.append(Character.toUpperCase(c));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n      int n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (c == '(') {\n        flg++;\n      } else if (c == ')') {\n        flg--;\n      }\n      if (flg == 0) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String s = in.next();\n    System.out.println(solve_string(s));\n  }\n}\n"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n      String h = Integer.toHexString(0xFF & messageDigest[i]);\n      while (h.length() < 2)\n        h = \"0\" + h;\n      hexString.append(h);\n    }",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n        String h = Integer.toHexString(0xFF & messageDigest[i]);\n        while (h.length() < 2)\n            h = \"0\" + h;\n        hexString.append(h);\n    }",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    // Create Hex String\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n      String h = Integer.toHexString(0xFF & messageDigest[i]);\n      while (h.length() < 2)\n        h = \"0\" + h;\n      hexString.append",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    // Create Hex String\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n        String h = Integer.toHexString(0xFF & messageDigest[i]);\n        while (h.length() < 2)\n            h = \"0\" + h;\n        hexString.append",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.reset();\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n      String h = Integer.toHexString(0xFF & messageDigest[i]);\n      while (h.length() < 2)\n        h = \"0\" + h;\n      hexString.",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    // Create Hex String\n    StringBuilder hexString = new StringBuilder();\n    for (byte aMessageDigest : messageDigest) {\n      String h = Integer.toHexString(0xFF & aMessageDigest);\n      while (h.length() < 2)\n        h = \"0\" + h;\n      hexString.append(h);\n    }",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.reset();\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n        String h = Integer.toHexString(0xFF & messageDigest[i]);\n        while (h.length() < 2)\n            h = \"0\" + h;\n        hexString.",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    // Create Hex String\n    StringBuilder hexString = new StringBuilder();\n    for (byte aMessageDigest : messageDigest) {\n        String h = Integer.toHexString(0xFF & aMessageDigest);\n        while (h.length() < 2)\n            h = \"0\" + h;\n        hexString.append(h);\n    }",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes(), 0, text.length());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n      String h = Integer.toHexString(0xFF & messageDigest[i]);\n      while (h.length() < 2)\n        h = \"0\" + h;\n      hexString.append",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < messageDigest.length; i++) {\n      String h = Integer.toHexString(0xFF & messageDigest[i]);\n      while (h.length() < 2) h = \"0\" + h;\n      hexString.append(h);\n    }\n    "
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(Integer.toString(i));\n        }\n        return result;\n    }\n\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(String.valueOf(i));\n        }\n        return result;\n    }\n\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int step) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i += step) {\n            result.add(i);\n        }\n        return result;\n    }",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(\"\" + i);\n        }\n        return result;\n    }\n\n    public static",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(Integer.toString(i));\n        }\n        return result;\n    }\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(i + \"\");\n        }\n        return result;\n    }\n\n    public static",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(String.valueOf(i));\n        }\n        return result;\n    }\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            for (int j = c; j <= b; j++) {\n                result.add",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<String> generate_strings(int a, int b) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = a; i <= b; i++) {\n            result.add(\"\" + i);\n        }\n        return result;\n    }\n}\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            for (int j = c; j <= b; j++) {\n                list.add"
      ]
    }
  },
  "model": "codegen-6B-multi",
  "time": 13448
}