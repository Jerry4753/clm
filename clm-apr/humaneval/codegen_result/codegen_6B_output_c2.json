{
  "config": "CODEGEN_COMPLETE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in.",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scanner",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args){\n    List<Double> numbers = new ArrayList<>();\n    numbers.add(1.0);\n    numbers.add(2.0);\n    numbers.add(3.0);\n    numbers.add(4.0);\n    numbers.add(",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<Double>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>(n);\n    for (int i = 0; i < n; i += 1){\n        numbers.add(in",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<Double>();\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scan",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<>(n);\n    for (int i = 0; i < n; i += 1){\n        numbers.add(scan",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1) {\n        numbers.add(in",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    List<Double> numbers = new ArrayList<>();\n    for (int i = 0; i < n; i += 1){\n        double number = scanner.nextDouble"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(short number) {\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(short number) {\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(byte number) {\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double round_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double ceil_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double floor_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double abs_number(double number) {\n// buggy line",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(byte number) {\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double round_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double ceil_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double floor_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n}\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double round_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double floor_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double ceil_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n}\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double round_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double floor_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double ceil_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double abs_number(double number) {\n// buggy line",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n}\n",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double round_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double ceil_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double floor_number(double number) {\n// buggy line:    return number / 1.0;\n        return number;\n    }\n\n    public static double sqrt_number(double number) {\n// buggy"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance < 0){\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return true;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance < 0){\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        if (balance > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double standard_deviation(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double mean_absolute_deviation(double[] numbers) {\n    double sum = 0.;\n    for (double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.length;\n    double deviation_sum = 0.;\n    for (double number : numbers){\n// buggy line:        deviation_sum += (number - mean) *",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double standard_deviation(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double mean_absolute_deviation(double[] numbers) {\n    double sum = 0.;\n    for (double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.length;\n    double deviation_sum = 0.;\n    for (double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    double deviation = Math.sqrt(deviation_sum / numbers.size());\n    return deviation;\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return deviation_sum / numbers.size();\n}\n\npublic static double standard_deviation(List<",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double mean(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    return sum / numbers.size();\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double sum = 0.;\n    for (Double number :",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n\npublic static double variance(List<Double> numbers) {\n    double mean = mean(numbers);\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.size();\n}\n\npublic static double standard_deviation(List<Double> numbers) {\n    "
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < (numbers.size() - 1); i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size(); i += delimeter) {\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n}\n",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i!= 0)\n            result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}\n}\n"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n//                        depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n// buggy line:                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n\npublic static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String p",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            } else if (c == ')'){\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.toLowerCase().contains(substring.toLowerCase())){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.toLowerCase().contains(substring.toLowerCase())){\n            result.add(string);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_regex(List<String> strings, String regex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.matches(regex)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = sum(numbers);\n        result[1] = product(numbers);\n        return result;\n    }\n\n    public static int sum(List<Integer> numbers) {\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static int product(List<Integer> numbers) {\n        int product = 1;\n        for (Integer number : numbers) {\n            product *= number",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] *= numbers.get(i);\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = sum(numbers);\n        result[1] = product(numbers);\n        return result;\n    }\n\n    public static int sum(List<Integer> numbers) {\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static int product(List<Integer> numbers) {\n        int prod = 1;\n        for (Integer number : numbers) {\n            prod *=",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] *= numbers.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n//                result[0] = numbers.get(0);\n//                result[1] = numbers.get(1);\n//                for (int i = 2; i < numbers.size(); i++) {\n//                    result[0] = result[0] + numbers.get(i);\n//                    result[1] = result[1] * numbers.get(i);\n//                }\n//                return result;\n// buggy line:    Integer[] result = new Integer[2];\n//                result[0] = numbers.get(0);\n//                result",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] += result[0] * numbers.get(i);\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] += result[0] * numbers.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer>",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n            result[1] *= numbers.get(i);\n        }\n        return result;\n    }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] *= numbers.get(i);\n        }\n        return result;\n    }\n\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n        Integer[] result = new Integer[2];\n        result[0] = 0;\n        result[1] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            result[0] += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result[1] *= numbers.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new Array"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null) {\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null) {\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n    }\n    result.add(running_max);\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null) {\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n        if (running_min == null) {\n            ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null){\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        running_max = Math.max(running_max, n);\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (running_min == null) {\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null){\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n        if (running_min == null){\n            running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null){\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n    }\n    result.add(running_max);\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null) {\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n    }\n    result.add(running_max);\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n        if (running_min == null) {\n            ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null){\n            running_max = n;\n        } else {\n            running_max = Math.max(running_max, n);\n        }\n    }\n    result.add(running_max);\n    return result;\n}\n\npublic static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n        if (running_min == null){\n            running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n      if (running_max == null) {\n        running_max = n;\n      } else {\n        running_max = Math.max(running_max, n);\n      }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math."
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0, j = str.length() - 1; i < j; i++, j--){\n        if (str.charAt(i)!= str.charAt(j))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    ",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0, j = str.length() - 1; i < j; i++, j--){\n        if (str.charAt(i)!= str.charAt(j)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[]",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - 1 - i)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[]",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[]",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0, j = str.length() - 1; i < j; i++, j--){\n        if (str.charAt(i)!= str.charAt(j))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - 1 - i))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    ",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    ",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix, result.length());\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - i - 1))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[]",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix, result.length());\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - 1 - i))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[]",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    for (int i = 0; i < str.length() / 2; i++){\n        if (str.charAt(i)!= str.charAt(str.length() - 1 - i))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else {\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }else{\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }else if (a.charAt(i) == b.charAt(i)){\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i)!= b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i)!= b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i)!= b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i) == b.charAt(i)){\n            result += \"1\";\n        } else {\n            result += \"X\";\n        }\n    }\n    return result;\n}\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i)!= b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args){\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String a = in.next();\n    String b = in.next();\n    System.out.println(string_xor(a",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        } else if (a.charAt(i)!= b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String a = in.next();\n    String b = in.next();\n    System.out.println(string_xor("
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen-1);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        } else {\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        } else {\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen-1);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen - 1);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return maxlen + \"\";\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen-1);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(strings.size()-1);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(strings.size() - 1);\n}\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }else{\n// buggy line:            maxlen = string.length();\n// buggy line:        }\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }else{\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen-1);\n}\n}"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b =",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        a = b;\n        b = a % b;\n    }\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n        a = b;\n        ",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        a = b;\n        b = a % b;\n        a = b;\n        b = a % b;\n        a = b;\n        b = a % b;\n        a = b;\n        b = a % b;\n        a = b;",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n        b = a % b;",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        b = a % b;\n        a = b;\n    }\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        a = b;\n        b = a % b;\n        a =",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n        b = b % a;",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n        a = a % b;",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n\n        a = b;\n        b = a % b;\n    }\n"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\npublic",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i + 1, i + 2));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i));\n    }\n    return result;\n}\n\npublic static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = string.length() - 1; i >= 0; i -= 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i));\n    }\n    return result;\n}\n\npublic static List<String> all",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i + 1, i + 2));\n    }\n    return result;\n}\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length()-1);\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.trim();\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(10));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    System.out.println(string_sequence(n));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(5));\n}\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(10));\n}\n\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(3));\n}\n}\n"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(c);\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(c);\n    }\n    return distinct.size();\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\nusing namespace std;\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout << \"Test \"",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n        {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tint answer;",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n        {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n        {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toUpperCase(c));\n    }\n    return distinct.size();\n}\n}\n"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){",
      "function range": "8,5-20,5",
      "output": [
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (int i = 0; i < music_string.length(); i++) {\n      String note = music_string.substring(i, i + 1);\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : Arrays.asList(music_string.split(\" \"))) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (int i = 0; i < music_string.length(); i++) {\n      String note = music_string.substring(i, i+1);\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (int i = 0; i < music_string.length(); i++) {\n        String note = music_string.substring(i, i + 1);\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n// buggy line:        if (note_map.containsKey(note)){\n// buggy line:            result.add(note_map.get(note));\n// buggy line:        }\n// buggy line:    }\n    for (String note : music_string.split(\" \")){\n        if (note_map.containsKey(note)){\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (int i = 0; i < music_string.length(); i++) {\n      String note = music_string.substring(i, i + 1);\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n// buggy line:        if (note_map.containsKey(note)){\n// buggy line:            result.add(note_map.get(note));\n// buggy line:        }\n// buggy line:    }\n    for (String note : music_string.split(\" \")){\n        if (note_map.containsKey(note)){\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n// buggy line:        if (note_map.containsKey(note)){\n// buggy line:            result.add(note_map.get(note));\n// buggy line:        }\n// buggy line:    }\n    for (String note : music_string.split(\" \")){\n        if (note_map.containsKey(note)){\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n// buggy line:        if (note_map.containsKey(note)){\n// buggy line:            result.add(note_map.get(note));\n// buggy line:        }\n// buggy line:    }\n    for (String note : music_string.split(\" \")){\n        if (note_map.containsKey(note)){\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}\n}"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i <= string.length() - substring.length(); i += 1) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times += 1;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times += 1;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length(); i += 1) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times += 1;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i <= string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - 1; i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i <= string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}\n"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          if (value_map.containsKey(o2)) {\n            return value_map.get(o1) - value_map.get(o2);\n          } else {\n            return -1;\n          }\n        } else {\n          if (value_map.containsKey(o2)) {\n",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    StringBuilder sb = new StringBuilder",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          if (value_map.containsKey(o2)) {\n            return value_map.get(o1) - value_map.get(o2);\n          } else {\n            return -1;\n          }\n        } else if (value_map.containsKey(o2)) {\n          return 1",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          return value_map.get(o1) - value_map.get(o2);\n        } else if (value_map.containsKey(o2)) {\n          return value_map.get(o2) - value_map.get(o1);\n        } else {\n          return o1.comp",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          return value_map.get(o1) - value_map.get(o2);\n        } else if (value_map.containsKey(o2)) {\n          return value_map.get(o2) - value_map.get(o1);\n        } else {\n          return 0;\n        ",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    String sorted_numbers = \"\";",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.get(o1) < value_map.get(o2)) {\n          return -1;\n        } else if (value_map.get(o1) > value_map.get(o2)) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    return number_array.toString();",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String a, String b) {\n        if (value_map.get(a) > value_map.get(b)) {\n          return 1;\n        } else if (value_map.get(a) < value_map.get(b)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    StringBuilder sb = new StringBuilder();\n    for (String number : number_",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String a, String b) {\n        if (value_map.get(a) > value_map.get(b)) {\n          return 1;\n        } else if (value_map.get(a) < value_map.get(b)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    String sorted_numbers = \"\";\n    for (String number : number_array",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        if (value_map.containsKey(o1)) {\n          if (value_map.containsKey(o2)) {\n            return value_map.get(o1) - value_map.get(o2);\n          } else {\n            return -1;\n          }\n        } else {\n          return 1;\n        }\n      }\n    });\n    String"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        double d = Math.abs(numbers[i] - numbers[j]);\n        if (d < distance){\n            distance = d;\n            result[0] = i;\n            result[1] = j;\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = Math.abs(numbers[i] - numbers[j]);\n        if (d < distance){\n          distance = d;\n          result[0] = i;\n          result[1] = j;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double d = Math.abs(numbers[i] - numbers[j]);\n            if (d < distance){\n                distance = d;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = Math.pow(numbers[i] - numbers[j], 2);\n        if (d < distance){\n          distance = d;\n          result[0] = i;\n          result[1] = j;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double d = Math.pow(numbers[i] - numbers[j], 2);\n            if (d < distance){\n                distance = d;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double current_distance = Math.pow(numbers[i] - numbers[j], 2);\n            if (current_distance < distance){\n                distance = current_distance;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double current_distance = Math.pow(numbers[i] - numbers[j], 2);\n            if (current_distance < distance){\n                distance = current_distance;\n                result[0] = numbers[i];\n                result[1] = numbers[j];\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double current_distance = Math.pow(numbers[i] - numbers[j], 2);\n            if (current_distance < distance){\n                distance = current_distance;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double current_distance = Math.pow(numbers[i] - numbers[j], 2);\n            if (current_distance < distance){\n                distance = current_distance;\n                result[0] = i;\n                result[1] = j;\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double current_distance = Math.pow(numbers[i] - numbers[j], 2);\n            if (current_distance < distance){\n                distance = current_distance;\n                result[0] = numbers[i];\n                result[1] = numbers[j];\n            }\n        }\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] new_numbers = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        new_numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return new_numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] scaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        scaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return scaled;\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] new_numbers = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        new_numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return new_numbers;\n}\n\n}\n"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n// buggy line:        result.add((Long) value);\n      if (value instanceof Long){\n        result.add((Long) value);\n      }\n    }\n    return result;\n  }\n\n  public static",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static List",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n      if (value instanceof String) {\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n      if (value instanceof Long){\n        result.add((Long) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Float> filter_floats(List<Object> values",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n      if (value instanceof Long){\n        result.add((Long) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n      if (value instanceof String) {\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n      if (value instanceof String){\n        result.add((String) value);\n      }\n    }\n    return result;\n  }\n\n  public static void"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n// buggy line:    return string.length() - 1;",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareToIgnoreCase(string2);\n        return string1.compareToIgnoreCase(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int n){\n// buggy line:    return string1.compareTo(string",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareTo(string2);\n        return string1.compareTo(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int n){\n// buggy line:    return string1.compareTo(string2, n);\n//",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strlen(\"\"));\n        System.out.println(strlen(\"a\"));\n        System.out.println(strlen(\"ab\"));\n        System.out.println(strlen(\"abc\"));\n        System.out.println(strlen(\"abcd\"));\n        System.out.println(strlen(\"abcde\"));\n        System.out.println(strlen(\"abcdef\"));\n        System.out.",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareTo(string2);\n        return string1.compareTo(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int n){\n// buggy line:    return string1.compareTo(string2);\n// correct line",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length();\n    }\n}\n",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareToIgnoreCase(string2);\n        return string1.compareToIgnoreCase(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int length){\n// buggy line:    return string1.compareTo(string",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareToIgnoreCase(string2);\n        return string1.compareToIgnoreCase(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int count){\n// buggy line:    return string1.compareTo(string",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareToIgnoreCase(string2);\n        return string1.compareToIgnoreCase(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int len){\n// buggy line:    return string1.compareTo(string",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareTo(string2);\n        return string1.compareTo(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int length){\n// buggy line:    return string1.compareTo(string2);\n// correct line",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n// correct line:  return string.length();\n        return string.length();\n    }\n\n    public static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\n// correct line:  return string1.compareTo(string2);\n        return string1.compareTo(string2);\n    }\n\n    public static int strncmp(String string1, String string2, int count){\n// buggy line:    return string1.compareTo(string2, count);\n//"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n//",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i--){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i--){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    ",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i--) {\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n        for (int i = n - 1; i >= 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0){\n// buggy line:            return i;\n// buggy line:        }\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return -1;\n// buggy line:}\n// buggy line:\n// buggy line:public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:        if (n % i == 0) {\n// buggy line:            return i;\n// buggy line:        "
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return factorize(n);\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result.subList(0, result.size());\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result.subList(0, result.size() - 1);\n}\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static List<",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> factorize(int n){\n"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n        if (entry.getValue() > 1) {\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        }\n        else{\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()) {\n        if (count.get(n) > 1) {\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> e : count.entrySet()){\n        if (e.getValue() > 1){\n            result.add(e.getKey());\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n        if (entry.getValue() > 1) {\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> remove_duplicates2(List<Integer> numbers) {\n    List<Integer> result =",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> remove_duplicates2(List<Integer> numbers)"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n        }",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n        }",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(strings[",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(strings[",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i < strings.length - 1) {\n                sb.",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            result.append(strings[i]);\n            if (i < strings.length - 1) {\n                result.append",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strings.length; i++) {\n            sb.append(strings[i]);\n            if (i!= strings.length - 1) {\n                sb.",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + strings[i];\n//                    }\n//                }\n//                return result;\n        String result = \"\";\n        for (int i = 0; i < strings.length; i++) {\n            result = result + strings[i];\n        }\n        return result;\n    }\n}\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + \" \" + strings[i];\n//                    }\n//                }\n//                return result;\n// buggy line:    String result = \"\";\n//                for (int i = 0; i < strings.length; i++) {\n//                    result = result + strings[i];\n//                }\n//                return result;\n// buggy line:",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n//                for (int i = 0; i < strings.length; i++) {\n//                    if (result == null) {\n//                        result = strings[i];\n//                    } else {\n//                        result = result + strings[i];\n//                    }\n//                }\n//                return result;\n        String result = \"\";\n        for (int i = 0; i < strings.length; i++) {\n            result = result + strings[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n        String result = \"\";\n        for (int i = 0; i < strings.length; i++) {\n            result += strings[i];\n        }\n        return result;\n    }\n}\n"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix, 1)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix, 1)){\n        if (string.endsWith(suffix)){\n            result.add(string);\n        }\n    ",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix)){\n        if (string.endsWith(suffix)){\n            result.add(string);\n        }\n    }\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.endsWith(suffix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\npublic static List<String> filter_by",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n  \n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix, 1)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      ",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_zero(List<Integer> numbers) {\n    List<Integer",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_zero(",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_zero(List<Integer> numbers) {\n    List"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(4));\n    System.out.println(is_prime(5));\n    System",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(4));\n    System.out.println(is_prime(5));\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(4));\n    System.out.println(is_prime(6));\n    System",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(5));\n    System.out.println(is_prime(7));\n    System",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(4));\n    System.out.println(is_prime(7));\n    System",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(is_prime(n));\n}\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    System.out.println(is_prime(1));\n    System.out.println(is_prime(2));\n    System.out.println(is_prime(3));\n    System.out.println(is_prime(4));\n    System.out.println(is_prime(10));\n    System",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args){\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    System.out.println(is_prime(n));\n}\n}\n",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int i = 0; i < t; i++) {\n        int n = in.nextInt();\n        if (is_prime(n))\n            System.out.println(\"Prime\");\n        "
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 1.;\n    for (int i = 0; i < xs.size();",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, center) < 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return begin;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 0.;\n    for (int i = 0; i < xs.size();",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 1.;\n    for (int i = 0; i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 1.;\n    for (int i = 0; i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double result = 0.;\n    for (int i = 0; i",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, center) < 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x) {\n    double sum = 0.;\n    for (int i = 0; i < xs.size(); ++",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy line:            end = center;\n// buggy line:        } else {\n// buggy line:            begin = center;\n// buggy line:        }\n        if (poly(xs, begin) * poly(xs, end) > 0) {\n            end = center;\n        } else {\n            begin = center;\n        }\n    }\n    return (begin + end) / 2.;\n}\n\npublic static double poly(List<Double> xs, double x){\n    double sum = 0.;\n    for (int i = 0; i <"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i <",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n        else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    ",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> forths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        forths.add(l.get(i));\n    }\n    Collections.sort(forths);\n    for (int i = 0",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n        else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    "
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)) {\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)) result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if(!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n))\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> unique2(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n}\n\npublic static List<Integer> unique3(List<Integer> l) {\n    ",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> unique(List<Integer> l, Comparator<Integer> c) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> unique(List<Integer> l, Comparator<Integer> c) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    Collections.sort(result, c);\n    return result;\n  }\n\n"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;",
      "function range": "6,5-14,5",
      "output": [
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                 for (int i = 0; i < l.size(); i++) {\n//                     if (l.get(i) > m) {\n//                         m = l.get(i);\n//                     }\n//                 }\n//                 return m;\n// buggy line:    int m = l.get(0);\n//                 for (int i = 1; i < l.size(); i++) {\n//                     if (l.get(i) > m) {\n//                         m = l.get(i);\n//                     }\n//                 }\n",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n// correct line:  int m = l.get(0);\n//                for (int i = 1; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n// buggy line:    int m = l.get(0);\n//                for (int i = 1; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n// correct line: int m = l.get(0);\n//                for (int i = 1; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n// correct line:    int m = l.get(0);\n//                for (int i = 1; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;\n    }\n\n    ",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;\n    }\n}",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;\n    }\n}",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                    if (l.get(i) > m) {\n//                        m = l.get(i);\n//                    }\n//                }\n//                return m;\n\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;\n    }\n\n    ",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//                for (int i = 0; i < l.size(); i++) {\n//                        if (l.get(i) > m) {\n//                                m = l.get(i);\n//                        }\n//                }\n//                return m;\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) > m) {\n                        m = l.get(i);\n                }\n        }\n        return m;\n    }\n}"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\")",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n            result += 1;\n// buggy line:            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") {\n            result += 1;\n// buggy line:            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n// buggy line:                    result += 1;\n// buggy line:                }\n// buggy line:            }\n            result += 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n            result += 1;\n// buggy line:                }\n// buggy line:            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") {\n            result += 1;\n// buggy line:                }\n// buggy line:            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") {\n// buggy line:                    result += 1;\n// buggy line:                }\n// buggy line:            }\n            result += 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n// buggy line:                    result += 1;\n// buggy line:                }\n// buggy line:            }\n            result += 1;\n        }\n    }\n    return result;\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n// buggy line:                    result += 7;\n// buggy line:                }\n// buggy line:            }\n            result += i;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n// buggy line:                    result += 7;\n// buggy line:                }\n// buggy line:            }\n            result += i;\n        } else {\n            result += i;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\"){\n// buggy line:                    result += 1;\n// buggy line:                }\n// buggy line:            }\n            result += i;\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2 + 1];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2 + 1];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    for (int i = evens.length; i < l.length; i++) {\n      result[i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2 + 1];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int[]",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i + evens.",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < l.length; i++) {\n      result[i] = l[i];\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2!= 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = evens[i /",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        evens[i / 2] = l[i];\n      }\n    }\n    for (int i = 0; i < evens.length; i++) {\n      result[i] = evens[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int[] l ="
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n        if (i!= groups.size() - 1) {\n            sb.append",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n        if (i < groups.size() - 1) {\n            sb.append",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n    }\n    return sb.toString();\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n    }\n    return sb.toString();\n}\n\npublic static void",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        String group = groups.get(i);\n        for (int j = 0; j < group.length(); j++) {\n            ",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n    }\n    return sb.toString();\n}\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String group : groups) {\n        sb.append(group);\n    }\n    return sb.toString();\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < groups.size(); i++) {\n        sb.append(groups.get(i));\n        if (i + 1 < groups.size()) {\n            sb.append(\"",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    Collections.sort(groups);\n    StringBuilder sb = new StringBuilder();\n    for (String group : groups) {\n        sb.append(group);\n    }\n    return sb.toString();\n}\n",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:        groups.add(s.substring(i, i + 3));\n// buggy line:    }\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, i + 3));\n    }\n    return groups.toString();\n}\n"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1)))",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1) + fib.get(len))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (fib.size() > n) {\n            return fib.get(n);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (fib.size() == n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (fib.size() >= n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (fib.size() > n) {\n            return fib.get(n);\n        }\n    }\n}\n\npublic static boolean is_prime(int",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (len == n) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (len == n) {\n            return fib.get(n - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (n == fib.get(len - 1)) {\n            return fib.get(len - 1);\n        }\n    }\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n// buggy line:            fib.add(fib.get(len - 1));\n// buggy line:        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1))) {\n            fib.add(fib.get(len - 1));\n        }\n        if (fib.size() > n) {\n            return fib.get(n);\n        }\n    }\n}\n\npublic static void main(String[] args"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n// buggy line:                    return true;\n// buggy line:                }\n// buggy line:            }\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n// buggy line:                    return true;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        if (numbers[i] + numbers[j] + numbers[k]!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n// buggy line:                    return true;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:                if (numbers[i] + numbers[j] + numbers[k]!= 0) {\n// buggy line:                    return false;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k]!= 0) {\n                    return false;\n                }",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        if (numbers[i] + numbers[j] + numbers[k] == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        if (numbers[i] + numbers[j] + numbers[k]!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k]!= 0) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n// buggy line:    return n;",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision2(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision3(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision4(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision5(int n) {\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n    return n;\n}\n\npublic static int car_race_collision2(int n) {\n// buggy line:    return n;\n    return n;\n}\n\npublic static int car_race_collision3(int n) {\n// buggy line:    return n;\n    return n;\n}\n\npublic static int car_race_collision4(int n) {\n// buggy line:    return n;\n    return n;\n}\n\npublic static int car_race_collision5(int n) {\n// buggy line:",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(car_race_collision(0));\n        System.out.println(car_race_collision(1));\n        System.out.println(car_race_collision(2));\n        System.out.println(car_race_collision(3));\n        System.out.println(car_race_collision(4));\n        System.out.println(car_race_collision(5));\n        System.out.",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(car_race_collision(1));\n        System.out.println(car_race_collision(2));\n        System.out.println(car_race_collision(3));\n        System.out.println(car_race_collision(4));\n        System.out.println(car_race_collision(5));\n        System.out.println(car_race_collision(6));\n        System.out.",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision2(int n) {\n        return n;\n    }\n\n    public static int car_race_collision3(int n) {\n        return n;\n    }\n\n    public static int car_race_collision4(int n) {\n        return n;\n    }\n\n    public static int car_race_collision5(int n) {\n        return n;\n    }\n\n    public static int car_race_collision6(int n) {\n        return",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision2(int n) {\n        return n;\n// buggy line:    return n;\n    }\n\n    public static int car_race_collision3(int n) {\n        return n;\n// buggy line:    return n;\n    }\n\n    public static int car_race_collision4(int n) {\n        return n;\n// buggy line:    return n;\n    }\n\n    public static int car_race_collision5(int n) {\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision(int n, int m) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision(int n, int m, int o) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision(int n, int m, int o, int p) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(car_race_collision(0));\n        System.out.println(car_race_collision(1));\n        System.out.println(car_race_collision(2));\n        System.out.println(car_race_collision(3));\n        System.out.println(car_race_collision(4));\n        System.out.println(car_race_collision(5));\n    }\n}\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(car_race_collision(1));\n        System.out.println(car_race_collision(2));\n        System.out.println(car_race_collision(3));\n        System.out.println(car_race_collision(4));\n        System.out.println(car_race_collision(5));\n        System.out.println(car_race_collision(6));\n    }\n}\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision2(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision3(int n) {\n// buggy line:    return n;\n        return n;\n    }\n\n    public static int car_race_collision4(int n) {\n// buggy line:    return n;\n        return n;\n    }\n}\n"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n}\n\npublic static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n - 1);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n}\n\npublic static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n - 1);\n    }\n    return result;\n}\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n - 1);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n - 1);\n    }\n    return result;\n  }\n}"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) == 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        int sum = 0;\n        for (int j = i; j < l.size(); j += 1) {\n            sum += l.get(j);\n        }\n        if (sum!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean pairs_sum_to_zero2(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        int sum = 0;\n        for (int j = i; j < l.size(); j += 1) {\n            sum += l.get(j);\n        }\n        if (sum!= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean pairs_sum_to_zero2(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            int sum = l.get(i) + l.get(j);\n            if (sum == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        for (int j = i + 1; j < l.size(); j += 1) {\n            int sum = l.get(i) + l.get(j);\n            if (sum == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n//",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n        ",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n      ",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x -",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n        result = result + x % base;\n        x = x - x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + (x % base);\n        x = x",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n        result = result + (x % base);\n        x = x - x / base;\n    }\n    return result;\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n\n        ",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n// buggy line:        result = result + x % base;\n    "
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * a + b * b + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * a + b * b + c * c + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c,",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * b * h;\n        return Math.sqrt(a * a + b * b + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * b * c * h;\n        return Math.sqrt(a * a + b * b + c",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 4;\n        return Math.sq",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return (a * h) / 2;\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 4;\n        return Math.sqrt(s * (",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return (a * h) / 2;\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 2;\n        return Math.sqrt(s * (",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 2;\n        return Math.sq",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 4.0;\n        ",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c) {\n        double s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    public static double triangle_area(double a, double b, double c, double d) {\n        double s = (a + b + c + d) / 2.0;\n        ",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * a + b * b + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * a + b * b + c * c + h * h);\n    }\n}\n",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n        return Math.sqrt(a * a + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double h) {\n        return Math.sqrt(a * a + b * b + h * h);\n    }\n\n    public static double triangle_area(double a, double b, double c, double h) {\n        return Math.sqrt(a * a + b * b + c * c + h * h);\n    }\n\n}\n"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 5)\n        return result.get(n);\n    for (int i = 5; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n    result.add(1);\n    if (n < 3)\n        return result.get(n);\n    for (int i = 3; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(0);\n    if (n < 3)\n        return result.get(n);\n    for (int i = 3; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(1);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n\npublic static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(1);\n    result.add(1);\n    if (n < 3)\n        return result.get(n);\n    for (int i = 3; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n    }\n}\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) /",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) +",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n    }\n}\n\npublic static double median(long[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) /",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n    }\n}\n\npublic static double median(long[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) +",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2) + 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) + 1] + list[(int) (list.length / 2)",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2) + 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2)",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2) + 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}\n\npublic static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2)"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1))\n            return true;\n    }\n    return false;\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n    }\n    return false;\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1))\n            return true;\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    System.out.println(is_palindrome(\"A man, a plan, a canal: Panama\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_pal",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1))\n            return true;\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    System.out.println(is_palindrome(\"A man, a plan, a canal: Panama\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_palindrome(\"\"));\n    System.out.println(is_palindrome(\"",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1)) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String text = in.next();\n        if (is_palindrome(text)) {\n            System.out.println",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1))\n            return true;\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    System.out.println(is_palindrome(\"A man, a plan, a canal: Panama\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_palindrome(\"A man, a plan, a canal: Panama\"));\n    System.",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1)){\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String text = in.next();\n    System.out.println(is_palindrome(text));\n}\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1)) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String text = in.next();\n    System.out.println(is_palindrome(text));\n}\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1)){\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String text = in.next();\n        if (is_palindrome(text)) {\n            System.out.println",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i - 1))\n            return true;\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    System.out.println(is_palindrome(\"A man, a plan, a canal, Panama\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_palindrome(\"race a car\"));\n    System.out.println(is_pal"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n    }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = 2 * result;\n    }\n    return result % p;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result * 2;\n    }\n    return result % p;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (result * 2) % p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n\n  public static int modp2(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n\n  public static int modp3(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      ",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = (2 * result) % p;\n    }\n    return result;\n}\n\npublic static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = (2 * result) % p;\n    }\n    return result;\n}\n\npublic static int modp(int n, int p) {",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n\n  public static int modp2(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * 2) % p;\n    }\n    return result;\n  }\n\n  public static int modp3(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      ",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = (2 * result) % p;\n    }\n    return result;\n}\n\npublic static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (2 * result) % p;\n    }\n    return result;\n}\n\npublic static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (2",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n\n  public static int modp2(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = (2 * result) % p;\n    }\n    return result;\n  }\n\n  public static int modp3(int n,"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - (int)('a')) % 26) + (int)('a'));\n        sb.",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      c = (char)((((int) c - (int)('a')) % 26) + (int)('a'));\n      sb",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - (int)('a')) % 26) + (int)('a'));\n        sb",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - (int)('a')) % 26) + (int)('a'));",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n  \n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      c = (char)((((int) c - (int)('a')) % 26) + (int)('a'));\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - (int)('a')) % 26) + (int)('a')",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String encode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - (int)('a')) % 26) + (int)('a')"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n        continue;\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n        continue;\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] >= t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] > t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] > t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] > t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean below_threshold(long[] l, long t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] > t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] > t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (l[i] <= t) {\n            return true;\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] >= t) {\n        return true;\n      ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (l[i] < t) {\n            return true;\n        }\n    }\n    return false;\n}\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n// buggy line:    return x | y;",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return x | y;\n// good line:    return",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n// buggy line:    return x - y;\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n// buggy line:    return x * y;\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n// buggy line:    return x / y;\n        return x / y;\n    }\n\n    public static int mod(int x, int y)",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n// fixed line:   return x + y;\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\n// fixed line:   return x + y + z;\n        return x + y + z;\n    }\n\n    public static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\n// fixed line:   return x + y + z + w;\n        ",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n// fixed line:   return x + y;\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n// buggy line:    return x - y;\n// fixed line:   return x - y;\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n// buggy line:    return x * y;\n// fixed line:   return x * y;\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int add2(int x, int y) {\n        return x + y;\n    }\n\n    public static int add3(int x, int y) {\n        return x + y;\n    }\n\n    public static int add4(int x, int y) {\n        return x + y;\n    }\n\n    public static int add5(int x, int y) {\n        return x + y;\n    }\n\n    public static int add6(int x, int y) {\n        return",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n// buggy line:    return x - y;\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n// buggy line:    return x * y;\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n// buggy line:    return x / y;\n        return x / y;\n    }\n\n    public static int rem(int x, int y)",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int sub(int x, int y) {\n// buggy line:    return x & y;\n        return x - y;\n    }\n\n    public static int mul(int x, int y) {\n// buggy line:    return x * y;\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n// buggy line:    return x / y;\n        return x / y;\n    }\n\n    public static int mod(int x, int y)",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\n        return x + y + z;\n    }\n\n    public static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\n        return x + y + z + w;\n    }\n\n    public static int add(int x, int y, int z, int w, int v) {\n// buggy line",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\n        return x + y + z;\n    }\n\n    public static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\n        return x + y + z + w;\n    }\n\n    public static int add(int x, int y, int z, int w, int x1) {\n// buggy",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x + y;\n    }\n\n    public static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\n        return x + y + z;\n    }\n\n    public static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\n        return x + y + z + w;\n    }\n\n    public static int add(int x, int y, int z, int w, int u) {\n// buggy line"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < set0.size(); i++) {\n// buggy line:        if",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    if (set0.equals(set1)) {\n// buggy line:        return true;\n// buggy",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    return set0.containsAll(set1) && set1.containsAll(set0);\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    if (set0.size()!= set1.size()) {\n// buggy line:        return false;\n",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < set0.size(); i++) {\n// buggy line:        for",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);\n    }\n}\n",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);\n    }\n\n    public static void main(",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < set0.size(); i++) {\n// buggy line:        Character",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    return set0.equals(set1);\n// buggy line:}\n// buggy line:public static boolean",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    for (int i = 0; i < s0.length(); i++) {\n// buggy line:        set0.add(s0.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < s1.length(); i++) {\n// buggy line:        set1.add(s1.charAt(i));\n// buggy line:    }\n// buggy line:    for (int i = 0; i < set0.size(); i++) {\n// buggy line:        set"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line: return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// fixed line:   return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line:  return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line:  return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line: return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// fixed line:   return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line: return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// fixed line:   return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// correct line:  return fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    }\n\n    private static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return depth == 0;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return depth == 0;\n  }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return (depth == 0);\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String brackets = in.next();\n    System.out.println(correct_bracketing(brackets));\n}\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    String brackets = in.next();\n    System.out.println(correct_bracketing(brackets));\n}\n}\n"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[l.length - i - 1] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (l[i]!= reverse_sorted[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - i - 1];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (reverse_sorted[i]!= l[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[l.length - i - 1] = sorted[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (l[i]!= reverse_sorted[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - 1 - i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (l[i]!= reverse_sorted[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (reverse_sorted[i]!= sorted[i]) {\n        return false;\n      }\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      reverse_sorted[i] = sorted[sorted.length - i - 1];\n    }\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i]!= reverse_sorted[i]) {\n        return false;\n      ",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[l.length - i - 1] = sorted[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (reverse_sorted[i]!= l[i]) {\n        return false;\n      }\n"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        int[] result = new int[common.size()];\n        for (int i = 0; i < common.size(); i++) {\n            result[i]",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        int[] res = new int[common.size()];\n        for (int i = 0; i < common.size(); i++) {\n            res[i]",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        int[] result = new int[common.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i]",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                    break;\n                }\n            }\n        }\n        int[] result = new int[common.size()];\n        for (int i = 0; i < common.size(); i++) {\n            ",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        int[] res = new int[common.size()];\n        for (int i = 0; i < res.length; i++) {\n            res[i]",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                    break;\n                }\n            }\n        }\n        int[] result = new int[common.size()];\n        for (int i = 0; i < result.length; i++) {\n            ",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                    break;\n                }\n            }\n        }\n        return common.toArray(new Integer[common.size()]);\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        return common.toArray(new Integer[common.size()]);\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                    break;\n                }\n            }\n        }\n        return ArrayUtils.toPrimitive(common.toArray(new Integer[common.size()]));\n    }\n}\n",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < l1.length; i++) {\n            for (int j = 0; j < l2.length; j++) {\n                if (l1[i] == l2[j]) {\n                    common.add(l1[i]);\n                }\n            }\n        }\n        return ArrayUtils.toPrimitive(common.toArray(new Integer[common.size()]));\n    }\n}\n"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:            break;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        while (n % j == 0) {\n            largest = j;\n            n = n / j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        while (n % j == 0) {\n            largest = j;\n            n /= j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:            break;\n// buggy line:        }\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n            break;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j) && n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:            break;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (n % j == 0) {\n                largest = j;\n                break;\n            }\n        }\n    }\n    return largest;\n}\n"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(6));\n        System.",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(6));\n    }\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(10));\n        System.",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n    }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(10));\n    }\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(7));\n        System.",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(8));\n        System.",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(100));\n    }\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(1));\n        System.out.println(sum_to_n(2));\n        System.out.println(sum_to_n(3));\n        System.out.println(sum_to_n(4));\n        System.out.println(sum_to_n(5));\n        System.out.println(sum_to_n(9));\n        System."
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++)\n      result.add(xs.get(i));\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++) {\n        result.add(xs.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n        result.add(xs.get(i));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = xs.size() - 1; i >= 0; i -= 1)\n      result.add(xs.get(i));\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = xs.size() - 1; i >= 0; i -= 1)\n        result.add(xs.get(i));\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(List<Integer> xs, int n) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n        result.add(xs.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i += 1) {\n        result.add(xs.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> derivative",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n        result.add(xs.get(i));\n    }\n    return result;\n}\n\npublic static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < xs.size(); i += 1) {\n        result.add(1);\n    }\n    return result;\n}\n\npublic static List<Integer> derivative(List<Integer",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(List<Integer> xs, int n) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < n; i++) {\n      result.add(xs.get(i));\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static void main(String[] args) {\n    System.out.println(fibfib(0));\n    System.out.println(fibfib(1));\n    System.out.println(fibfib(2));\n    System.out.println(fibfib(3));\n    System.out.println(fibfib(4));\n    System.out.println(fib",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fibfib2(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n    return fibfib2(n - 1) + fibfib2(n - 2",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fibfib2(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n}\n\npublic static int fibfib3(int n) {\n    if (n == 0)\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fibfib2(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n}\n\npublic static int fibfib3("
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result++;\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n//            result += 1;\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I'\n                && c!= 'O' && c!= 'U')\n            result",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n//                result += 1;\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O'\n                && c!= 'U')\n            result",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l'\n                || c =='m' || c ==",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k'\n                || c == 'l' || c =='m' || c ==",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n//               result += 1;\n    return result;\n}\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n//            result += 1;\n    return result;\n}\n\npublic static int consonants_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I'\n                && c!= 'O' && c!= 'U')"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift + 1);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift, s.length());\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift - 1);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift + 1) + s.substring(s.length() - shift, s.length());\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift + 1, s.length());\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift, s.length() - shift + 1) + s.substring(0, s.length() - shift);\n    }\n}\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift, s.length() - shift + 1) + s.substring(0, s.length() - shift);\n    }\n}\n\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift, s.length());\n    }\n}\n\npublic static void main(String[] args) {\n    System.out.println(circular_shift(1, 1));\n    System.out.println(circular_shift(1, 2));\n    System.out.println(circular_shift(1, 3));\n    System.out.println(circular_shift(1, 4));\n    System.out.println(circ"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c == ' ')\n// buggy line:            break;",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"\\\"\" + p0 + \"",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += Character.digit(c, 10);\n    }\n    return result;\n}\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        if (Character.isDigit(c)) {\n            result += Character.digit(c, 10);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit-pf 2.3.0\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (int i = 0;",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"\\\"\" + p0 + \"",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit-pf 2.3.0\n  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"\\\"\" + p0 + \"\\\"\");\n    System",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      if (Character.isDigit(c)) {\n        result += Character.digit(c, 10);\n      }\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + p0);\n    System.out"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (int i = 0",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (int i = 0; p0.",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        result -= Integer.parseInt(str);\n    }\n    return result;\n}\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {\n    System.out.print(\"Test \" + testNum + \": [\" + p0[0] + \",\" + p1",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (int i = 0",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, boolean hasAnswer, int p2) {\n    System.out.print(\"Test \" + testNum + \": [\" + p0 + \",\" + p1);\n    System",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      int cnt = Integer.parseInt(str);\n      result -= cnt;\n    }\n    return result;\n  }\n\n  // BEGIN KAWIGIEDIT TESTING\n  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\n  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {\n    System.out.print(\"Test \" + testNum + \": [\" + \"{\");\n    for (int i = 0; p0."
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        } else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:}\n// buggy line:",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = arr[i];\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:}\npublic static int[] pluck(int[] arr) {\n    int min_even = 0;",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, index);\n// buggy line:}\n",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = arr[i];\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:}\n\npublic static int[] pluck(int[] arr) {\n    int min_even = 0",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        } else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:}\npublic static int[]",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        } else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length);\n// buggy line:}\n\npublic static int",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        } else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index + 1, arr.length);\n// buggy line:}\n// buggy",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        } else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, index + 1, arr.length);\n// buggy line:}\n//\n",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:        if (arr[i] % 2 == 0) {\n// buggy line:            min_even = Math.min(min_even, arr[i]);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            index = i;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, index);\n// buggy line:}\n\n"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max + 1];\n    for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[lst.length];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] >= i) result = i;\n    }\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1)\n        if (lst[i] >= i)\n            result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1)\n        if (lst[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)\n        frq[lst[i]] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }",
      "function range": "17,5-29,5",
      "output": [
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n//            result.add(Collections.max(lst));\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n        switched =!switched;\n        Collections.swap(lst, 0, lst.size() - 1);\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n//            result.add(Collections.max(lst));\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n        switched =!switched;\n// buggy line:    }\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n//                result.add(Collections.max(lst));\n        switched =!switched;\n    }\n    return result;\n}\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n        switched =!switched;\n        Collections.swap(lst, 0, lst.size() - 1);\n        lst.remove(lst.size() - 1);\n    }\n    return result;\n}\n}\n"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {",
      "function range": "16,5-26,5",
      "output": [
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_3(double a, double b, double c) {\n// buggy line:public static double triangle_area_4(double a, double b, double c) {\n// buggy line:public static double triangle_area_5(double a, double b, double c) {\n// buggy line:public static double triangle_area_6(double a, double b, double c) {\n// buggy line:public static double triangle_area_7(double a, double b, double c) {\n// buggy line:public static double",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b,",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area(double a, double b, double c) {\n// buggy line:public static double triangle_area_3(double a, double b, double c) {\n// buggy line:public static double triangle_area_4(double a, double b, double c) {\n// buggy line:public static double triangle_area_5(double a, double b, double c) {\n// buggy line:public static double triangle_area_6(double a, double b, double c) {\n// buggy line:public static double triangle_",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\npublic static double triangle_area_",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:double triangle_",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_3(double a, double b, double c) {\n// buggy line:public static double triangle_area_4(double a, double b, double c) {\n// buggy line:public static double triangle_area_5(double a, double b, double c) {\n// buggy line:public static double triangle_area_6(double a, double b, double c) {\n// buggy line:public static double triangle_area_7(double a, double b, double c) {\n",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n// buggy line:public static double triangle_area_3(double a, double b, double c) {\n// buggy line:public static double triangle_area_4(double a, double b, double c) {\n// buggy line:public static double triangle_area_5(double a, double b, double c) {\n// buggy line:public static double triangle_area_6(double a, double b, double c) {\n// buggy line:public static double triangle_area_7(double a, double b, double c) {\n// buggy line:public static void"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n// buggy line:    }",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else {\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return true;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1)\n        q[i]",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) return false;\n        else if (q[i] < q[j]) {\n            i += 1;\n            j -= 1;\n        }\n        else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int w = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int w = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] > q[j]) {\n        } else if (q[i] < q[j]) {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] q = new int[n];\n    for (int i = 0; i < n; i += 1) {\n        q["
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i] != arr[arr.length - i])",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += Math.abs(arr[i] - arr[arr.length - i]);\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += Math.abs(arr[i] - arr[arr.length - i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += Math.abs(arr[i] - arr[arr.length - i]);\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += Math.abs(arr[i] - arr[arr.length - i]);\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += 1;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += Math.abs(arr[i] - arr[arr.length - i]);\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += Math.abs(arr[i] - arr[arr.length - i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += arr[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += arr[i] - arr[arr.length - i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += arr[i] - arr[arr.length - i];\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += Math.abs(arr[i] - arr[arr.length - i]);\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += Math.abs(arr[i] - arr[arr.length - i]);\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += arr[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += arr[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i]) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result += Math.abs(arr[i] - arr[arr.length - i]);\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i]!= arr[arr.length - i - 1]) {\n            result += Math.abs(arr[i] - arr[arr.length - i - 1]);\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return res;\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).charAt(0) == lst2.get(j).charAt(0)) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).charAt(0) == lst2.get(j).charAt(0)) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).charAt(0) == lst2.get(j).charAt(0)) {\n                result.add(lst1.get(i));\n                break;\n            }\n        }\n    }",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).charAt(0) == lst2.get(j).charAt(0)) {\n                res.add(lst1.get(i) + lst2.get(j));\n            }\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).charAt(0) == lst2.get(j).charAt(0)) {\n                res.add(lst1.get(i) + lst2.get(j));\n            }\n        ",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                result.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> res = new ArrayList<String>();\n    for (int i = 0; i < l1; i++) {\n        for (int j = 0; j < l2; j++) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                break;\n            }\n        }\n    }\n    return res;\n}\n\n"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }\n    return true;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args)",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args)",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (int i = 3; i * i <= a; i += 2) {\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static void"
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        int power = 1;\n        for (int i = 0; i < n; i++) {\n            power *= x;\n            if (power == 0) {\n                return false;\n            }\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 1; i <= n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        int power = 1;\n        for (int i = 1; i <= n; i++) {\n            power *= x;\n            if (power == 0) {\n                return false;\n            }\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n        int power = 1;\n        for (int i = 0; i < n; i++) {\n            power *= x;\n            if (power == 0) {\n                return true;\n            }\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 1; i <= n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n        int power = 1;\n        for (int i = 1; i <= n; i++) {\n            power *= x;\n            if (power == 0) {\n                return true;\n            }\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        int power = 1;\n        for (int i = 0; i < n; i++) {\n            if (power == 0) {\n                return false;\n            }\n            power *= x;\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n// buggy line:}\npublic static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    for (int i = 0; i < n; i++) {\n        power *= x",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n        int power = 1;\n        for (int i = 0; i < n; i++) {\n            if (power == 0) {\n                return true;\n            }\n            power *= x;\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 1; i <= n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        int power = 1;\n        for (int i = 1; i <= n; i++) {\n            if (power == 0) {\n                return false;\n            }\n            power *= x;\n        }\n        ",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        int power = 1;\n        for (int i = 0; i < n; i++) {\n            power = power * x;\n            if (power == 0) {\n                return false;\n            }\n        }\n",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i < n; i++) {\n// buggy line:        power *= x;\n// buggy line:        if (power == 0) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n// buggy line:}\n// buggy line:public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n// buggy line:    for (int i = 0; i"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 3./3);\n        double root3 = Math.pow(a, 3.0/3.0);\n// buggy line:    double root4 = Math.pow(a, 4./3);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1./2);\n        double root3 = Math.pow(a, 1.0/2.0);\n// buggy line:    double root4 = Math.pow(a, 2./3);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1.0);\n        double root3 = Math.pow(a, 1.0);\n// buggy line:    double root4 = Math.pow(a, 2.0);\n        double root4 = Math",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1./2);\n        double root3 = Math.pow(a, 1.0/2.0);\n// buggy line:    double root4 = Math.pow(a, 2./2);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1./2);\n        double root3 = Math.pow(a, 1.0/2.0);\n// buggy line:    double root4 = Math.pow(a, 3./2);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 2./3);\n        double root3 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root4 = Math.pow(a, 1./3);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1./2);\n        double root3 = Math.pow(a, 1.0/2.0);\n// buggy line:    double root4 = Math.pow(a, 1./4);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1./2);\n        double root3 = Math.pow(a, 1.0/2.0);\n// buggy line:    double root4 = Math.pow(a, 0.5);\n        double",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 1.0);\n        double root3 = Math.pow(a, 1.0);\n// buggy line:    double root4 = Math.pow(a, 0.0);\n        double root4 = Math",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n        double root = Math.pow(a, 1.0/3.0);\n// buggy line:    double root2 = Math.pow(a, 2./3);\n        double root2 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root3 = Math.pow(a, 2./3);\n        double root3 = Math.pow(a, 2.0/3.0);\n// buggy line:    double root4 = Math.pow(a, 2./3);\n        double"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7')",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            result",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n          result",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            int",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == '",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            if",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            //",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            result = result * 16 + c - '0';\n        ",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            result = result * 16 + (c - '0');\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n// buggy",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f') {\n            result <<= 4;\n            result |= Character.digit"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static int hex_to_decimal(String hex) {\n// buggy line:    int result = Integer.parseInt(hex, 16);\n        int result = Integer.parseInt(hex, 16);\n",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static int decimal_to_hex(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toHexString(decimal);",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static String hex_to_binary(String hex) {\n// buggy line:    String result = Integer.toBinaryString(Integer.parseInt(hex, 16));\n        String result = Integer.toB",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary, int radix) {\n// buggy line:    int result = Integer.parseInt(binary, radix);\n        int result = Integer.parseInt(",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static String binary_to_hex(String binary) {\n// buggy line:    String result = Integer.toHexString(Integer.parseInt(binary, 2));\n        String result = Integer.toH",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n        int decimal = Integer.parseInt(binary, 2);\n        return decimal;\n    }\n}\n",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n}\n",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n        String result = Integer.toBinaryString(decimal);\n        return result;\n    }\n\n    public static int binary_to_decimal(String binary) {\n// buggy line:    int result = Integer.parseInt(binary, 2);\n        int result = Integer.parseInt(binary, 2);\n        return result;\n    }\n\n    public static String hex_to_binary(String hex) {\n// buggy line:    String result = Integer.toHexString(Integer.parseInt(hex, 16));\n        String result = Integer.toB"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) {\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n// END KAWIGIEDIT TESTING\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i += 1) {\n        String s = in.next();\n        if (is_happy(s",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for(int a0 = 0; a0 < t; a0++){\n        String s = in.next();\n        System.out.println(",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for (int i = 0; i < n; i++) {\n        String s = in.next();\n        if (is_happy(s))\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n        String s = in.next();\n        System.out.println("
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"E\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"E-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"F\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.0)\n            ",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"E\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"E-\";\n        else\n            ",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"D\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"E+\";\n        else if",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"E\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"F\";\n        else if (g",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"D\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D-\";\n        else if (",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"D-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"E\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"F\";\n        else if (g"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prime_length(\"1\"));\n    System.out.println(prime_length(\"2\"));\n    System.out.println(prime_length(\"3\"));\n    System.out.println(prime_length(\"4\"));\n    System.out.println(prime_length(\"5\"));\n    System.out.println(prime_length(\"6\"));\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (string.charAt(l - i) == '0')\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prime_length(\"\"));\n    System.out.println(prime_length(\"1\"));\n    System.out.println(prime_length(\"2\"));\n    System.out.println(prime_length(\"3\"));\n    System.out.println(prime_length(\"4\"));\n    System.out.println(prime_length(\"5\"));\n    ",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (string.substring(0, i).equals(string.substring(l - i, l)))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (string.substring(0, i).equals(string.substring(l - i)))\n            return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prime_length(\"1\"));\n    System.out.println(prime_length(\"2\"));\n    System.out.println(prime_length(\"3\"));\n    System.out.println(prime_length(\"4\"));\n    System.out.println(prime_length(\"5\"));\n    System.out.println(prime_length(\"7\"));\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    System.out.println(prime_length(\"\"));\n    System.out.println(prime_length(\"a\"));\n    System.out.println(prime_length(\"ab\"));\n    System.out.println(prime_length(\"abc\"));\n    System.out.println(prime_length(\"abcd\"));\n    System.out.println(prime_length(\"abcde\"));"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 1));\n    return (int) ((Math.pow(10, n - 1) + 9) * Math.pow(10, n - 1));\n}\n\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static void main(String[] args) {\n    System.out.println(starts_one_ends(1));\n    System.out.println(starts_one_ends(2));\n    System.out.println(starts_one_ends(3));\n    System.out.println(starts_one_ends(4));\n    System.out.println(starts_one_",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int starts_two_ends(int n) {\n    if (n == 2)\n        return 2;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 3));\n    return (int) ((Math.pow(10, n - 3) + 9) * Math.pow(10, n - 3));\n}\n\npublic",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int starts_two_ends(int n) {\n    if (n == 2)\n        return 2;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((9 + 10) * Math.pow(10, n - 2));\n    return (int) ((9 + Math.pow(10, n - 2)) * Math.pow(10, n - 2));\n}\n\npublic",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((9 + 10) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 10) * Math.pow(10, n - 2));\n}\n\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n\npublic static int ends_one_starts(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    return (int) ((Math.pow(10, n - 2) + 9) * Math.pow(10, n - 2));\n}\n}"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += (Integer.parseInt((N + \"\").substring(i + 1)));\n    }\n    return sum + \"\";\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return sum + \"\";\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return String.valueOf(sum);\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += (Integer.parseInt((N + \"\").substring(i + 1)));\n    }\n    return String.valueOf(sum);\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 2));\n    }\n    return sum + \"\";\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return \"\" + sum;\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Character.digit((N + \"\").charAt(i), 10);\n    }\n    return sum + \"\";\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += (Integer.parseInt((N + \"\").substring(i + 1)));\n    }\n    return \"\" + sum;\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n    }\n    return \"\" + sum;\n}\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += (Integer.parseInt((N + \"\").substring(i + 1)));\n    }\n    return String.valueOf(sum);\n  }\n}\n"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 1; i < lst.length; i += 2) {\n    for (int i = 1; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 1; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd(int[] lst) {\n    int",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 2) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:        if (i % 2 == 0) {\n// buggy line:            sum += lst[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < lst.length; i += 1) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:        if (i % 2 == 0) {\n// buggy line:            sum += lst[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < lst.length; i += 1) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\npublic static int add_odd_at_even(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 1; i < lst.length; i += 2) {\n    for (int i = 1; i < lst.length; i += 1) {\n        sum += lst[i];\n    }\n    return sum",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:        if (i % 2 == 0) {\n// buggy line:            sum += lst[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < lst.length; i += 1) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:        if (i % 2 == 0) {\n// buggy line:            sum += lst[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:        if (i % 2 == 0) {\n// buggy line:            sum += lst[i];\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < lst.length; i += 1) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\npublic static int add_even_at_odd2(int[] lst) {\n    int sum = 0;\n    for (int"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        StringBuilder sb = new StringBuilder();\n        for (char c : chars) {\n            sb.append(c);\n        }\n        result += sb.toString();\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tstring result;\n\tresult = anti_sh",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tString* answer;\n\tstring result;\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (char c : chars) {\n            result += c;\n        }\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tString* result;\n\tif (hasAnswer",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tStringWrapper *obj;\n\tstring answer",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tString* answer;\n\tif (hasAnswer"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n      for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new GET_ROW().new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<ArrayList<Integer>> lst = new ArrayList<ArrayList",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n      for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new GET_ROW().new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<ArrayList<Integer>> lst = new ArrayList<Array"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n        }\n        return array;\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return sort_array(array);\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            swap(array, i, array.length - i - 1);\n        }\n        return array;\n    }\n}\n}\n"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 3)\n                d.charAt(d.indexOf(c) + 2 * 3)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.charAt(s.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 1)\n                d.charAt(d.indexOf(c) + 2 * 1)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.charAt(s.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.charAt(s.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        }\n        else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 3)\n                d.charAt(d.indexOf(c) + 2 * 3)\n            );\n        }\n        else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf((int) c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 3)\n                d.charAt(d.indexOf((int) c) + 2 * 3)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        }\n        else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        }\n        else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf((int) c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf((int) c) + 2 * 2)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n// buggy line:                d.char",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('0' <= c && c <= '9'){\n            sb.append(\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 3)\n                d.charAt(d.indexOf(c) + 2 * 3)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                d.charAt(d.indexOf(c) + 2 * 2)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 3)\n                d.charAt(d.indexOf(c) + 2 * 3)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static void main"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n\n    public static Integer next_largest(int[] lst) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(l",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(numbers.size() - 1);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = Arrays.asList(lst);\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers, Collections.reverseOrder());\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>(Arrays.asList(lst));\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n}\n",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            numbers.add(lst[i]);\n        }\n        Collections.sort(numbers);\n        return numbers.get(0);\n    }\n\n    public static Integer next_largest(int[] lst) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < lst.length; i++)\n            numbers.add(lst"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n      if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 3 && sentence.subSequence(0, 3).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n            result += 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \"))\n            result++;\n    }\n    return result;\n}\n}\n"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y)",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:}\n// buggy line:",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || z + y == x) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || z +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || z + x == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || z +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    }\n// buggy line:    if ((",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || z + x == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || y +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n        if ((int)x == x && (int)y == y) {\n            if (x + y == z || x + z == y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if ((int)x == x) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    }\n// buggy line:    return false"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            ",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isUpperCase(c)) {\n// buggy line:            ",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n//            c = Character.toUpperCase(c);\n//        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isUpperCase(c))",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c))",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n//            c = Character.toUpperCase(c);\n//        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n//            c =",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n//            c = Character.toUpperCase(c);\n//        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n//            c",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n        sb.append(c);\n    }\n    return sb.toString();\n}\n\npublic static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;",
      "function range": "22,5-35,5",
      "output": [
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result *= (int) c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    int result = skjkasdkd(lst);\n    System.out.println(result);\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++)\n        lst[i] = in.nextInt();\n    System.out.println(skjkasdkd(lst));\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(lst));\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for (int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(skjkasdkd(arr));\n}\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for (int i = 0; i < n; i++)\n        lst[i] = in.nextInt();\n    System.out.println(skjkasdkd(lst));\n}\n"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key)) {\n                    state = \"mixed\";\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key))\n                    state = \"mixed\";\n            } else {\n                state = \"",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key))\n                    state = \"mixed\";\n            }\n            if (state.equ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            } else {\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            } else if (",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key))\n                    state = \"mixed\";\n            } else\n                state = \"m",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (!str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n            } else if (state.equals(\"lower\")) {\n                if (!str_key.toLowerCase().equals(str_key))\n                    state = \"mixed\";\n            }\n        }\n        return state",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n//                        state = \"mixed\";\n//                        break;\n            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"start\");\n    }\n}\n}\n"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.add(i",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.add(",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n      boolean is_prime = true;\n      for (int j = 2; j < i; j += 1){\n        if (i % j == 0) {\n          is_prime = false;\n          break;\n        }\n      }\n      if (is_prime) {\n        primes.add(i",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.add(i",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            ",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n// buggy line:    }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime){\n            primes.add(i);\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.add(i);",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime)\n            primes.add(i);",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:                break;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n        return (a % 10) * (b % 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n        return (a % 10) * (b % 10) * (c % 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10) * (d",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n        return (a / 10) * (b / 10) * (c / 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10) * (d",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n        return (a % 10) * (b % 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return (a % 10) * (b % 10) * (c % 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return (a % 10) * (b % 10) * (c % 10) * (d % 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d, int e)",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n// fixed line:   return (a / 10) * (b / 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n// fixed line:   return (a / 10) * (b / 10) * (c / 10);\n        return (a / 10) * (b / 10) * (c / 10);\n    }\n\n    public static int",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n// correct line:  return (a / 10) * (b / 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n// correct line:  return (a / 10) * (b / 10) * (c / 10);\n        return (a / 10) * (b / 10) * (c / 10);\n    }\n\n    public static int",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n        return (a % 10) * (b % 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n        return (a % 10) * (b % 10) * (c % 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return (a % 10) * (b % 10) * (c % 10) * (d % 10);\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n// fixed line:   return (a / 10) * (b / 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n// fixed line:   return (a / 10) * (b / 10) * (c / 10);\n        return (a / 10) * (b / 10) * (c / 10);\n    }\n}\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n        return (a % 10) * (b % 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n        return (a % 10) * (b % 10) * (c % 10);\n    }\n\n    public static int multiply(int a, int b, int c, int d) {\n        return (a % 10) * (b % 10) * (c % 10) * (d % 10);\n    }\n}\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n// correct line:  return (a / 10) * (b / 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int multiply(int a, int b, int c) {\n// buggy line:    return (a % 10) * (b % 10) * (c % 10);\n// correct line:  return (a / 10) * (b / 10) * (c / 10);\n        return (a / 10) * (b / 10) * (c / 10);\n    }\n}\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n// fixed line:   return (a / 10) * (b / 10);\n        return (a / 10) * (b / 10);\n    }\n\n    public static int divide(int a, int b) {\n// buggy line:    return (a % 10) / (b % 10);\n// fixed line:   return (a / 10) / (b / 10);\n        return (a / 10) / (b / 10);\n    }\n\n    public static int modulo(int a, int b) {\n// buggy line:    return (a % 10"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (Character.",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        if (c >=",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c ==",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n}\n",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'i' || c == 'o' || c == 'u') {\n        if (c >= 'a' &&"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    }\n    return result;\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    }\n    return result;\n}\n\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = num > 0? (int)Math.ceil(num) : (int)Math.floor(num);\n// buggy line:    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n// buggy line:        result = (int)num;\n// buggy line:    }\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else {\n        result = (int)num;\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    }\n    return result;\n  }\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n        result = (int)Math.floor(num);\n// buggy line:    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n// buggy line:        result = (int)num;\n// buggy line:    }\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else {\n        result = (int)num;\n    }\n    return result;\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    }\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy line:    } else {\n// buggy line:        result = (int)num;\n// buggy line:    }\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        if (num > 0) {\n            result = (int)Math.floor(num);\n        } else {\n            result = (int)Math.ceil(num);\n        }\n    } else {\n        result = (int)num;\n    }\n    return result;\n}\n}\n"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList<Integer> pile",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\t",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i - 1);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - i);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_3(int n) {\n\tArrayList<Integer",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i - 1);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n\npublic static void main(",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t\tpile.add(n - 2 * i - 2);\n\t",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static ArrayList<Integer> make_a_pile_2(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}\n\npublic static void main("
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tresult.add(s_list);\n\treturn result;\n}\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tArrayList<String",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tString s = \"",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tSystem.out.",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0)\n\t\tresult.add(s_list);\n\treturn result;\n}\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\npublic static void main(String[] args) {\n\tArrayList<String>",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (s_list.length() > 0) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\t// TODO Auto",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) =='') {\n\t\t\tresult.add(s_list);\n\t\t\ts_list = \"\";\n\t\t} else {\n\t\t\ts_list += s.charAt(i);\n\t\t}\n\t}\n\tif (!s_list.equals(\"\")) {\n\t\tresult.add(s_list);\n\t}\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tArrayList<String>",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n}\n"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x == y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x > y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x > y) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else if (x == y) {\n            return 0;\n",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n        if (x < y) {\n            return -1;\n        } else {\n            return x;\n        }\n    }\n\n    public static int choose_num2(int x, int y) {\n        if (x < y) {\n            return -1;\n        } else {\n            return x;\n        }\n    }\n\n    public static int choose_num3(int x, int y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    "
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return \"\" + avg_rounded;\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.round(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.round(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}\n\n}\n"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2) != 0) {\n// buggy line:                all_odd = true;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2) == 0) {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2)!= 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2) == 0) {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if(curr_digit % 2!= 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if(!all_odd) {\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2)!= 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if(curr_digit % 2!= 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2) == 0) {\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n// buggy line:            } else {\n// buggy line:                all_odd = false;\n// buggy line:            }\n            if((curr_digit % 2)!= 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}\n}\n"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num) != \"\") {",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.get(num)!= null) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    Collections.sort(result);\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    Collections.sort(result);\n    return result;\n}\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      } else {\n        result.add(String.valueOf(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    Collections.reverse(result);\n    return result;\n}\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> a = new ArrayList<>();\n    a.add(1);\n    a.add(2);\n    a.add(3);\n    a.add(4);\n    a.add(5);\n    a.add(6);\n    a.add(7);\n    ",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n  public static void main(String[] args) {\n    ArrayList<Integer> a = new ArrayList<>();\n    a.add(1);\n    a.add(2);\n    a.add(3);\n    a.add(4);\n    a.add(5);\n    a.add(6);\n    a.add(7);\n    "
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = i; j > 1; j--) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    System.out.println(factorial(10));\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(5);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    System.out.println(ret);\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = i; j > 1; j--) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = i; j > 1; j--) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    for(int i = 0; i < ret.size(); i++) {\n        System.out.println(ret.get(i));\n    }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> ret = factorial(10);\n    System.out.println(ret);\n}\n"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i) && (i % 2) == 0) odd_palindrome_count--;\n        else if(is_palindrome(i) && (i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i)) {\n            if((i % 2) == 0) {\n                odd_palindrome_count--;\n            } else {\n                even_palindrome_count--;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i) && (i % 2) == 0) odd_palindrome_count--;\n        else if(is_palindrome(i) && (i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n)",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                odd_palindrome_count--;\n            } else {\n                even_palindrome_count--;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i) && (i % 2) == 0) odd_palindrome_count--;\n        else if(is_palindrome(i) && (i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static void main(String[] args) {\n",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i)) {\n            if((i % 2) == 0) {\n                odd_palindrome_count--;\n            }\n            else {\n                even_palindrome_count--;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n)",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i)) {\n            if((i % 2) == 0) {\n                odd_palindrome_count--;\n            } else {\n                even_palindrome_count--;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int n) {\n    ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i) && (i % 2) == 0) odd_palindrome_count--;\n        else if(is_palindrome(i) && (i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int x",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if(is_palindrome(i) && (i % 2) == 0) odd_palindrome_count--;\n        else if(is_palindrome(i) && (i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}\n\npublic static boolean is_palindrome(int number"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num <",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count++;\n    }\n    return count;",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count++;",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num > 0) count++;\n    }\n    return count;",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count++;\n        else count--;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums2(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num < 0) count--;\n        else count++;\n    }\n    return count;\n}\n\npublic static int count_nums3(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        if(num >"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i, sorted_arr.get(sorted_arr.size() - 1));\n        sorted_arr.remove(sorted_arr.size() - 1);\n        return true;\n      }\n    }\n    return",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i + 1, min_value);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        return move_one_ball(sorted_arr);\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i, sorted_arr.get(sorted_arr.size() - 1));\n        sorted_arr.remove(sorted_arr.size() - 1);\n        return move_one_ball(sorted_arr);",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = sorted_arr.size() - 2; i >= 0; i--) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i + 1, min_value);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = 0; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        return move_one_ball(sorted_arr);\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i, sorted_arr.get(sorted_arr.size() - 1));\n        sorted_arr.remove(sorted_arr.size() - 1);\n        return move_one_ball(arr);\n      }",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        return move_one_ball(sorted_arr);\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i + 1, min_value);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == min_value) {\n        sorted_arr.remove(i);\n        sorted_arr.add(i, sorted_arr.get(sorted_arr.size() - 1));\n        sorted_arr.remove(sorted_arr.size() - 1);\n        return false;\n      }\n    }\n    return"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd) + \" \" + String.valueOf(even);\n  }\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd) + \" \" + String.valueOf(even);\n}\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return \"\" + odd + \" \" + even;\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd) + \" \" + String.valueOf(even);\n  }\n\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd) + \" \" + String.valueOf(even);\n}\n\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return \"\" + odd + \" \" + even;\n  }\n\n  public static void main(String[] args",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return String.format(\"%d %d\", odd, even);\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd + even);\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for (int i : lst2) {\n      if ((i % 2) == 1)\n        even++;\n    }\n    for (int i : lst1) {\n      if ((i % 2) == 0)\n        odd++;\n    }\n    return \"\" + odd + \" \" + even;\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:    }\n// buggy line:    for(int i : lst1) {\n// buggy line:        if((i % 2) == 0) odd++;\n// buggy line:    }\n    for(int i : lst2) {\n      if((i % 2) == 1) even++;\n    }\n    for(int i : lst1) {\n      if((i % 2) == 0) odd++;\n    }\n    if(odd > even) return \"Odd\";\n    else return \"Even\";\n  }\n}"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.put((char)('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(res.containsKey(c)) {\n            res.put(c, res.get(c) + 1);\n        } else {",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put((char)('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(res.containsKey(c)) {\n            res.put(c, res.get(c) + count_letter[c - '",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put((char)('a' + i), count_letter[i]);\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}\n\npublic static void main(",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put((char)('a' + i), count_letter[i]);\n    }\n    return res;\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:            most_count = count_letter[i];\n// buggy line:        }\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put((char)('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}\n}\n"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i)) != -1) {",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    result.add(c);\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> ret = new ArrayList<Object>();\n    ret.add(new_s);\n    return ret;\n}\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> ret = new ArrayList<Object>();\n    ret.add(new_s);\n    return ret;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static ArrayList<Object> reverse_delete(String s, String c) {",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scan",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    ArrayList<Object> result = new ArrayList<Object>();\n    result.add(new_s);\n    return result;\n}\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += c.charAt(c.indexOf(s.charAt(i)));\n            c = c.substring(c.indexOf(s.charAt(i)) + 1);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s, c);\n}\n\npublic static void main(String[] args) {\n    System.out.println("
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            } else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2 == 0) {\n                n--;\n            } else {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            } else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2 == 0) {\n                n--;\n            } else {\n                n++;\n            }\n        }\n        if(n!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            } else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2!= 0) {\n                n--;\n            } else {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            } else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2 == 0) {\n                n--;\n            } else {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n\npublic static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n// buggy line:            else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2 == 0) {\n                n--;\n            }\n            else {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n// buggy line:            }\n// buggy line:            else {\n// buggy line:                n++;\n// buggy line:            }\n            if(digit % 2 == 0) {\n                n--;\n            }\n            else {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s < min_sum) {\n            min_sum = s;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s = s + num;\n        if(s < min_sum) {\n            min_sum = s;\n        }\n    }\n    return min_",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < min_sum) {\n            min_sum = s;\n        }\n    }\n    return min_sum;",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long sum = 0;\n    for(long num : nums) {\n        sum += num;\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s < max_sum) {\n            max_sum = s;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        if(s < 0) {\n            s = 0;\n        }\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s = s + num;\n        "
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(row_capacity, result);\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) result = row_capacity;\n    }\n    return result;\n}\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) result = row_capacity;\n    }\n    return result;\n}\n}\n"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }",
      "function range": "31,10-42,10",
      "output": [
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n      return o1.compareTo(o2);\n   }\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   } else {\n// buggy line:      return 1;\n// buggy line:   }\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n      return",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   } else if(num_ones_o1 > num_ones_o2) {\n// buggy line:      return 1;\n// buggy line:   }\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   return",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) return -1;\n// buggy line:   else if(num_ones_o1 > num_ones_o2) return 1;\n   } else if(num_ones_o1 < num_ones_o2) return -1;\n   else if(num_ones_o1 > num_ones_o2) return 1;\n   return 0;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   } else if(num_ones_o1 > num_ones_o2) {\n// buggy line:      return 1;\n// buggy line:   }\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   } else {\n// buggy line:      return 1;\n// buggy line:   }\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n      return 1;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n      if(o1.equals(o2)) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   return num_ones_o1 - num_ones_o2;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 > num_ones_o2) {\n// buggy line:      return 1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   }\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   }\n   return",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 > num_ones_o2) {\n// buggy line:      return 1;\n// buggy line:   } else if(num_ones_o1 < num_ones_o2) {\n// buggy line:      return -1;\n// buggy line:   }\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else {\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   } else if(num_ones_o1 > num_ones_o2) {\n// buggy line:      return 1;\n// buggy line:   } else {\n// buggy line:      return -1;\n// buggy line:   }\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}\n}\n"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            for(int k = 0; k < vowels.length; k++) {\n                if(words[i].charAt(j) == vowels[k]) {\n                    num_consonants++;\n                }\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        ",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            for(int k = 0; k < vowels.length; k++) {\n                if(words[i].charAt(j) == vowels[k]) {\n                    num_consonants++;\n                }\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        ",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            for(int k = 0; k < vowels.length; k++) {\n                if(words[i].charAt(j) == vowels[k]) {\n                    num_consonants++;\n                }\n            }\n        }\n        if(num_consonants < n) {\n            result.add(words[i]);\n        ",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            for(int k = 0; k < vowels.length; k++) {\n                if(words[i].charAt(j) == vowels[k]) {\n                    num_consonants++;\n                }\n            }\n        }\n        if(num_consonants > n) {\n            result.add(words[i]);\n        ",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            char c = words[i].charAt(j);\n            for(int k = 0; k < vowels.length; k++) {\n                if(c == vowels[k]) {\n                    num_consonants++;\n                }\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Arrays.asList(vowels).contains(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Arrays.asList(vowels).contains(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Arrays.asList(vowels).contains(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Arrays.asList(vowels).contains(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o'};\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Arrays.asList(vowels).contains(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants <= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n}\n"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(i + 1, word.length());\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(i + 1);\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1, word.length());\n        }\n    }\n    return \"\";\n}\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static String get_closet_consonant(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static String get_closet_consonant(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'd', 'f",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static String get_closet_consonant(String word) {\n    if(word.length() < 2) return \"\";\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'c', 'd",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static String get_closet_consonant(String word) {\n    if(word.length() < 2) return \"\";\n    ArrayList<Character> consonants = new ArrayList<Character>(Arrays.asList('b', 'd', 'f",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static String get_closet_consonant(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i + 1);\n        }\n    }\n    return \"\";\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    for(int i = 0; i < n; i++) {\n        String word = in.next();\n"
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= 0; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for (int i = arr.size() - 1; i >= 0; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= 0; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k + 1; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr.",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    arr.add(1);\n    arr.add(2);\n    arr.add(3);\n    arr.add(4);\n    arr.add(5);\n    arr.add(6);\n    arr."
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) % 2 == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}\n\npublic",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) % 2 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int solution3(ArrayList<Integer> lst) {",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 1) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1 && (lst.get(i) % 2)!= 0) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 0 && (lst.get(i) % 2) == 1) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(i % 2 == 1 && lst.get(i) % 2 == 0) {\n            result++;\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 1) {\n            result++;\n        }\n    }\n    return result;\n}\n\npublic static int solution2(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 1) {\n            result++;\n        }\n    }\n    return result;\n"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        } else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        } else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() > 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n        else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if (Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= Integer.parseInt(Integer.toString(arr.get(i)));\n        }\n    }\n    return result;\n}\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        } else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        } else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        } else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        } else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        } else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        } else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        } else {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        } else {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}\n\n}\n"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        result.add(n);\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n > 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        result.add(n);\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n >= 1",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = (3 * n) + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = (3 * n) + 1;\n        result.add(n);\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n > 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = (3 * n) + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = (3 * n) + 1;\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) {\n            n /= 2;\n        }\n        else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) {\n            n /= 2;\n        }\n        else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        else n = 3 * n + 1;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n        if((n % 2) == 1) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> get_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && day < 1 || day > 31) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 30)) return false;\n            if(month == month_check2[i] && day < 1 || day > 30) return false;\n        }\n        ",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 30)) return false;\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i]) {\n                if(day < 1 || day > 31) return false;\n            }\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 30)) return false;\n            if(month == month_check2[i]) {\n                if(day < 1 || day",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        int[] month_check3 = {2};\n        for(int i = 0; i < month_check3.length; i",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && day < 1 || day > 31) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && day < 1 || day > 30) return false;\n        }\n        int[] month_check3 = {2};\n        for(int i = 0; i < month_check3.length; i++) {",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            if(month == month_check2[i] && (day < 1 || day > 31)) return false;\n        }\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && day < 1 || day > 31) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month == month_check2[i] && day < 1 || day > 30) return false;\n            if(month == month_check2[i] && day < 1 || day > 30) return false;\n        }\n        if(",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i]) {\n                if(day < 1 || day > 31) return false;\n            }\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i]) {\n                if(day < 1 || day > 30) return false;\n            }\n        }\n        int[] month_check3 = {2};\n        for(int i =",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month == month_check1[i] && day < 1 || day > 31) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month == month_check2[i] && day < 1 || day > 30) return false;\n            if(month == month_check2[i] && day < 1 || day > 30) return false;\n        }\n        int[]"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) {\n                result[count] = txt.substring(i, i",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) {\n                result[count++] = txt.substring(i,",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) result[count++] = txt.substring(i",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) {\n            if(Character.isUpperCase(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) result[count++] = \"\" + curr;\n            ",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) result[count++] = Character.toString(curr",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) {\n                result[count] = txt.substring(i, i",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) result[count++] = txt.substring(i, i + 1",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        String[] result = new String[count];\n        count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) result[count++] = String.valueOf(curr",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n        }\n        return new String[count];\n    }\n}\n}\n"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst));\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    if(is_sorted(lst)) {\n        System.out",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst)? \"",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    if(is_sorted(lst)) System.out.println(\"",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(arr));\n}\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] lst = new int[n];\n    for(int i = 0; i < n; i++) {\n        lst[i] = in.nextInt();\n    }\n    System.out.println(is_sorted(lst));\n    ",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n; i++) {\n        arr[i] = in.nextInt();\n    }\n    if(is_sorted(arr)) {\n        System.out.println(\""
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n// correct line:  int l = Math.min(interval1[0], interval2[0]);\n// correct line:  int r = Math.max(interval1[1], interval2[1]);\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.min(interval1",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n        int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        if (l > r) {\n            return \"\";\n        } else {\n            return \"\" + l + \" \" + r;\n        }\n    }\n\n    public",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// correct line:  int l = Math.max(interval1[0], interval2[0]);\n// correct line:  int r = Math.min(interval1[1], interval2[1]);\n        int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        if (l > r) {\n            return \"\";\n        } else {\n            return \"\" + l + \" \" + r;\n        }\n    }\n}\n"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n    }\n    return prod;\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod /= 1;\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod /= 1;\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n\npublic static int prod_signs2(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod /= 1;\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n// buggy line:        else if(arr[i] < 0) prod *= -1;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n    }\n    return prod;\n}\n\npublic static int prod_signs2(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod /= 1;\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] arr = new int[n];\n    for(int i = 0; i < n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod /= 1;\n        else if(arr[i] < 0) prod /= arr[i];\n    }\n    return prod;\n}\n\npublic static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n// buggy line:        else if(arr[i] < 0) prod *= -1;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] > 0) prod *= arr[i];\n// buggy line:        else if(arr[i] < 0) prod *= -1;\n        else if(arr[i] < 0) prod *= -arr[i];\n    }\n    return prod;\n}\n}\n"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] result = new int[k];\n    for(int i = 0",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{val, k};\n}\n}\n",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{val, k};\n}\n\npublic static void main",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] path = new int[k];\n    for(int i = 0",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[] {val, k};\n}\n}\n",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{k, val};\n}\n}\n",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[] {val, k};\n}\n\npublic static void main",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n\npublic static",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{k, val};\n}\n\npublic static void main",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[i][j - 1]);\n            }\n        }\n    }\n    return new int[]{val, i, j};\n}\n}\n"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        }\n        else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0)\n            sequence[i] = i / 2 - 1;\n        else\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    sequence[n - 1] = 1;\n    return sequence;\n}\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    sequence[n - 1] = sequence[n - 2];\n    return sequence;\n}\n}\n"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n > 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while (n > 0) {\n        int digit = n * 10;\n        if (digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while (n > 0) {\n        int digit = n * 10;\n        if (digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args) {\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n > 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count += 1;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count += 1;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[]",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n = n / 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n = n / 10;\n    }\n    return product + odd_count;\n}\n\npublic static void main(String[] args)",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count += 1;\n// buggy line:        }\n// buggy line:        n /= 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count += 1;\n        }\n        n /= 10;\n    }\n    return product + odd_count;\n}\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:        } else {\n// buggy line:            odd_count++;\n// buggy line:        }\n// buggy line:        n = n / 10;\n// buggy line:    }\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        } else {\n            odd_count++;\n        }\n        n = n / 10;\n    }\n    return product + odd_count;\n}\n}\n"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        } else {\n// buggy line:            i++;\n// buggy line:        }\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        } else {\n            i++;\n        }\n    }",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    Collections.reverse(closing_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2 == 1;\n}\n\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.sort(opening_brackets);\n    Collections.sort(closing_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2 == 1;\n}\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return (cnt % 2) == 1;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2!= 0;\n}\n\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2 == 0;\n}\n\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2!= 0;\n}\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            cnt++;\n        }\n        i++;\n    }\n    return cnt % 2 == 0;\n}\n}"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0;\n        for (int i = 0; i < lst.length; i++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        long result = 0;\n        for (int i = 0; i < lst.length; i++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[j])) * (Math.ceil((int) lst[j]));\n        }\n        return result;\n    }\n}\n",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_squared_nums",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n\n    public static long sum_squared_nums(int[] lst) {\n        int result = 0, i",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n\n    public static long sum_nums(double[] lst) {\n        int result = 0, i = 0;",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n        int result = 0, i = 0;\n        for (int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n            i++;\n        }\n        return result;\n    }\n\n    public static long sum_squared_nums(int[] lst) {\n// buggy line:    int result"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(parts[parts.length - 1].charAt(0)) - 'A';\n    return (parts[parts.length - 1].length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    return (last.length() == 1) || (0 <= Character.toUpperCase(last.charAt(0)) || Character.toUpperCase(last.charAt(0)) <= 25);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) -",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(parts[parts.length - 1].charAt(0)) - 'A';\n    return (parts[parts.length - 1].length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts."
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n        int ind = 1;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n        int ind = 1;\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] < arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// correct line:    }\n// correct line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// correct line:    }\n// correct line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// correct line:    }\n// correct line:    return ind;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i]",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n        int ind = 1;\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                ind = i + 1;\n            }\n        }\n        return ind;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// correct line:    }\n// correct line:    return ind;\n\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] <",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n        int ind = 1;\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] < arr[i + 1])\n                ind = i + 1;\n        }\n        return ind;\n    }\n}\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n\n    int ind = 1;\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < arr[i + 1]) {\n            ind = i + 1;\n        }\n    }\n    return ind;\n}\n}\n",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// correct line:    int ind = 1;\n// correct line:    for(int i = 0; i < arr.length - 1; i++) {\n// correct line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// correct line:    }\n// correct line:    return ind;\n\n    int ind = 1;\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] <"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    } else if(positive) {\n// buggy line:        return new int[]{max_negative, min_positive};",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    } else {\n// buggy line:        return new int[]{max_negative, min_positive};\n// buggy line",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    }\n// buggy line:    else if(positive) {\n// buggy line:        return",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    }\n// buggy line:    return new int[]{max_negative, min_positive};\n",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    }\n// buggy line:    else {\n// buggy line:        return new int[]{",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    } else {\n// buggy line:        return new int[]{max_negative, min_positive",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    }\n// buggy line:    return new int[]{max_negative, min_positive};",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative && positive) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    }\n// buggy line:    else if(negative) {\n// buggy line:",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        }\n// buggy line:        else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative && positive) {\n// buggy line:        return new int[]{max_negative, min_positive};\n// buggy line:    }\n// buggy line:    else if(negative) {\n// buggy line:",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        return new int[]{min_positive, max_negative};\n// buggy line:    } else if(positive) {\n// buggy line:        return new int[]{max_positive, min_negative};"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Float) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Float",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Long) temp_a = (Double) a;\n    if(b instanceof Long) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = (Double) a;\n    ",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = ((Integer) b).floatValue();\n    if(b instanceof Float) temp_b = ((Integer) a).floatValue();\n    if(a instanceof Float",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = (Double) a;\n    if(b instanceof Float) temp_b = (Double) b;\n    if(a instanceof Long) temp_a = (Double) a;\n    ",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Long) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Long) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Float",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = (Double) a;\n    if(b instanceof Float) temp_b = (Double) b;\n    if(a instanceof Long) temp_a = (Double) a;\n    ",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = ((Float) a).doubleValue();\n    if(b instanceof Float) temp_b = ((Float) b).doubleValue();\n    if(a instanceof Long",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Float) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Float) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Long",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n    if(a instanceof Long) temp_a = ((Long) a).doubleValue();\n    if(b instanceof Long) temp_b = ((Long) b).doubleValue();\n    if(a instanceof Float",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n    if(a instanceof Float) temp_a = ((Float) a).doubleValue();\n    if(b instanceof Float) temp_b = ((Float) b).doubleValue();\n    if(a instanceof Long"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n * 2 + 1 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd_even(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return ((n * 2 + 1 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd_even(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return ((",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n * 2 + 1 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return ((n * 2 + 1 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return ((",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n * 2 + 1 == 1) ^ (n < 8);\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2!= 1) ^ (n < 8));\n        return (n * 2!= 1) ^ (n < 8);\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2!= 1) ^ (n < 8));\n        return ((n * 2!= 1) ^ (n < 8));\n    }\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n * 2 + 1 == 1) ^ (n < 8);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(is_equal_to_sum_even(1));\n        System.out.println(is_equal_to_sum",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return (n * 2 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n * 2 + 1 == 1) ^ (n < 8);\n    }\n\n    public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 + 1 == 1) ^ (n < 8));\n        return (n *"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i > 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n\npublic static long special_factorial2(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    System.out.println(special_factorial(1));\n    System.out.println(special_factorial(2));\n    System.out.println(special_factorial(3));\n    System.out.println(special_factorial(4",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n\npublic static long special_factorial2(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    System.out.println(special_factorial(1));\n    System.out.println(special_factorial(2));\n    System.out.println(special_factorial(3));\n    System.out.println(special_factorial(4",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for (long i = n; i > 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}\n\npublic static void main(String[] args) {\n    System.out.println(special_factorial(1));\n    System.out.println(special_factorial(2));\n    System.out.println(special_factorial(3));\n    System.out.println(special_factorial(4"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text.substring(0, new_text.length() - 1);\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text.substring(0, new_text.length() - 1);\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text.substring(0, new_text.length() - 1);\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text.substring(0, new_text.length() - 1);\n}\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n\npublic static void main(String",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n//            return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z')\n        return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    return \"Yes\";\n}\n\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[1].charAt(0) && lst[1].charAt(0) > 'z' || 'A'",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    if ('a' > lst[1].charAt(0) && lst[1].charAt(0) > 'z' || 'A' > lst[",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}\n}\n",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A'",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}\n\n}\n"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 2 == 0)\n            result += lst[i] * lst[",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i];\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i];\n        else if",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        if (i % 4 == 0)\n            result",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        result += lst[i] * lst[",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        if (i % 4 == 0) {\n            ",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        if (i % 2 == 0)\n            result",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        if (i % 4 == 0) result += l",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n        result += lst[i];\n    }\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n        result += lst[i] * lst[i];\n    }\n    return result;\n}\n}\n"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i)!= word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (word.charAt(i) =='') {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i) == word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i) =='') {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i)!= word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1){\n            if (Character.isUpperCase(word.charAt(i))) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1){\n            if (word.charAt(i) =='') {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i)!= word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i)!= word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    System.out.println(words_in_sentence(\"",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 1; i < word.length(); i += 1) {\n            if (word.charAt(i)!= word.charAt(i - 1)) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            result += word + \" \";\n        }\n    }\n    return result.substring(0, result.length() - 1);\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == numerator / denom) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (long) (numerator / denom)) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) return true;\n    return numerator / denom == (int) (numerator / denom);\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == numerator / denom) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator == denom) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator % denom == 0) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if ((numerator / denom) == (int) (numerator / denom)) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator % denom == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n        }\n    }\n}\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n            digits.add(digit);\n            digits_number.put(digit, new ArrayList",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n            digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0');\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(i);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < result.length; i += 1){\n        result[i] = digits.get(i);\n    }\n    return result;\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n            digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0');\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(i);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size(); i += 1){\n        result[i] = digits.get(i);\n    }\n    return result;\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n            digit += ((",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n            digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0');\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(i);\n    }\n    Integer[] result = new Integer[digits.size()];\n    for (int i = 0; i < digits.size",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n        }\n    ",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(neg);\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n        digits_number.put(digit,",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n            digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0');\n        }\n        digits.add(digit);\n        digits_number.put(digit, new ArrayList<Integer>());\n    }\n    for (int i = 0; i < digits.size(); i += 1){\n        digits_number.get(digits.get(i)).add(i);\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits."
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))\n                    && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))\n                && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))\n                    && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1, number_as_string.length())))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))\n                    && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))\n                && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n}\n"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[i] * A[j] * A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[i] * A[j] * A[k];\n            }\n        }\n    }",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[i] * A[j] * A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[i] * A[j] * A[k];\n            }\n        }\n    }",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result = Math.max(result, A[i] * A[j] * A[k]);\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result = Math.max(result, A[i] * A[j] * A",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result = Math.max(result, A[i] * A[j] * A[k]);\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result = Math.max(result, A[i] * A[j] * A",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[j] * A[k] * A[j + k + 1];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[j] * A[k] * A[j + k + 1];\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[i] * A[j] * A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-1; i += 1) {\n        for (int j = i + 1; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[i] * A[j] * A[k];\n            }\n        }\n    }",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[i] * A[j] * A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-1; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[i] * A[j] * A[k];\n            }\n        }\n    }\n    ",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[i] * A[j] * A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1)\n                result += A[i] * A[j] * A[k];\n        }\n    }\n    return result",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[k];\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:                result += A[k];\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                result += A[k];\n            }\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i <= planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i <= planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n// buggy line:        for (int i = planet2_index; i < planet1_index; i += 1)\n// buggy line:            result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    for (int i = planet2_index; i < planet1_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n// buggy line:        for (int i = planet2_index; i < planet1_index; i += 1)\n// buggy line:            result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    for (int i = planet2_index; i < planet1_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n// buggy line:        for (int i = planet2_index; i < planet1_index; i += 1)\n// buggy line:            result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    for (int i = planet2_index; i < planet1_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}\n\n"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        (s1, s2) -> s1.length() - s2.length()\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        (s1, s2) -> s1.length() - s2.length()\n    );\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        (s1, s2) -> Integer.compare(s1.length(), s2.length())\n    );\n    return result;\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n    return result;\n}\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        (s1, s2) -> Integer.compare(s1.length(), s2.length())\n    );\n    return result;\n}\n}\n"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 1));\n    System.out.println(x_or_y(2, 1, 1));\n    System.out.println(x_or_y(3, 1, 1));\n    System.out.println(x_or_y(4, 1, 1));\n    System.out.println(x_or_y",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 2));\n    System.out.println(x_or_y(2, 1, 2));\n    System.out.println(x_or_y(3, 1, 2));\n    System.out.println(x_or_y(4, 1, 2));\n    System.out.println(x_or_y",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 1));\n    System.out.println(x_or_y(2, 1, 2));\n    System.out.println(x_or_y(3, 1, 3));\n    System.out.println(x_or_y(4, 1, 4));\n    System.out.println(x_or_y",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) {\n            return x;\n        }\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 1));\n    System.out.println(x_or_y(2, 1, 1));\n    System.out.println(x_or_y(3, 1, 1));\n    System.out.println(x_or_y(4, 1, 1));\n    System.out.println",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) {\n            return x;\n        }\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 2));\n    System.out.println(x_or_y(2, 1, 2));\n    System.out.println(x_or_y(3, 1, 2));\n    System.out.println(x_or_y(4, 1, 2));\n    System.out.println",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 1));\n    System.out.println(x_or_y(2, 2, 2));\n    System.out.println(x_or_y(3, 3, 3));\n    System.out.println(x_or_y(4, 4, 4));\n    System.out.println(x_or_y",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(3, 1, 2));\n    System.out.println(x_or_y(4, 1, 2));\n    System.out.println(x_or_y(5, 1, 2));\n    System.out.println(x_or_y(6, 1, 2));\n    System.out.println(x_or_y",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n}\n\npublic static void main(String[] args) {\n    System.out.println(x_or_y(1, 1, 1));\n    System.out.println(x_or_y(1, 1, 2));\n    System.out.println(x_or_y(1, 2, 1));\n    System.out.println(x_or_y(1, 2, 2));\n    System.out.println(x_or_y"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result++;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result = result + d_int;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += 1;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int / 2;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int + 1;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += (d_int + 1) / 2;\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += (d_int + 1) / 2;\n            }\n        }\n    }\n    return result;\n}\n"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i] / guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = game[i] / guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = (game[i] / guess[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = (game[i] / guess[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i] / guess[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    for (int i = 0; i < n; i += 1) {\n      game[i] = in.nextInt();\n    }\n    int[] guess = new int[n];\n    for (int i = 0; i",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i] / guess[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] game = new int[n];\n    for (int i = 0; i < n; i += 1) {\n      game[i] = scanner.nextInt();\n    }\n    int[] guess = new int[n];\n    for (int i = 0; i",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = (game[i] / guess[i]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    for (int i = 0; i < n; i += 1) {\n      game[i] = in.nextInt();\n    }\n    int[] guess = new int[n];\n    for (int i = 0;",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = (int) Math.floor(game[i] / guess[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i] / guess[i];\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] game = new int[n];\n    int[] guess = new int[n];\n    for (int i = 0; i < n; i += 1) {\n      game[i] = in.nextInt();\n      guess[i] = in.nextInt();",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = (game[i] / guess[i]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] game = new int[n];\n    for (int i = 0; i < n; i += 1) {\n      game[i] = scanner.nextInt();\n    }\n    int[] guess = new int[n];\n    for (int i = 0;"
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n        }\n        if (val > CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        if (val < CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n// buggy line:        if (val > val) {\n// buggy line:            val = CAP - SM;\n// buggy line:            strong = s;\n// buggy line:        }\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) {\n                SM += 1;\n            }\n            if (Character.toLowerCase(c) == c) {\n                CAP += 1;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) {\n                SM += 1;\n            }\n            if (Character.toLowerCase(c) == c) {\n                CAP += 1;\n            }\n        }\n        if (val > CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.isUpperCase(c)) {\n                SM += 1;\n            } else if (Character.isLowerCase(c)) {\n                CAP += 1;\n            }\n        }\n        if (val < CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) {\n                SM += 1;\n            }\n            if (Character.toLowerCase(c) == c) {\n                CAP += 1;\n            }\n        }\n        if (val < CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        if (val < CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return strong;\n}\n\n}\n",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            if (Character.toUpperCase(c) == c) {\n                SM += 1;\n            }\n            if (Character.toLowerCase(c) == c) {\n                CAP += 1;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return strong;\n}\n\n}\n"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i) == pat.charAt(j)) {\n// buggy line:                return true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.charAt(i) == b.charAt(j)) {\n                return true;\n            }\n        }\n    }\n    ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i)!= pat.charAt(j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.charAt(i)!= b.charAt(j)) {\n                return false;\n            }\n        }\n    }\n    ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i) == pat.charAt(j)) {\n// buggy line:                return true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < l; j++) {\n            if (a.charAt(i) == b.charAt(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i)!= pat.charAt(j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < l; j++) {\n            if (a.charAt(i)!= b.charAt(j)) {\n                return false;\n            }\n        }\n    }\n    return true;\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i + j)!= pat.charAt(j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.charAt(i + j)!= b.charAt(j)) {\n                return false;\n            }\n        }\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (pat.charAt(j)!= a.charAt(i + j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (b.charAt(j)!= a.charAt(i + j)) {\n                return false;\n            }\n        }\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i + j)!= pat.charAt(j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < l; j++) {\n            if (a.charAt(i + j)!= b.charAt(j)) {\n                return false;\n            }\n        }\n    }\n    ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (a.charAt(i) == pat.charAt(j)) {\n// buggy line:                return true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return false;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.charAt(i) == b.charAt(j)) {\n                return true;\n            ",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (pat.charAt(j)!= a.charAt(i + j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.charAt(i + j)!= b.charAt(j)) {\n                return false;\n            }\n        }\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:            if (pat.charAt(j)!= a.charAt(i + j)) {\n// buggy line:                return false;\n// buggy line:            }\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (b.charAt(j)!= a.charAt(i + j)) {\n                return"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (int c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n}\n\npublic static void main(String[] args) {\n    System.out.println(even_odd_count(1));\n    System.out.println(even_odd_count(2));\n    System.out.println(even_odd"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        } else {\n            i--;\n        }\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        } else {\n            i--;\n        }\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      if (number >= num[i]) {\n        result += sym[i];\n        number -= num[i];\n      } else {\n        i--;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        } else {\n            i -= 1;\n        }\n    }\n    return result;\n}\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        }\n        i--;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_mini_roman(9",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_mini_roman(9",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        } else {\n            i--;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        if (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        } else {\n            i--;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(int_to_mini_roman(1));\n    System.out.println(int_to_mini_roman(4));\n    System.out.println(int_to_mini_roman(5));\n    System.out.println(int_to_"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return (a*a + b*b) == c*c;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n// correct line: return (a*a + b*b) == c*c;\n        return (a*a + b*b) == c*c;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b || c*c + b*b == a*a;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            ",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n// correct line:  return (a*a + b*b) == c*c;\n        return (a*a + b*b) == c*c;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b || c*c + b*b == a*a;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            ",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a * a + b * b == c * c;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b || c*c + b*b == a*a;\n    }\n}\n",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b || c*c + b*b == a*a;\n// buggy line:    return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b || c*c + b*b == a*a;\n// buggy line:    return a*a + b*b == c*c || a*a",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c || a*a + c*c == b*b || c*c + a*a == b*b;\n    }\n}\n"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(0);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(0);\n}\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size()-1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() < s2.size()? -1 : s1.size() > s2.size()? 1 : 0;\n        }\n    );\n    return words_list.get(0);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() < s2.size()? -1 : s1.size() > s2.size()? 1 : 0;\n        }\n    );\n    return words_list.get(0);\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() < s2.size()? -1 : s1.size() > s2.size()? 1 : 0;\n        }\n    );\n    return words_list.get(0);\n}\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() < s2.size()? -1 : s1.size() > s2.size()? 1 : 0;\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = 0;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number;\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = number;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number;\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = number - need;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = need;\n        return result;\n    }\n\n    public static int[] eat(int number) {\n        int[] result = new int[2];\n        result[0] = number;\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need) {\n// buggy line:    return new int[] {number + need,  number - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = number - need;\n        return result;\n    }\n\n    public static int[] eat(int number)",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2];\n        result[0] = number + need;\n        result[1] = remaining - need;\n        return result;\n    }\n\n    public static int[] eat(int number, int need, int remaining) {\n        int[] result = new int[2",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = remaining - need;\n        return ret;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = 0;\n        return ret;\n    }\n\n    public static int[] eat(int number) {\n        int[] ret = new int[2];\n        ret[0] = number;\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = remaining - need;\n        return ret;\n    }\n\n    public static int[] eat(int number, int need) {\n        int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = number;\n        return ret;\n    }\n\n    public static int[] eat(int number) {\n        int[] ret = new int[2];\n        ret[0] = number;\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = remaining - need;\n        return ret;\n    }\n}\n"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return engine.eval(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return (Double) engine.eval(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return (Double) engine.eval(expression);\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(expression);\n}\n\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return (Double.parseDouble(expression));\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return ((Number) engine.eval(expression)).doubleValue();\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return (Double) engine.eval(expression);\n}\n\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    try {\n        return (Double) engine.eval(expression);\n    } catch (ScriptException e) {\n        throw e;\n    }\n}\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n// buggy line:    return Double.parseDouble(expression);\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return ((Number) engine.eval(expression)).doubleValue();\n}\n\n}\n"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n        } else {\n            sb.append(Character.toLowerCase(c));\n        }\n    }\n    return sb.toString();\n}\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLower",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n        } else if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpper",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n        if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        } else if (flg == 0) {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb.append(Character.toUpperCase(s.charAt(0)));\n    }\n    return",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n        else sb.append(Character.toUpperCase(c));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n// buggy line:        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n// buggy line:        else sb.append(Character.toUpperCase(c));\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase("
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        String hex = Integer.toHexString(0xff & digest[i]);\n        if (hex.length() == 1) hexString.append('0');\n        hexString.append(hex);\n    }\n    return hexString.toString();\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n      sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n      sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16)\n         .substring(1));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16)\n               .substring(1));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes(), 0, text.length());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n}\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes(), 0, text.length());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n}\n\npublic static String string_",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n      sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16)\n         .substring(1));\n    }\n    return sb.toString();\n  }\n\n  public static String string_to_",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes(), 0, text.length());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n}\n\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        String hex = Integer.toHexString(0xff & digest[i]);\n        if (hex.length() == 1) hexString.append('0');\n        hexString.append(hex);\n    }\n    return hexString.toString().to",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n    md.update(text.getBytes(), 0, text.length());\n    byte[] digest = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < digest.length; i++) {\n        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n}\n\npublic static void main("
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i++) {\n        result.add(i);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> generate_integers(int a, int b, int c) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i++) {\n        result.add(i);\n    }\n    return result;\n}\n\npublic static ArrayList<Integer> generate_integers(int a, int b, int c) {\n// buggy line:    int lower = Math.max(2, Math.max(a, b));\n// buggy line:",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <=",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static ArrayList<Integer> generate_integers(int a, int b, int c) {\n        ArrayList<Integer> result = generate_integers(a, b);\n        result.addAll(generate"
      ]
    }
  },
  "model": "codegen-6B-multi",
  "time": 13832
}