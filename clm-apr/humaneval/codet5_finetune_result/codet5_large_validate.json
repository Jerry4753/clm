{
  "config": "finetune",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n</s>            double distance = numbers.get(i) - numbers.get(j);\n</s>            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "            double distance = numbers.get(j) - numbers.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = numbers.get(i) - numbers.get(j);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = numbers.get(i) + numbers.get(j);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = numbers[i] - numbers[j];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            double distance = (numbers.get(i) - numbers.get(j));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = numbers.get(i) * numbers.get(j);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = numbers.get(j - i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            double distance = j - i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n</s>        } else {\n</s>            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        } else if (c == ')'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        } else if (c == ')') {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        }\n        if (c == ')'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        }\n        if (c == ')') {\n",
          "correctness": "plausible"
        },
        {
          "patch": "            continue;\n        } else if (c == ')'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        } else if (c == ')' || c == ','){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        } else if (c!= ')'){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        }\n        else if (c == ')'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        } else if (c == ')' || c == ')'){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        } else if (c == ')' || c == '('){\n",
          "correctness": "plausible"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n</s>    return number / 1.0;\n</s>}\n",
      "output": [
        {
          "patch": "    return number;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return number * 1.0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return truncate_number(number);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return number / 100.0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Math.round(number);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return truncate(number);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return number * 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return number - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n</s>        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n</s>}\n",
      "output": [
        {
          "patch": "    }\n    return balance > 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return balance >= 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return balance < 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return balance <= 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return balance == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return balance!= 0;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    }\n    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n</s>        deviation_sum += (number - mean) * (number - mean);\n</s>    }\n    return deviation_sum / numbers.size();\n}\n",
      "output": [
        {
          "patch": "        deviation_sum += (number - mean) * (number - mean);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += (number - mean) * (number - mean - mean);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += ((number - mean) * (number - mean));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += (number - mean) * number;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += (number - mean);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += Math.abs(number - mean);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        deviation_sum += number * (number - mean);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        deviation_sum += number * number;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n</s>    for (int i = 0; i < numbers.size(); i += 1) {\n</s>        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < numbers.size() - 1; i++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = 1; i < numbers.size(); i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < numbers.size(); i += 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < numbers.size(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i <= numbers.size(); i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < numbers.size(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i <= numbers.size(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= numbers.size() - 1; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n</s>            }\n</s>        }\n        result.add(max_depth);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "            } else if (c == ')'){\n                max_depth += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            } else\n                result.add(depth);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else {\n                result.add(depth);\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (c == ')'){\n                result.add(depth);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else\n                break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                continue;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                break;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n</s>        result.add(string);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (substring.equals(string)) {\n            result.add(string);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.startsWith(substring)) {\n            result.add(string);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (substring.equals(string)){\n            result.add(string);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.startsWith(substring)){\n            result.add(string);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.contains(substring)){\n            result.add(string);\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string.contains(substring)) {\n            result.add(string);\n        }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string.startsWith(substring))\n            result.add(string);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (substring.equals(string))\n            result.add(string);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(substring.length()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n</s>    Integer[] result = new Integer[2];\n</s>    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    Integer[] result = new Integer[numbers.size()];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Integer[] result = new Integer[3];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int[] result = new int[2];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    List<Integer> result = new ArrayList<Integer>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Integer[] result = new Integer[2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Integer[] result = new Integer[4];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Integer[] result = new Integer[1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Integer[][] result = new Integer[2][];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int result = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int sum = 0;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n</s>        running_max = Math.max(running_max, n);\n</s>        result.add(running_max);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        running_max = Math.min(running_max, n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        running_max = Math.max(n, running_max);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        running_max = Math.max(running_max, n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        running_max = Math.max(running_max, n + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        running_max = Math.max(running_max, n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        runningMax = Math.max(runningMax, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        running_max = n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        running_max = Math.max(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n</s>    result += str.substring(0, beginning_of_suffix);\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "    result = result.substring(0, beginning_of_suffix);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += str.substring(beginning_of_suffix);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result = str.substring(0, beginning_of_suffix);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += str.substring(beginning_of_suffix + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += result.substring(beginning_of_suffix);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += str.substring(beginning_of_suffix).toUpperCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result = result.substring(beginning_of_suffix);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += str.substring(beginning_of_suffix).toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result += \"String_Node_Str\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n</s>    }\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += a.charAt(i);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } catch (Exception e) {\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } else\n        result += \"0\";\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }.toString();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    };\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n</s>        if (strings.size() > string.length()){\n            maxlen = strings.size();\n</s>        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}\n",
      "output": [
        {
          "patch": "        if (string.length() > maxlen){\n            maxlen = string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string!= null && string.length() > maxlen){\n            maxlen = string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        int length = string.length();\n        if (length > maxlen){\n            maxlen = length;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string.length() > maxlen){\n            maxlen = string.length();\n            break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (strings.size() >= string.length()){\n            maxlen = strings.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.length() > maxlen) {\n            maxlen = string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string.length() > maxlen){\n            maxlen = strings.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.length() >= maxlen){\n            maxlen = string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (string.length() == maxlen){\n            return string;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n</s>        a = b;\n        b = a % b;\n</s>    }\n    return a;\n}\n",
      "output": [
        {
          "patch": "        a = a % b;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        a = (a + b) % b;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        b = b % a;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        b = a % b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        a = a % b;\n        b = b;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        a = (a * b) % b;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        b = a % b;\n        a = b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        a = b % a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        a = (a % b);\n",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "timeout"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n</s>        result.add(string.substring(i + 1));\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result.add(string.substring(i, i + 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(0, i + 1));\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result.add(string.substring(0, i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(i, string.length()));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(i, i + 2));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(i).toLowerCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(string.substring(i + 1, i + 2));\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n</s>    return result;\n</s>}\n",
      "output": [
        {
          "patch": "    return result.trim();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return \"String_Node_Str\" + result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.substring(result.length() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.substring(0, n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.toString();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.substring(0, n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.substring(result.length() - n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.replaceAll(\"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result.toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.toUpperCase();\n",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n</s>            distinct.add(c);\n</s>    }\n    return distinct.size();\n}\n",
      "output": [
        {
          "patch": "            distinct.add(Character.toLowerCase(c));\n",
          "correctness": "plausible"
        },
        {
          "patch": "            distinct.add(c.toLowerCase());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            distinct.add(Character.toUpperCase(c));\n",
          "correctness": "plausible"
        },
        {
          "patch": "            distinct.add(Character.valueOf(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            distinct.add(Character.getLowerCase(c));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            distinct.add((char) c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            distinct.add(Character.toString(c));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            distinct.addIgnoreCase(c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n</s>    for (String note : music_string.split(\" \")){\n</s>        result.add(note_map.get(note));\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (String note : music_string.split(\"\\\\s\")){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.trim().split(\" \")){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.split(\" \")){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music.split(\" \")){\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (String note : music_string.split(\" \")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.split(\", \")){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.split(\"|\")){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.split(SPACE)){\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (String note : music_string.split(\"\\\\s\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String note : music_string.trim().split(\" \")) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n</s>    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n</s>        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < string.length(); i += substring.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= string.length() - substring.length(); i += 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = 0; i < substring.length(); i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < string.length() && i < substring.length(); i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < string.length() - substring.length(); i += substring.length()) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < string.length() + substring.length(); i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= string.length() - substring.length(); i++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n</s>    Collections.sort(number_array);\n</s>    \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}\n",
      "output": [
        {
          "patch": "    Collections.sort(number_array, value_map);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(number_array, new NumberComparator());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(value_map, number_array);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    number_array.sort(value_map);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(number_array, new IntegerComparator());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(number_array, new NumberSorter());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(value_map);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.sort(number_array);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sort(number_array);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n</s>        for (int j = 0; j < numbers.length; j += 1){\n</s>            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        for (int j = i + 1; j < numbers.length; j += 1){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = i; j < numbers.length; j += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length; j += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length - 1; j += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i + 1; j <= numbers.length; j += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i + 1; j < numbers.length; j++){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = i; j < numbers.length; j++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length; j++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length - 1; j++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < i; j += 1){\n",
          "correctness": "plausible"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n</s>        else if (numbers[i] < min) {\n</s>            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (numbers[i] < min)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        else if (numbers[i] < min)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        else if (numbers[i] < min && numbers[i] > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (numbers[i] < min) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        else if (numbers[i] < min && numbers[i]!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (numbers[i] < min) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (numbers[i] < min && numbers[i] >= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (numbers[i] < min && numbers[i] > 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n</s>        result.add((Integer) value);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result.add(Integer.valueOf((String) value));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (value instanceof Integer)\n            result.add((Integer) value);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result.add(Integer.valueOf(value));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result.add(value == null? 0 : (Integer) value);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((Integer) value.toString());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result.add(Integer.valueOf((Integer) value));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(Integer.valueOf((String)value));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((Number) value);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n</s>    return string.length() - 1;\n</s>}\n",
      "output": [
        {
          "patch": "    return string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return string == null? 0 : string.length() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return string == null? -1 : string.length() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return string!= null? string.length() - 1 : 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return string!= null? string.length() - 1 : -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return string == null? -1 : string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return string.length() + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return string == null? 0 : string.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return string.length() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n</s>    for (int i = n; i >= 0; i -= 1){\n</s>        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\n",
      "output": [
        {
          "patch": "    for (int i = n; i > 0; i -= 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = n - 1; i >= 0; i--){\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = n; i > 0; i--){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < n; i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= n; i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = n; i >= 0; i -= 2){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = n; i >= 0; i -= 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = n; i >= 0; i--){\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n</s>    return result;\n</s>}\n",
      "output": [
        {
          "patch": "    return Collections.unmodifiableList(result);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new ArrayList<Integer>(result);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return result.toArray(new Integer[0]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result.toArray(new int[0]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result.get(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result.iterator();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result.reverse();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n</s>        count.put(n, count.get(n) + 1);\n</s>    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        count.put(n, count.get(n) - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, count.get(n) + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, count.get(n) + 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, count.get(n) + 1 - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, count.get(n) + 1.0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        count.put(n, count.get(n) + 1, n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        count.put(n, count.get(n));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, n + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        count.put(n, 1);\n",
          "correctness": "wrong"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n</s>            char_list[i] = Character.toLowerCase(c);\n        }\n        else {\n            char_list[i] = Character.toUpperCase(c);\n</s>        }\n    }\n    return new String(char_list);\n}\n",
      "output": [
        {
          "patch": "            char_list[i] = Character.toUpperCase(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            char_list[i] = Character.toLowerCase(c).toUpperCase();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            char_list[i] = Character.toLowerCase((char) c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            char_list[i] = Character.toLowerCase(c.toUpperCase());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            char_list[i] = c.toLowerCase();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            char_list[i] = Character.toLowerCase(c.toLowerCase());\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            char_list[i] = c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            c = Character.toLowerCase(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            Character.toLowerCase(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "            continue;\n",
          "correctness": "wrong"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n</s>    String result = null;\n</s>    for (String string : strings)\n        result += string;\n    return result;\n}\n",
      "output": [
        {
          "patch": "    StringBuilder result = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuffer result = new StringBuffer();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuilder resultBuilder = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuilder result = new StringBuilder(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String result = StringUtils.EMPTY;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuilder result = null;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuilder builder = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    StringBuilder result = new StringBuilder(128);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String result;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n</s>        if (string.startsWith(prefix, 1)){\n</s>            result.add(string);\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (string.startsWith(prefix)){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (prefix!= null && string.startsWith(prefix, 1)){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string!= null && string.startsWith(prefix, 1)){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.startsWith(prefix, 0)){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (prefix == null || string.startsWith(prefix, 1)){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (string.startsWith(prefix)) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (prefix.equals(string)){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (prefix!= null && string.startsWith(prefix)){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (prefix == null || string.startsWith(prefix)){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (prefix!= null && string.startsWith(prefix, 1)) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n</s>        result.add(number);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result.add(number > 0? number : 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(Math.abs(number));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(number.intValue());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(number < 0? 0 : number);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(-number);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(number - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(number > 0? number : 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n</s>    for (int k = 0; k < n; k += 1){\n</s>        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "    for (int k = 1; k < n; k += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 1; k <= n; k += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 1; k <= n; k++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 1; k < n; k++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 2; k < n; k += 1){\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int k = 0; k < n; k++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 2; k <= n; k += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 0; k < n; k += 2){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int k = 0; k <= n; k += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n</s>        if (poly(xs, begin) * poly(xs, end) < 0) {\n</s>            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
      "output": [
        {
          "patch": "        if (poly(xs, center) * poly(xs, center) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, begin) * poly(xs, center) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, center) * poly(xs, begin) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, center) * poly(xs, end) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, center) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, begin) - poly(xs, end) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, begin) + poly(xs, end) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, begin) * poly(xs, center) > 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (poly(xs, begin) * poly(xs, center) <= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (poly(xs, center) * poly(xs, center) > 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n</s>            result.add(thirds.get(i));\n</s>        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "            result.add(l.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add(thirds.get(i - 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add(thirds.get(i + 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add(thirds.get(i - 3));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add(thirds[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            result.add(thirds.get(i - 2));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add((int) thirds.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "            result.add(l[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            result.add(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n</s>        result.add(n);\n</s>    }\n    Collections.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result.add(n.intValue());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n % l.size());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(Math.abs(n));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((int) n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.addAndGet(n);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result.add(n % 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n</s>    int m = 0;\n</s>    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}\n",
      "output": [
        {
          "patch": "    int max = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int m = -1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int max = -1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int m;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_element = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int m = l.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max = l.size();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int n = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n</s>            for (int j = 0; j < i + \"\".length(); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n</s>                    result += 1;\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j += 1){\n                if (i + \"7\".substring(j, j + 1) == \"7\")\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j++){\n                if (i + \"7\".substring(j, j + 1) == \"7\")\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j++) {\n                if (i + \"7\".substring(j, j + 1) == \"7\")\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < \"7\".length(); j += 1){\n                if (i + \"7\".substring(j, j + 1) == \"7\")\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < i; j += 1){\n                if (i + \"7\".substring(j, j + 1) == \"7\")\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j += 1){\n                if (i + \"7\".charAt(j) == '0')\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j++){\n                if (i + \"7\".substring(j, j + 1) == \"7\") {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            for (int j = 0; j < i + \"7\".length(); j++) {\n                if (i + \"7\".substring(j, j + 1) == \"7\") {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n</s>    int[] evens = new int[1 + (int) (l.length / 2.)];\n</s>    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    int[] evens = new int[l.length / 2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int[] evens = new int[1 + (int) (l.length / 2)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int[] evens = new int[1 + l.length / 2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int[] evens = new int[1 + l.length / 2.];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int[] evens = new int[l.length / 2.];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int[] evens = new int[(int) (l.length / 2.0)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int[] evens = new int[1 + (l.length / 2.0)];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int[] evens = new int[1 + (int) l.length / 2.];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int[] evens;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n</s>    for (int i = 0; i < s.length(); i += 3){\n</s>        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < s.length() - 3; i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < s.length() / 3; i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < s.length(); i += 4){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < s.length(); i += 2){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < s.length(); i += 3){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i <= s.length(); i += 3){\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < s.length() - 3; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < s.length() / 3; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n</s>        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1)))\n</s>            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}\n",
      "output": [
        {
          "patch": "        if (is_prime(fib.get(len - 1)))\n",
          "correctness": "timeout"
        },
        {
          "patch": "        if (is_prime(fib.get(len - 1) + fib.get(len)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        fib.add(fib.get(len));\n        if (is_prime(fib.get(len)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (is_prime(fib.get(len - 1))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (isPrime(fib.get(len - 1)))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (is_prime(fib.get(len)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (len > 1)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (len > 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n</s>        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n</s>                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length; j += 1) {\n            for (int k = 0; k < numbers.length; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j - 1; k >= 0; k--) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j - 1; k >= 0; k -= 1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length; j += 1) {\n            for (int k = i; k < numbers.length; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int k = i; k < numbers.length; k += 1) {\n            for (int j = k; j < numbers.length; j += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n</s>    return n;\n</s>}\n",
      "output": [
        {
          "patch": "    return car_race_collisions[n];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return car_race_collision(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return car_race_collision;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return n - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return car_race_collision[n];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return car_races[n];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return -n;\n",
          "correctness": "wrong"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n</s>        result.add(n - 1);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result.add(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n + 1);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result.add(n);\n        result.add(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((n - 1) + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((int) n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n.intValue());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (n > 0)\n            result.add(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n);\n        result.add(0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add((int) n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result.add(n - 1);\n",
          "correctness": "wrong"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n</s>        for (int j = 0; j < l.size(); j += 1){\n</s>            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "        for (int j = i + 1; j < l.size(); j += 1){\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = i; j < l.size(); j += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i; j < l.size(); j++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < l.size(); j += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = i; j < l.size(); j += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < l.size(); j++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < l.size() - 1; j++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = i + 1; j < l.size(); j++) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for (int j = 0; j < l.size() - 1; j++){\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n</s>        result = result + x % base;\n        x = x - x / base;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result = result + (x % base);\n        x = x / base;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = result + base * x;\n        x = x - base * x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = result + base * x;\n        x = x % base;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        result = result + (x % base);\n        x = x - x / base;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        result = result + x / base;\n        x = x % base;\n",
          "correctness": "timeout"
        },
        {
          "patch": "        result = result + x % base;\n        x = x / base;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = result + (x % base) + \"String_Node_Str\";\n",
          "correctness": "timeout"
        },
        {
          "patch": "        result = result + (x % base);\n",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n</s>    return a * h;\n</s>}\n",
      "output": [
        {
          "patch": "    return a * h * h;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return h * a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Math.abs(a * h);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * h * 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a + h;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * h + h * h;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a * h);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Math.sqrt(a * h);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return Math.abs(a - h);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n</s>    }\n</s>    return result.get(result.size() - 1);\n}\n",
      "output": [
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } while (result.size() < n + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } else\n        result.add(0);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } catch (ArrayIndexOutOfBoundsException e) {\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result.add(0);\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } while (result.size() < n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } catch (ArrayIndexOutOfBoundsException e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n</s>        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n</s>    }\n}\n",
      "output": [
        {
          "patch": "        return list[(int) (list.length / 2)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2)] + list[(int) (list.length / 2)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2)] + list[(int) (list.length / 2)] / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2) + 1] / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2) - 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[(int) (list.length / 2) + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return list[list.length / 2];\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n</s>        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "    return text.charAt(i) == text.charAt(text.length() - i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return text.charAt(i) == text.charAt(text.length() - 1);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return text.charAt(text.length() - i) =='';\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return is_palindrome(text.charAt(i));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (text.charAt(i) =='')\n            return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return i == text.length() - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return false;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n</s>        result = 2 * result;\n    }\n    return result % p;\n</s>}\n",
      "output": [
        {
          "patch": "        result = result * 2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result = 2 * result + 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    result = result * 2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    result = 2 * result + 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    result = 2 * result;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result % p;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result = Math.abs(result);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result *= 2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n</s>        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n</s>        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)(((c - 5 - (int)('a')) % 26) + (int)('a'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('A'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26) + (char)('a'));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int) 'a')) % 26) + (int) 'a');\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26)) + (int)('a'));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26)) + (int)('a');\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a'))) % 26);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        c = (char)((((int) c - 5 - (int)('a')) % 26) * 26);\n",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n</s>        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n</s>            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'a' || c == 'e' || c == 'i' || c == 'o') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c >= 'a' && c <= 'e' && c <= 'i' && c <= 'o' && c <= 'u')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'a' || c == 'e' || c == 'i' || c == 'o')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'a' || c == 'e' || c == 'i') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == 'a' || c == 'e')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isVowel(c))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == 'a')\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n</s>        if (l[i] <= t)\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "        if (l[i] < t)\n            return true;\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] >= t)\n            return true;\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] > t)\n            return true;\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] <= t)\n            return true;\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] > t)\n            return false;\n    }\n    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] < t)\n            return false;\n    }\n    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l[i] == t)\n            return true;\n    }\n    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return l[i] <= t;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (l[i] < t)\n            return true;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return l[i] > t;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n</s>    return x | y;\n</s>}\n",
      "output": [
        {
          "patch": "    return x & y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x + y;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    return x << y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (x | y);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x ^ y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x | y & 0xFF;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x | (y << 16);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return x | (y << 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n</s>    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n</s>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}\n",
      "output": [
        {
          "patch": "    ArrayList<Character> set0 = new ArrayList<>();\n    ArrayList<Character> set1 = new ArrayList<>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    HashSet<Character> set0 = new HashSet<Character>();\n    HashSet<Character> set1 = new HashSet<Character>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    List<Character> set0 = new ArrayList<Character>();\n    List<Character> set1 = new ArrayList<Character>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    LinkedHashSet<Character> set0 = new LinkedHashSet<Character>();\n    LinkedHashSet<Character> set1 = new LinkedHashSet<Character>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    TreeSet<Character> set0 = new TreeSet<Character>();\n    TreeSet<Character> set1 = new TreeSet<Character>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ArrayList<String> set0 = new ArrayList<String>();\n    ArrayList<String> set1 = new ArrayList<String>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    StringBuilder set0 = new StringBuilder();\n    StringBuilder set1 = new StringBuilder();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n</s>    return fib(n - 1) + fib(n - 2);\n</s>}\n",
      "output": [
        {
          "patch": "    return fib(n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 1 + fib(n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (n - 1) + (n - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fib(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fib(n - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fib(n - 1, n - 2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return 2 * fib(n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n</s>        if (depth >= 0)\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "    }\n    return depth >= 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return (depth >= 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return depth > 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return depth >= 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    return depth < 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n</s>    sorted = l;\n</s>    \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}\n",
      "output": [
        {
          "patch": "    sorted = l.clone();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    sorted = new int[l.length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sorted[0] = l[0];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    sorted = (int[]) l.clone();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    sorted.set(l);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sorted = l[0];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int[] sorted = l;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sorted = (int[]) l;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n</s>    ArrayList<Integer> common = new ArrayList<Integer>();\n</s>    \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "    ArrayList<Integer> common = new ArrayList<>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    List<Integer> common = new ArrayList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    HashSet<Integer> common = new HashSet<Integer>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    Set<Integer> common = new HashSet<Integer>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    ArrayList<int> common = new ArrayList<int>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    TreeSet<Integer> common = new TreeSet<Integer>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    ArrayList<Integer> common = new ArrayList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    List<Integer> common = new ArrayList<>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    LinkedHashSet<Integer> common = new LinkedHashSet<Integer>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    ArrayList<Integer> result = new ArrayList<Integer>();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n</s>        if (is_prime(j)){\n            largest = n % j;\n</s>        }\n    }\n    return largest;\n}\n",
      "output": [
        {
          "patch": "        if (is_prime(j)) {\n            largest = j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (is_prime(n, j)){\n            largest = n % j;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (is_prime(j)) {\n            largest = j;\n            break;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!is_prime(j)) {\n            return j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (is_prime(j) && j!= 0){\n            largest = j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (is_prime(j) && n % j!= 0){\n            return j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (is_prime(j)) {\n            return j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (isPrime(j)) {\n            largest = j;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n</s>    return (n + 1) * (n / 2);\n</s>}\n",
      "output": [
        {
          "patch": "    return n * (n / 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (n + 1) * n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n * n / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (n + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (n + 1) / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n + (n / 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n / 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n</s>    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < xs.size(); i += 1) result.add(xs.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < xs.size() - 1; i++) result.add(xs.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < xs.size(); i += 1) result.add(xs.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < xs.size(); i += 1) result.add(xs.get(i - 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(xs);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(Arrays.asList(xs));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (Integer i : xs) result.add(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n</s>    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n</s>}\n",
      "output": [
        {
          "patch": "    return fibfib(n - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fibfib(n - 1) + fibfib(n - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fibfib(n - 2) + fibfib(n - 3);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (n - 1) + (n - 2) + (n - 3);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fibfib(n - 1) + (n - 2) + (n - 3);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 1 + fibfib(n - 1) + fibfib(n - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return fibfib(n);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n</s>    if (str_chars[str_chars.length - 1] == 'y')\n</s>        result += 1;\n    return result;\n}\n",
      "output": [
        {
          "patch": "    if (str_chars[str_chars.length - 1] == 'Y')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str_chars[str_chars.length - 1] == 'y')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str.charAt(str.length() - 1) == 'y')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str_chars[str.length() - 1] == 'y')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str_chars[str_chars.length - 1].equals('y'))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (str[str.length - 1] == 'y')\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (str_chars[0] == 'y')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (str_chars.length == 1)\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n</s>        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n</s>    }\n}\n",
      "output": [
        {
          "patch": "        return s.substring(s.length() - shift);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(s.length() - shift + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(shift + 1) + s.substring(0, shift - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(0, s.length() - shift);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(s.length() - shift - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(s.length() - shift + 1) + s;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s.substring(0, shift);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        return s;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n</s>        if (c == ' ')\n            break;\n</s>        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (c == '0')\n            continue;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (c =='')\n            continue;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == '0')\n            break;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (Character.isWhitespace(c))\n            continue;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        c = c.toUpperCase();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        c = Character.toUpperCase(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '0')\n            result = 0;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        c = c.toLowerCase();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "plausible"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n</s>        int cnt = Integer.parseInt(str);\n        result -= cnt;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result -= Integer.parseInt(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Double.parseDouble(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result = result - Integer.parseInt(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Integer.parseInt(str).intValue();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result -= (int) Integer.parseInt(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Integer.parseInt(str.trim());\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Float.parseFloat(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += Integer.parseInt(str);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Integer.parseInt(str) * n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result -= Integer.parseInt(str) * 2;\n",
          "correctness": "wrong"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n</s>    int min_even = 0;\n    int index = 0;\n</s>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}\n",
      "output": [
        {
          "patch": "    int min_odd = 0;\n    int index = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_int = 0;\n    int index = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min = 0;\n    int index = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_even = arr.length - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_even = arr[0];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_odd = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_even = -1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_index = -1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min = 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n</s>    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n</s>    \n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) if (lst[i] >= max) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < max; i += 1) if (lst[i] >= i) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) if (lst[i] >= i) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) if (i >= max) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < max; i += 1) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) if (lst[i] > max) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 1) if (max >= i) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < max; i++) result = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result = max;\n",
          "correctness": "wrong"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n</s>    }\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "    } while (switched);\n",
          "correctness": "timeout"
        },
        {
          "patch": "        switched = false;\n    }\n",
          "correctness": "timeout"
        },
        {
          "patch": "    }\n",
          "correctness": "timeout"
        },
        {
          "patch": "    } while (!switched);\n",
          "correctness": "timeout"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        switched = true;\n    }\n",
          "correctness": "timeout"
        },
        {
          "patch": "        switched =!switched;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    } catch (IndexOutOfBoundsException e) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n</s>public static double triangle_area_2(double a, double b, double c) {\n</s>    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}\n",
      "output": [
        {
          "patch": "    return triangle_area_2(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return triangle_area(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return triangle_area_3(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double s = (a + b + c) / 2.;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double area = triangle_area(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double area = triangle_area_2(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return triangleArea(a, b, c);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    double s = (a + b + c) / 2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n</s>    }\n</s>    return true;\n}\n",
      "output": [
        {
          "patch": "        i++;\n        j--;\n    }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        i += 1;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    } while (i < j);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        ++i;\n        --j;\n    }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        i = j;\n    }\n",
          "correctness": "plausible"
        },
        {
          "patch": "        i++;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        i++;\n    } while (i < j);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n</s>    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i])\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i]!= arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i]!= arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i] == arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i]!= arr[arr.length - i])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i]!= arr[arr.length - 2])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i] > arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = arr.length - 1; i >= 0; i -= 1) {\n        if (arr[i]!= arr[arr.length - i])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = arr.length - 1; i >= 0; i -= 1) {\n        if (arr[i]!= arr[arr.length - 1])\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < arr.length; i += 1) {\n        if (arr[i]!= arr[arr.length - i])\n",
          "correctness": "wrong"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n</s>    for (String st : lst1)\n        l2 = st.length();\n</s>    \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}\n",
      "output": [
        {
          "patch": "    for (String st : lst2)\n        l2 += st.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (String st : lst2)\n        l2 = st.length();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (String st : lst2) {\n        l2 += st.length();\n    }\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (String st : lst2) l2 += st.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (String s : lst2)\n        l2 += s.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = 0; i < lst2.size(); i++) l2 += lst2.get(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (String str : lst2)\n        l2 += str.length();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for (int i = 0; i < lst1.size(); i++) l2 += lst1.get(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n</s>            for (int k = j; k < a; j += 1) {\n</s>                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "            for (int k = j + 1; k < a; k += 1) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "            for (int k = j; k < a; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = j + 1; k <= a; k += 1) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "            for (int k = j - 1; k < a; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = j; k < a - 1; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = j - 1; k <= a; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = j - 1; k < a; k -= 1) {\n",
          "correctness": "timeout"
        },
        {
          "patch": "            for (int k = j; k <= a; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = i; k < a; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for (int k = j * 2; k < a; k += 2) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n</s>    int power = 1;\n</s>    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n",
      "output": [
        {
          "patch": "    int power = 0;\n",
          "correctness": "timeout"
        },
        {
          "patch": "    int power = x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int power = -1;\n",
          "correctness": "timeout"
        },
        {
          "patch": "    int power = 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int power = n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double power = 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int power = 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int power;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n</s>    double root = Math.pow(a, 1./3);\n</s>    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}\n",
      "output": [
        {
          "patch": "    double root = Math.pow(a, 3);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = Math.pow(a, 2.0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = Math.pow(a, 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = Math.pow(a, 0.5);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = Math.pow(a, 3.0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = Math.pow(a, 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = a * a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    double root = a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n</s>        if (c == '2' || c == '3' || c == '5' || c == '7')\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (c == '2' || c == '3' || c == '4' || c == '7')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '2' || c == '3' || c == '5' || c == '7')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '2' || c == '3' || c == '4' || c == '6')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '4' || c == '5' || c == '7')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '2' || c == '3' || c == '5') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == '2' || c == '3') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == '2' || c == '3')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '5' || c == '7')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == '2')\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n</s>    String result = Integer.toHexString(decimal);\n</s>    return \"db\" + result + \"db\";\n}\n",
      "output": [
        {
          "patch": "    String result = Integer.toString(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String result = String.valueOf(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String result = Long.toHexString(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final String result = Integer.toHexString(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String result = Integer.toHexString(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String result = Long.toString(decimal);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String result = decimal.toString();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String result = decimal;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n</s>        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n</s>            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (s.charAt(i) == s.charAt(i + 1)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (s.charAt(i)!= s.charAt(i + 1) && s.charAt(i)!= s.charAt(i + 2))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (s.charAt(i) == s.charAt(i + 1))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (s.charAt(i)!= s.charAt(i + 1))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (s.charAt(i) == s.charAt(i + 2))\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n</s>        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n</s>        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}\n",
      "output": [
        {
          "patch": "        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 0.7)\n            letter_grade[i] = \"C\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 1.0)\n            letter_grade[i] = \"C\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 1.7)\n            letter_grade[i] = \"C-\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 2.7)\n            letter_grade[i] = \"C\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if (gpa > 1.5)\n            letter_grade[i] = \"C-\";\n",
          "correctness": "wrong"
        },
        {
          "patch": "        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        else\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n</s>        if (l - i == 0)\n</s>            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "        if (l - i == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (l - i < 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if ((l - i) == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i - 1 == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l - i <= 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l - i!= 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i == l)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (l - i == 1)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i == l - 1)\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n</s>    return (int) ((10 + 9) * Math.pow(10, n - 2));\n</s>}\n",
      "output": [
        {
          "patch": "    return (int) ((10 + 9) * Math.pow(10, n));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (int) (10 * Math.pow(10, n - 2));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (int) Math.pow(10, n - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n - 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n</s>        sum += Integer.parseInt((N + \"\").substring(i + 1));\n</s>    }\n    return Integer.toBinaryString(sum);\n}\n",
      "output": [
        {
          "patch": "        sum += Integer.parseInt((N + \"String_Node_Str\").substring(i + 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sum += Integer.parseInt((N + \"\").substring(i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n",
          "correctness": "plausible"
        },
        {
          "patch": "        sum += Integer.parseInt(((N + \"\").substring(i + 1)));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sum += Integer.parseInt(N.substring(i + 1));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        sum += Integer.parseInt(((N + \"\").substring(i)));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sum += Integer.parseInt((N + \"String_Node_Str\" + i));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sum += Integer.parseInt(((N + \"\").substring(i + 1)).toUpperCase());\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n</s>    for (int i = 0; i < lst.length; i += 1) {\n</s>        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < lst.length - 1; i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i += 2) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length - 1; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < lst.length; i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = lst.length - 1; i >= 0; i -= 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < list.length; i += 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 1; i < lst.length; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < lst.length && i < 2; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = lst.length - 1; i >= 0; i -= 2) {\n",
          "correctness": "plausible"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n</s>        result += new String(chars);\n    }\n    return result;\n</s>}\n",
      "output": [
        {
          "patch": "        result += chars[0];\n    }\n    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += chars.toString();\n    }\n    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += new String(chars);\n    }\n    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    return new String(chars);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += chars;\n    }\n    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += new String(chars, \"String_Node_Str\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    }\n    return result;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    });\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n</s>        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n</s>            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        for (int j = 0; j < lst.get(i).size(); j++) {\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (lst.get(i)!= null){\n            for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (lst.get(i)!= null) {\n            for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if (lst.get(i).size() > 0) {\n            for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (lst.get(i).size() > 0){\n            for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 0; j < lst.get(i).size(); j += 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int j = 0; j < lst.get(i).size(); j++) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n</s>            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n</s>        }\n        return array;\n    }\n}\n",
      "output": [
        {
          "patch": "            array[i] = array[array.length - i - 2];\n            array[array.length - i - 2] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i] = array[i + 1];\n            array[i + 1] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i + 1] = array[array.length - i - 1];\n            array[i + 1] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            int tmp = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i] = array[array.length - i];\n            array[array.length - i] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i] = array[array.length - i];\n            array[array.length - i - 1] = array[i + 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i] = array[array.length - i];\n            array[array.length - i - 1] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n</s>                d.charAt(s.indexOf((int) c) + 2 * 2)\n</s>            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 3 * 2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 2 * 4)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                d.charAt(s.indexOf(c) + 2 * 2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 2 * 3)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 4 * 2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 3 * 2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 2 * 2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "                d.charAt(s.indexOf((int) c) + 1 * 2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "                d.charAt((int) c);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n</s>    List<Integer> numbers = new ArrayList<Integer>();\n</s>    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}\n",
      "output": [
        {
          "patch": "    List<Integer> numbers = new ArrayList<>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    ArrayList<Integer> numbers = new ArrayList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    Set<Integer> numbers = new HashSet<Integer>();\n",
          "correctness": "plausible"
        },
        {
          "patch": "    List<Integer> numbers = new LinkedList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    final List<Integer> numbers = new ArrayList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    List<Integer> numbers = new ArrayList<Integer>();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    List<Integer> list = new ArrayList<Integer>();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    List<Integer> numbers = Lists.newArrayList();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n</s>        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (sentence.length() >= 3 && sentence.subSequence(0, 3).equals(\"I \"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.subSequence(0, 1).equals(\"I \"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I\")) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"B\"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.subSequence(0, 3).equals(\"I \"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (sentence.length() > 2 && sentence.subSequence(0, 2).equals(\"I \"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.substring(0, 1).equals(\"I \"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I\"))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (sentence.length() >= 2) {\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n</s>    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n</s>            return true;\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (x == x && y == y && z == z) {\n        if (x + y == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if ((int) x == x && (int) y == y && (int) z == z) {\n        if (x + y == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == z)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int) x == x && (int) y == y) {\n        if (x + y == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + z == z || x + z == y)\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + z == z || x + y == z)\n",
          "correctness": "wrong"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n</s>        if (Character.isLowerCase(c)) {\n</s>            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "        if (Character.isUpperCase(c)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isLowerCase(c)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLowerCase(c) || c == '_') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (!Character.isUpperCase(c)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLowerCase(Character.toLowerCase(c))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLowerCase(c) || c == '-') {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLetter(c)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLowerCase(c)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isLowerCase(c))\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n</s>        result += (int) c;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result += c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (int) c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (int) c & 0xFF;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (char) c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (c & 0xFF);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (c - '0');\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result += (int) c & 0xff;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += c - '0';\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result = (int) c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += (int) c.charValue();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n</s>            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n</s>                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}\n",
      "output": [
        {
          "patch": "            } else if (state.equals(\"upper\") &&!str_key.toLowerCase().equals(str_key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (state.equals(\"upper\") &&!str_key.equalsIgnoreCase(str_key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            }\n            if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (!str_key.toUpperCase().equals(str_key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equalsIgnoreCase(str_key)) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (state.equals(\"upper\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else if (state.equals(\"upper\") || state.equals(\"lower\")) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            } else\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n</s>        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n</s>            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}\n",
      "output": [
        {
          "patch": "        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                primes.add(j);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 2; j < n; j += 1){\n            if (i % j == 0) {\n                primes.add(j);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 2; j < i; j += 1){\n            if (j % i == 0) {\n                primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        for (int j = 2; j < n; j += 1){\n            if (i % j == 0) {\n                primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % 2 == 0) {\n            primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % i == 0) {\n            primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % 2!= 0) {\n            primes.add(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n</s>    return (a % 10) * (b % 10);\n</s>}\n",
      "output": [
        {
          "patch": "    return (a % 100) * (b % 100);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * (b % 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a / 10) * (b / 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((a % 10) * (b % 10));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a % 10) * (b % 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a * 10) + (b * 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (b % 10) * (a % 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a * 10) * (b * 10);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a * b);\n",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n</s>        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n</s>            count += 1;\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'U')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'I' || c == 'o') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'I')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A' || c == 'e' || c == 'I') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (c == 'A' || c == 'e')\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isUpperCase(c))\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (c == 'A')\n",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n</s>    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n</s>    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    if (value.substring(value.length() - 1).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.substring(value.length() - 3).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.substring(value.length() - 2).equals(\".0\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.length() > 2) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.substring(value.length() - 1).equals(\".5\")) {\n        result = (int)Math.floor(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(value) : (int)Math.ceil(value);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (value.substring(value.length() - 1).equals(\".5\")) {\n        result = (int) Math.floor(num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n</s>\t\tpile.add(n - 2 * i);\n</s>\t}\n\treturn pile;\n}\n",
      "output": [
        {
          "patch": "\t\tpile.add(n - 2 * i - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(2 * i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - 2 * i + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - 1 - 2 * i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - 2 * i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - 2 * i - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(n - 3 * i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "\t\tpile.add(2 * n - 2 * i);\n",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n</s>\tString s_list = \"\";\n</s>\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}\n",
      "output": [
        {
          "patch": "\tStringBuilder s_list = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "\tStringBuilder sb = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "\tString s_list = new String();\n",
          "correctness": "wrong"
        },
        {
          "patch": "\tStringBuilder result_list = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "\tString s_list = new StringBuilder();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "\tString s_list = null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\tString s_list;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "\tString s_list = s;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n</s>    if(x < y) return -1;\n</s>    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}\n",
      "output": [
        {
          "patch": "    if(x < y) return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x < y)\n        return 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x > y) return -1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    if(x < y)\n        return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x < y) return 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x < y) return x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x <= y) return -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(x < y)\n        return x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n</s>        avg_rounded = (int) Math.ceil(avg);\n</s>    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}\n",
      "output": [
        {
          "patch": "        avg_rounded = (int) Math.floor(avg);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        avg_rounded = Math.ceil(avg);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        avg_rounded = (int) Math.ceil((double) avg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        avg_rounded = Math.round(avg);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        avg_rounded = (int) Math.ceil((float) avg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        avg_rounded = Math.floor(avg);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        avg_rounded = int.valueOf(Math.ceil(avg));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        avg_rounded = (int) Math.ceil((long) avg);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        avg_rounded = (int) Math.round(avg);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        avg_rounded = (long) Math.ceil(avg);\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n</s>            if((curr_digit % 2) != 0) {\n                all_odd = true;\n</s>                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}\n",
      "output": [
        {
          "patch": "            if((curr_digit % 2) == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((curr_digit % 2)!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((curr_digit % 2)!= 0)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if(curr_digit % 2!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(curr_digit!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((curr_digit & 1)!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(curr_digit % 2 == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((curr_digit % 2) == 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((curr_digit % 10)!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(curr_digit == 0) {\n",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n</s>        if(digit_map.get(num) != \"\") {\n</s>            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if(digit_map.get(num)!= null) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(\"String_Node_Str\".equals(digit_map.get(num))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(digit_map.containsKey(num)) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(num > 0 && digit_map.get(num)!= \"\") {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(num > 0 && digit_map.get(num)!= \"0\") {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(digit_map.get(num).length() > 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(num >= 0 && digit_map.get(num)!= \"\") {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(num >= 0 && digit_map.get(num)!= \"0\") {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (digit_map.get(num)!= null) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n</s>            for(int j = 1; j <= i; i++) x -= j;\n</s>            ret.add(x);\n        }\n    }\n    return ret;\n}\n",
      "output": [
        {
          "patch": "            for(int j = 0; j <= i; j++) x -= j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x -= j * i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x += j;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x -= j * 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x /= j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x *= j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= i; j++) x -= j * j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j <= n; j++) x -= j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            for(int j = 1; j < i; j++) x -= j;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n</s>        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n</s>    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if((i % 2)!= 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2)!= 1 && is_palindrome(i)) even_palindrome_count++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(is_palindrome(i)) odd_palindrome_count++;\n        else if(is_palindrome(i)) even_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0)\n            odd_palindrome_count++;\n        else if((i % 2) == 1)\n            even_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2)!= 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2)!= 1 && is_palindrome(i)) even_palindrome_count--;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0) {\n            odd_palindrome_count++;\n        } else if((i % 2) == 1) {\n            even_palindrome_count++;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(is_palindrome(i))\n            odd_palindrome_count++;\n        else if(is_palindrome(i))\n            even_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(is_palindrome(i)) odd_palindrome_count++;\n        else if(is_palindrome(i) && is_palindrome(i)) even_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2)!= 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2)!= 1 && is_palindrome(i)) odd_palindrome_count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count--;\n",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n</s>        if(neg) num *= 1;\n</s>        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "        if(neg) num = -num;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(neg) num *= -1;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(!neg) num *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        num *= -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(!neg) num *= -1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        num *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        num = -num;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        num = Math.abs(num);\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n</s>    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n</s>    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "    int min_value = sorted_arr.get(sorted_arr.size() - 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min_value = sorted_arr.get(0);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int min_value = sorted_arr.get(arr.size() - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min_value = sorted_arr[sorted_arr.size() - 1];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_value = sorted_arr.get(sorted_arr.size());\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min_value = sorted_arr.get(sorted_arr.size() / 2);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int min_value = sorted_arr[sorted_arr.length - 1];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_index = sorted_arr.size() - 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n</s>    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n</s>    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
      "output": [
        {
          "patch": "    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i : lst1) {\n        if((i % 2) == 1) even++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i : lst1) {\n        if((i % 2) == 0) even++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int odd = 0;\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int i : lst1) {\n        if(i % 2 == 1) odd++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "    for(int i = 0; i < lst1.size(); i++) {\n        if(i % 2 == 1) odd++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i : lst1) {\n        odd++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n</s>        if(count_letter[i] < most_count) {\n</s>            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}\n",
      "output": [
        {
          "patch": "        if(count_letter[i] > most_count) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(count_letter[i] < most_count + 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(count_letter[i] >= most_count) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(count_letter[i] < most_count)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if(count_letter[i] <= most_count) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(count_letter[i] < most_count - 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(count_letter[i]!= most_count) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((count_letter[i] - most_count) < 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n</s>        if(c.indexOf(s.charAt(i)) != -1) {\n</s>            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}\n",
      "output": [
        {
          "patch": "        if(c.indexOf(s.charAt(i)) == -1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(c.indexOf((char) s.charAt(i))!= -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(c.indexOf((char) s.charAt(i)) == -1) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(Character.isLetter(s.charAt(i))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(c.indexOf(s.charAt(i)) < 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(Character.isUpperCase(s.charAt(i))) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(c.indexOf(c.charAt(i)) == -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(c.indexOf(s.charAt(i)) > -1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n</s>            if(digit % 2 == 0) {\n                n--;\n</s>            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "            if(digit % 2!= 0) {\n                n++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(digit!= 0) {\n                if(digit % 2 == 0) {\n                    n++;\n                }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(digit > 0) {\n                if(digit % 2 == 0) {\n                    n--;\n                }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((digit % 2) == 0) {\n                n++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(digit!= 0) {\n                if(digit % 2 == 0) {\n                    n--;\n                }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(digit > 0) {\n                if(digit % 2 == 0) {\n                    n++;\n                }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(digit % 2 == 0) {\n                n++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if((digit % 2)!= 0) {\n                n++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(digit % 2 == 1) {\n                n++;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(digit < 2) {\n                n++;\n",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n</s>        s += num;\n</s>        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}\n",
      "output": [
        {
          "patch": "        s += num * num;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += num;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s -= num;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        s += num - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += (num * num);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += (num - 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += num + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += (num + 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s += (num - 0);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n</s>        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n</s>        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        for(int j = 0; j < grid.length; j++) {\n            row_capacity += grid[j][i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for(int j = 0; j < grid.length; j++) {\n            row_capacity += grid[i][j];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 0; j < grid[0].length; j++) {\n            row_capacity += grid[0][j];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 0; j < grid[0].length; j++) {\n            row_capacity += grid[0][i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 0; j < grid.length - 1; j++) {\n            row_capacity += grid[j][i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 0; j < grid[0].length; j++) {\n            row_capacity += grid[i][j];\n",
          "correctness": "plausible"
        },
        {
          "patch": "        for(int j = i + 1; j < grid.length; j++) {\n            row_capacity += grid[j][i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = i; j < grid.length; j++) {\n            row_capacity += grid[j][i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for(int j = 1; j < grid.length; j++) {\n            row_capacity += grid[j][i];\n",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n</s>      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n</s>   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}\n",
      "output": [
        {
          "patch": "      return 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return o1.compareTo(o2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return o1.compareTo(o2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        return 0;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return 0;\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "      return o1 == o2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return o1 == o2;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "      return 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n</s>        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n</s>        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'a'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {',', 'a', 'e', 'i', 'o', 'u'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u','s'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'l'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u' };\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'c'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', '-'};\n",
          "correctness": "wrong"
        },
        {
          "patch": "        char[] vowels = {A, E, I, O, U};\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n</s>    for(int i = word.length() - 2; i >= 0; i--) {\n</s>        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}\n",
      "output": [
        {
          "patch": "    for(int i = 0; i < word.length(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < word.length() - 2; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 1; i <= word.length() - 2; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 2; i >= 0; i--) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < word.length() - 1; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 1; i < word.length(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 1; i <= word.length(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 3; i >= 0; i--) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "</s></s>",
      "output": [
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\n    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\n    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "\n    return this;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    }\n    }\n",
          "correctness": "wrong"
        }
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n</s>    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n</s>        result.add(arr.get(i));\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for(int i = arr.size() - k; i >= 0; i--) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < arr.size() - k; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = arr.size() - 1; i >= k; i--) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i <= arr.size() - k; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < arr.size(); i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 1; i <= arr.size() - k; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = arr.size() - 1; i >= 0; i--) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = arr.size() - 1; i >= k; i++) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n</s>        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n</s>            result += lst.get(i);\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if((lst.get(i) % 2) == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0 && lst.get(i) % 2!= 0) {\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if((i % 2) == 0 && lst.get(i) % 2 == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst.get(i) % 2 == 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if((i % 2) == 1 && (lst.get(i) % 2) == 0)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if((lst.get(i) % 2) == 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n</s>        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n</s>        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if(arr.get(i) >= 2) {\n            result += arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(Integer.toString(arr[i]).length() >= 2) {\n            result += arr[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if(arr.get(i) > 0) {\n            result += arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(arr.get(i) >= 0) {\n            result += arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result += arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(arr.get(i) >= 2) {\n            result -= arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(arr.get(i)!= 0) {\n            result += arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(Integer.toString(arr.get(i)).length() >= 3) {\n            result -= arr.get(i);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(Integer.toString(arr[i]).length() >= 2) {\n            result -= arr[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += arr.get(i);\n        if(Integer.toString(result).length() >= 2) {\n            return result;\n",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n</s>    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n</s>        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "    while(n > 0) {\n        if((n % 2) == 1) n /= 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 1) {\n        if((n % 2) == 1) n /= 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n >= 0) {\n        if((n % 2) == 1) n /= 2;\n",
          "correctness": "timeout"
        },
        {
          "patch": "    while(n!= 0) {\n        if((n % 2) == 1) n /= 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n >= 2) {\n        if((n % 2) == 1) n /= 2;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if((n % 2) == 0) n /= 2;\n",
          "correctness": "timeout"
        },
        {
          "patch": "    while(n >= 0) {\n        if((n % 2) == 0) n /= 2;\n",
          "correctness": "timeout"
        },
        {
          "patch": "    while(n >= 2) {\n        if((n % 2) == 0) n /= 2;\n",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n</s>            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n</s>        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "            if(month!= month_check1[i] && (day < 1 || day > 31)) return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(month!= month_check1[i] && day < 1 || day > 31) {\n                return false;\n            }\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(month!= month_check1[i] && (day < 1 || day > 31)) {\n                return false;\n            }\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(month!= month_check1[i] &&!(day < 1 || day > 31)) {\n                return false;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(month!= month_check1[i] && (day < 1 || day > 31))\n                return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "            if(month == month_check1[i] &&!(day < 1 || day > 31)) {\n                return false;\n            }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(month == month_check1[i] &&!(day < 1 || day > 31)) return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(month!= month_check1[i])\n                return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(month == month_check1[i])\n                return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n</s>            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n</s>        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}\n",
      "output": [
        {
          "patch": "            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr) && ((curr - 'a') % 2)!= 0) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr)) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 1) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr) && ((curr - 'a') % 3) == 0) count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if(Character.isUpperCase(curr))\n                count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            count++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n</s>        if(lst[i] <= lst[i + 1]) return false;\n</s>    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "        if(lst[i] < lst[i + 1]) return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i] > lst[i + 1]) return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(lst[i] < lst[i + 1])\n            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i] > lst[i + 1])\n            return false;\n",
          "correctness": "plausible"
        },
        {
          "patch": "        if(lst[i] >= lst[i + 1]) return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i] >= lst[i + 1])\n            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i]!= lst[i + 1])\n            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i]!= lst[i + 1]) return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if(lst[i] == lst[i + 1])\n            return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n</s>    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n</s>    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}\n",
      "output": [
        {
          "patch": "    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = Math.min(interval1[0], interval2[1]);\n    int r = Math.max(interval1[0], interval2[0]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval2[1], interval2[1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = interval1[0];\n    int r = interval2[0];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = interval1[0];\n    int r = interval2[1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = Math.min(interval2[0], interval1[0]);\n    int r = Math.max(interval2[1], interval1[1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval2[1], interval1[1]);\n",
          "correctness": "plausible"
        },
        {
          "patch": "    int l = Math.min(interval1[0], interval2[1]);\n    int r = Math.max(interval1[0], interval2[1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int l = Math.min(interval1[0], interval2[1]);\n    int r = Math.max(interval2[0], interval2[1]);\n",
          "correctness": "wrong"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n</s>        else if(arr[i] > 0) prod *= 1;\n</s>    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n",
      "output": [
        {
          "patch": "        else if(arr[i] < 0) prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if(arr[i] >= 0) prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if(arr[i] > 0) prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if(arr[i] > 0) prod += 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else if(arr[i] <= 0) prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else\n            prod *= 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        else prod *= arr[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n</s>                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n</s>            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}\n",
      "output": [
        {
          "patch": "                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.min(",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.min(val, grid[i][j + 1]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j - 1]);\n                if(j!= n + 1) val = Math.min(val,",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.min(val, grid[i][j + 1]);\n                if(i!= n - 1) val = Math.max(val, grid[i - 1][j]);\n                if(j!= n + 1) val = Math.min(val, grid[",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                val = Math.min(val, grid[i - 1][j]);\n                if(j!= n - 1) val = Math.min(val, grid[i - 1][j - 1]);",
          "correctness": "wrong"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(val, grid[i -",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                if(i!= 0) val = Math.min(val, grid[i - 1][j]);\n                if(j!= 0) val = Math.max(val, grid[i][j -",
          "correctness": "uncompilable"
        },
        {
          "patch": "                if(i!= 0) val = Math.min(val, grid[i][j + 1]);\n                if(j!= 0) val = Math.max(val, grid[i - 1][j]);\n                if(i!= n - 1) val = Math.max(",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                if(val!= 0) val = Math.min(val, grid[i - 1][j]);\n                if(val!= n - 1) val = Math.max(val, grid[i -",
          "correctness": "uncompilable"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                val = Math.min(val, grid[i - 1][j]);\n                val = Math.max(val, grid[i][j - 1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "                val = Math.max(val, grid[i][j + 1]);\n                if(val!= 0) val = Math.min(val, grid[i - 1][j]);\n                if(val!= n - 1) val = Math.max(val, grid[i][",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n</s>    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n</s>    }\n    return sequence;\n}\n",
      "output": [
        {
          "patch": "    for(int i = 1; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3)",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = -2;\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3)",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = -1;\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = -2;\n    for(int i = 1; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = 3;\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int i = 1; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = -2;\n    for(int i = 2; i < n - 1; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] -",
          "correctness": "uncompilable"
        },
        {
          "patch": "    sequence[1] = -2;\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2;\n        else sequence[i] = sequence[i - 1] - sequence[i -",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int i = 1; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 2)",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n</s>    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n</s>            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}\n",
      "output": [
        {
          "patch": "    while(n > 0) {\n        if(n % 2 == 0) {\n            product *= 10;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if(n % 2 == 0) {\n            product /= n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        while(n % 10 == 0) {\n            product *= 10;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if(n % 10 == 0) {\n            product /= n;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if(n % 10 == 0) {\n            product *= 10;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if(n % 2!= 0) {\n            product *= 10;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        if(n % 2!= 0) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    while(n > 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n</s>    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n</s>            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\n",
      "output": [
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx < opening_brackets.size() || idx >= closing_brackets.get(idx)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx < opening_brackets.size() || idx >= closing_brackets.get(i)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx < l || idx >= closing_brackets.get(idx)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx >= closing_brackets.get(idx)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    Collections.reverse(closing_brackets);\n    for(int idx : opening_brackets) {\n        if(idx < closing_brackets.size()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx < l || idx >= closing_brackets.get(i)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx >= closing_brackets.get(i)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for(int idx : opening_brackets) {\n        if(idx < closing_brackets.size()) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n</s>    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    long result = 0;\n    for(int i = 0; i < lst.length; i++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    long result = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[j])) * (Math.ceil((int) lst[j]));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    long result = 0;\n    for(int i = 0; i < lst.length; i++) {\n        result += (Math.floor((double) lst[i])) * (Math.ceil((double) lst[i]));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int result = 0;\n    for(int i = 0; i < lst.length; i++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    long result = 0;\n    for(int i = 0; i < lst.length; i++) {\n        result += (Math.floor((int) lst[i]) * (Math.ceil((int) lst[i]));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    long result = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((double) lst[j])) * (Math.ceil((double) lst[j]));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < lst.length; i++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (lst.length == 0) {\n        return 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (lst == null) {\n        return 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n</s>    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n</s>}\n",
      "output": [
        {
          "patch": "    return check_if_last_char_is_a_letter(parts);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return check_if_last_char_is_a_letter(last);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return check_if_last_char_is_a_letter(txt);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (last.length() == 1);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return last.length() == 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return last.equals(\"String_Node_Str\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return false;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return true;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n</s>    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n</s>    }\n    return ind;\n}\n",
      "output": [
        {
          "patch": "    int ind = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind = i;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int ind = 0;\n    for(int i = 1; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind = i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int ind = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > arr[i + 1]) ind = i + 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int ind = 0;\n    for(int i = 1; i < arr.length; i++) {\n        if(arr[i] < arr[i + 1]) ind++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(arr.length == 1) {\n        return 0;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n</s>    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n</s>        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}\n",
      "output": [
        {
          "patch": "    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.max(max",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.min(max",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.max(max",
          "correctness": "uncompilable"
        },
        {
          "patch": "    boolean negative = false, positive = false;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.min(max",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int max_negative = 0, min_positive = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            max_negative = Math.max(max_negative, lst[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    int min_negative = Integer.MIN_VALUE;\n    int max_positive = Integer.MAX_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            min_negative = Math.",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n</s>    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n</s>    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}\n",
      "output": [
        {
          "patch": "    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double)\n        temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double)\n        temp_b = ((Double) b).doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Integer)\n        temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer)\n        temp_b = ((Integer) b).doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n        if(b instanceof Double) {\n            temp_b = ((Double) b).doubleValue();\n        }\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if(a instanceof Double) {\n        temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Double) {\n            temp_b = ((Integer) b).doubleValue();\n        }\n    }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    temp_a = ((Integer) a).doubleValue();\n    temp_b = ((Integer) b).doubleValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    temp_a = (Double) a;\n    temp_b = (Double) b;\n",
          "correctness": "wrong"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n</s>    return ((n * 2 == 1) ^ (n < 8));\n</s>}\n",
      "output": [
        {
          "patch": "    return ((n * 2 == 1) ^ (n % 2));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return ((n * 2 == 1) ^ (n % 8));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return ((n * 2 == 1) ^ (n % 2 == 0));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((n * 2 == 1) ^ (n % 2!= 0));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((n * 2 == 1) && (n < 8));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((n * 2 == 0) ^ (n < 8));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((n * 2 == 1) & (n < 8));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return ((n * 2 == 1) | (n < 8));\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n</s>    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n</s>    }\n    return special_fact;\n}\n",
      "output": [
        {
          "patch": "    for(long i = n - 1; i >= 0; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n; i >= 0; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n; i > 0; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n; i > 0; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n; i >= 0; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n - 1; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n - 1; i >= 0; i--) {\n        fact_i *= i * i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n - 1; i >= 0; i--) {\n        fact_i *= i * i;\n        special_fact += i * i;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for(long i = n - 1; i >= 0; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * i;\n",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n</s>    return new_text;\n</s>}\n",
      "output": [
        {
          "patch": "    return text;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new_text.trim();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new_text.toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return text.substring(start, end);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new_text.toUpperCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return newText;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return new_string;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return result;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n</s>    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n</s>        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}\n",
      "output": [
        {
          "patch": "    if (!('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z'))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (! ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z'))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (lst[0].charAt(0) > 'z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z') || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z'))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (lst[0].charAt(0) > 'z' || lst[0].charAt(0) > 'A')\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ('a' > lst[0].charAt(0))\n",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n</s>        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n</s>            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        if (i % 4!= 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if ((i % 4) == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 2 == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 4 == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % 3!= 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 3 == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 5 == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 3 == 0) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % 6 == 0)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 4 == 0){\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n</s>        for (int i = 2; i < word.length(); i += 1){\n</s>            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}\n",
      "output": [
        {
          "patch": "        for (int i = 1; i < word.length(); i += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 3; i < word.length(); i += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 1; i < word.length(); i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 2; i <= word.length(); i += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 2; i <= word.length(); i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 1; i <= word.length(); i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 1; i <= word.length(); i += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 0; i < word.length(); i++){\n",
          "correctness": "wrong"
        },
        {
          "patch": "        for (int i = 0; i < word.length(); i += 1){\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n</s>    if (numerator / denom == (int) (numerator / denom))\n</s>        return true;\n    return false;\n}\n",
      "output": [
        {
          "patch": "    if (numerator / denom == (int) (numerator / denom)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (numerator / denom == (int) (denom / numerator))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (numerator / denom == (double) (numerator / denom))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if ((numerator / denom) == (int) (numerator / denom))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (numerator / denom == (int) (denom / numerator)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (numerator / denom == (int) (numerator / denom))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (numerator / denom == (int) (denom)) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (numerator / denom == (int) (denom))\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (numerator / denom == num)\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (numerator == denom)\n",
          "correctness": "wrong"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n</s>            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n</s>        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}\n",
      "output": [
        {
          "patch": "            digit += ((n + \"\").charAt(j) - '0') * neg;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += (n + \"\").toCharArray()[j] * neg;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += ((n + \"\").toCharArray()[j] - '0') * 10;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += ((n + \"\").toCharArray()[j] - '0') * 2 * neg;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += (n + \"\").toCharArray()[j] * neg;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            digit += ((n + \"\").toCharArray()[j] - '0') * 2;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += ((n + \"\").toCharArray()[j] - '0') * neg * 10;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "            digit += (((n + \"\").toCharArray()[j] - '0') * neg);\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n</s>            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n</s>                count += 1;\n        }\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(0)) || odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(0))) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(0)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(1)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string.charAt(0))) {\n                count += 1;\n            } else {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (!odd_digits.contains(number_as_string.charAt(0)))\n",
          "correctness": "wrong"
        },
        {
          "patch": "            if (odd_digits.contains(number_as_string))\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n</s>    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n</s>                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < n; i += 1) {\n        for (int j = 1; j < n; j += 1) {\n            for (int k = 1; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i <= n; i += 1) {\n        for (int j = 1; j <= n; j += 1) {\n            for (int k = 1; k <= n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < n; i += 1) {\n        for (int j = 1; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 1; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 1; i <= n; i += 1) {\n        for (int j = 1; j <= n; j += 1) {\n            for (int k = 0; k <= n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 2; i < n; i += 1) {\n        for (int j = 1; j < n; j += 1) {\n            for (int k = 1; k < n; k += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int j = 0; j < n; j += 1) {\n        for (int k = 0; k < n; k += 1) {\n            for (int i = 0; i < n; i += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n</s>    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "    result.addAll(planet_names.subList(planet1_index, planet2_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(planet_names.subList(planet1_index, planet2_index + 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(planet_names.subList(planet1_index + 1, planet2_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(planet_names.subList(planet1_index + 1, planet2_index + 1));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.add(planet_names.get(planet1_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (planet1_index < planet2_index)\n        result.add(planet_names.get(planet1_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    if (planet1_index < planet2_index)\n        result.add(planet_names.get(planet2_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.add(planet_names.get(planet2_index));\n",
          "correctness": "wrong"
        },
        {
          "patch": "    result.addAll(planet_names);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n</s>        (s1, s2) -> s1.length() - s2.length()\n</s>    );\n    return result;\n}\n",
      "output": [
        {
          "patch": "        (s1, s2) -> s1.length() + s2.length()\n",
          "correctness": "wrong"
        },
        {
          "patch": "        (s1, s2) -> s2.length() - s1.length()\n",
          "correctness": "wrong"
        },
        {
          "patch": "        (s1, s2) -> s1.compareToIgnoreCase(s2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        (s1, s2) -> s2.length() - s1.length();\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        (s1, s2) -> s1.compareTo(s2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        (s1, s2) -> s1.compareTo(s2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        (s1, s2) -> -s1.length() - s2.length()\n",
          "correctness": "wrong"
        },
        {
          "patch": "        (String s1, String s2) -> s1.compareToIgnoreCase(s2)\n",
          "correctness": "wrong"
        },
        {
          "patch": "        s -> s.length() - s.length()\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n</s>        if (n % i == 0) return x;\n    }\n    return y;\n</s>}\n",
      "output": [
        {
          "patch": "        if (i % 2 == 0) return x;\n    }\n    return y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (n % i!= 0) return x;\n    }\n    return y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % n == 0) return x;\n    }\n    return y;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (i % 2 == 0) return x;\n    }\n    return x;\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if ((n % i) == 0)\n            return x;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % n == 0)\n            return x;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (n % i == 0) {\n            return x;\n        }\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (i % n == 0) {\n            return x;\n        }\n    }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    return x;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n</s>                result += d_int;\n</s>            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "                result -= d_int;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result = d_int;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                return d_int;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result *= d_int;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result += d;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result += d.intValue();\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result += 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "                result++;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n</s>        result[i] = Math.floorDiv(game[i], guess[i]);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "        result[i] = Math.floorMod(game[i], guess[i]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result[i] = Math.floorDiv(game[i], guess[i]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result[i] = Math.floorDiv(game[i], guess[i - 1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result[i] = Math.floorDiv(game[i], guess[i + 1]);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result[i] = Math.ceilDiv(game[i], guess[i]);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result[i] = Math.abs(game[i] - guess[i]);\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result[i] = game[i] - guess[i];\n",
          "correctness": "plausible"
        },
        {
          "patch": "        result[i] = game[i] / guess[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n</s>            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n</s>    }\n    return class_name + \".\" + strong;\n}\n",
      "output": [
        {
          "patch": "            if (Character.isUpperCase(c) == c) SM += 1;\n            if (Character.isLowerCase(c) == c) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c)) SM += 1;\n            if (Character.isLowerCase(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c) || Character.isLowerCase(c)) SM += 1;\n            if (Character.isLowerCase(c) || Character.isDigit(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.toLowerCase(c) == c) SM += 1;\n            if (Character.toUpperCase(c) == c) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c) || Character.isLowerCase(c)) SM += 1;\n            if (Character.isUpperCase(c) || Character.isLowerCase(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c) || Character.isLowerCase(c)) SM += 1;\n            if (Character.isLetter(c) || Character.isDigit(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c) == c) SM += 1;\n            if (Character.isLowerCase(c) == c) CAP += 1;\n        }\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isUpperCase(c) || Character.isLowerCase(c)) SM += 1;\n            if (Character.isLetter(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            if (Character.isLowerCase(c)) SM += 1;\n            if (Character.isUpperCase(c)) CAP += 1;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n</s>    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n</s>            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < a.length(); i += l) {\n        for (int j = 0; j < b.length(); j += l) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < b.length(); j += 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length() && i < b.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length() - l; i++) {\n        for (int j = 0; j < b.length() - l; j++) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length(); i += 1) {\n        String pat = b;\n        for (int j = 0; j < l; j += 1) {\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int i = 0; i < a.length(); i += l) {\n        for (int j = 0; j < pat.length(); j += l) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length(); i += l) {\n        for (int j = 0; j < l; j += l) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < a.length() - l; i++) {\n        for (int j = 0; j < b.length() - l; j += 1) {\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n</s>    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n</s>    }\n    return new int[] {even_count, odd_count};\n}\n",
      "output": [
        {
          "patch": "    if (num!= 0) {\n        for (char c : (num + \"\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }",
          "correctness": "wrong"
        },
        {
          "patch": "    if (num > 0) {\n        for (char c : (num + \"\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }",
          "correctness": "wrong"
        },
        {
          "patch": "    if (num!= 0) {\n        for (char c : (num + \"String_Node_Str\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (num!= 0) {\n        for (char c : (num + \"String_Node_Str\")) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (num > 0) {\n        for (char c : (num + \"String_Node_Str\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (num!= 0) {\n        for (char c : (num + \"\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count++;\n            if ((int)c % 2 == 1) odd_count++;\n        }\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int c : (num + \"String_Node_Str\").toCharArray()) {\n        if ((c % 2 == 0) even_count += 1;\n        if ((c % 2 == 1)) odd_count += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < num; i++) {\n        if ((i % 2) == 0) even_count += 1;\n        if ((i % 2) == 1) odd_count += 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    for (int c : (num + \"String_Node_Str\").toCharArray()) {\n        if ((c % 2 == 0) even_count += 1;\n        if (c % 2 == 1) odd_count += 1;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int c : (num + \"String_Node_Str\").toCharArray()) {\n        if ((c % 2 == 0) even_count += 1;\n        if ((c % 2 == 1) odd_count += 1;\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n</s>        result += sym[i];\n</s>        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}\n",
      "output": [
        {
          "patch": "        result += sym[number % num[i]];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += sym[i - 1];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += sym[number % sym.length];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += sym[i].toLowerCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += sym[number % sym[i]];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += sym.charAt(i);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += sym[Math.abs(number)];\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += sym[i].toUpperCase();\n",
          "correctness": "wrong"
        },
        {
          "patch": "        result += alphabet[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        result += sym[i] + \"0\";\n",
          "correctness": "wrong"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n</s>    return a*a + b*b == c*c;\n</s>}\n",
      "output": [
        {
          "patch": "    return a*a + b*b == c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return (a*a + b*b == c*c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * a + b * b == c * c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a * a + b * b == c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a*a == b*b + c*c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a*a + b*b + c*c == 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a*a + b*b == c*c;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a*a + b*b + c*c == 0;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a*a + b*b == c*c + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return a + b == c;\n",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n</s>            return s1.size() - s2.size();\n</s>        }\n    );\n    return words_list.get(0);\n}\n",
      "output": [
        {
          "patch": "            return s2.size() - s1.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return s1.size() - s2.size() + 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return s1.size() - s2.size() - 1;\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return Math.max(s1.size(), s2.size());\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return s1.size() + s2.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return s1.compareTo(s2);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "            return -s1.size() - s2.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "            return s1.size() - s2.size();\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n</s>    return new int[] {number + need,  remaining - need};\n</s>}\n",
      "output": [
        {
          "patch": "    return new int[] {number + need, remaining - need + 1};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number + need, remaining + need};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number + need, remaining + need + 1};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number - need, remaining - need};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number + need, remaining - need - 1};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number, remaining - need};\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number + need, remaining - need + 1 };\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return new int[] {number + need + remaining, remaining - need };\n",
          "correctness": "wrong"
        },
        {
          "patch": "    return null;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n</s>    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n</s>    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}\n",
      "output": [
        {
          "patch": "    for (int i = 0; i < operator.length; i += 1) {\n        expression += operator[i] + operand[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < operator.length; i++) {\n        expression += operator[i] + operand[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String expression = \"String_Node_Str\";\n    for (int i = 0; i < operator.length; i += 1) {\n        expression += operator[i];\n",
          "correctness": "wrong"
        },
        {
          "patch": "    String expression;\n    for (int i = 0; i < operator.length; i += 1) {\n        expression += operator[i] + operand[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String expression;\n    for (int i = 0; i < operator.length; i += 1) {\n        expression += operator[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    String expression;\n    for (int i = 0; i < operator.length; i += 1) {\n        expression = operator[i] + expression;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    for (int i = 0; i < operator.length; i += 1) {\n        expression += operator[i];\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    if (operand == null) {\n        return Double.NaN;\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n</s>        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n</s>    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "        if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append(Character.toLowerCase(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(Character.toLowerCase(c));\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "        if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append(Character.toUpperCase(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append(Character.toString(c));\n",
          "correctness": "wrong"
        },
        {
          "patch": "        sb.append((char) c);\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n</s>    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n</s>    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}\n",
      "output": [
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n",
          "correctness": "plausible"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    md = MessageDigest.getInstance(\"SHA-384\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(\"SHA-5\");\n",
          "correctness": "wrong"
        },
        {
          "patch": "    md = MessageDigest.getInstance(\"SHA-256\");\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(SHA_256);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    MessageDigest md = MessageDigest.getInstance(algorithm);\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "    md.reset();\n",
          "correctness": "uncompilable"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n</s>    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n</s>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "    int lower = Math.min(2, a);\n    int upper = Math.max(8, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.max(1, a);\n    int upper = Math.min(8, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = a;\n    int upper = b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.max(0, a);\n    int upper = Math.min(8, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.max(1, a);\n    int upper = Math.min(9, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.min(8, a);\n    int upper = Math.max(2, b);\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = Math.min(2, a);\n    int upper = b;\n",
          "correctness": "wrong"
        },
        {
          "patch": "    int lower = b;\n    int upper = a;\n",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}