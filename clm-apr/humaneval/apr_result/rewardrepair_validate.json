{
  "config": "finetune",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n</s>            double distance = numbers.get(i) - numbers.get(j);\n</s>            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "double  distance  =  i  -  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  (i  +  1)  -  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  j  <  0?  0  :  numbers.get(i)  -  j;",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  Math.abs(numbers.get(i)  -  numbers.get(j));",
          "correctness": "plausible"
        },
        {
          "patch": "double  distance  =  ((double)  numbers.get(i))  -  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  (double)  numbers.get(i)  -  (double)  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  numbers.get(j)  -  i  -  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  (double)  numbers.get(i)  -  numbers.get(j);",
          "correctness": "wrong"
        },
        {
          "patch": "double  distance  =  this.numbers.get(i)  -  this.numbers.get(j);",
          "correctness": "uncompilable"
        },
        {
          "patch": "double  distance  =  ((double)  numbers.get(i))  -  numbers.get(j);",
          "correctness": "wrong"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n</s>        } else {\n</s>            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "else  if  (c  ==  '(')  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "}  else  if  (c  ==  '(')  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '(')  {",
          "correctness": "uncompilable"
        },
        {
          "patch": ";  }  else  if  (c  ==  '('))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": ";  }  else  if  (c  ==  '(')  {",
          "correctness": "wrong"
        },
        {
          "patch": "continue;  }  else  if  (c  ==  '(')  {",
          "correctness": "wrong"
        },
        {
          "patch": "else  if  (c!=  '(')  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '(')  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c!=  '(')  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  paren_string.toCharArray();  }  else  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n</s>    return number / 1.0;\n</s>}\n",
      "output": [
        {
          "patch": "return  (double)(number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  (double)number  /  1.0;",
          "correctness": "wrong"
        },
        {
          "patch": "return  (double)Math.round(number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  Math.round(number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  number  /  1.0;",
          "correctness": "wrong"
        },
        {
          "patch": "return  (double)  (number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  Math.abs(number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  Double.parseDouble(number)  /  1.0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (double)Math.ceil(number  /  1.0);",
          "correctness": "wrong"
        },
        {
          "patch": "return  (double)number  /  (double)1.0;",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n</s>        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n</s>}\n",
      "output": [
        {
          "patch": "if  (balance  >  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >=  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  <  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >  0)  {  return  false;  }  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  <=  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >=  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  ==  0)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >  1)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (balance  >  -1)  {  return  false;  }  }  return  true;",
          "correctness": "wrong"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n</s>        deviation_sum += (number - mean) * (number - mean);\n</s>    }\n    return deviation_sum / numbers.size();\n}\n",
      "output": [
        {
          "patch": "if  (number  >  mean)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  >  mean)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "else  {  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);  }",
          "correctness": "uncompilable"
        },
        {
          "patch": ";  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "if(number  >  mean)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sum  >  0)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  <  mean)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  >=  mean)  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "wrong"
        },
        {
          "patch": "s.add(number);  deviation_sum  +=  (number  -  mean)  *  (number  -  mean);",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n</s>    for (int i = 0; i < numbers.size(); i += 1) {\n</s>        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  numberCounts.size();  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <=  numbers.size();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size()  -  1;  i  +=  1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numberCount;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size();  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size();  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  integers.size();  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  numbers.size();  i  +=  1)  {",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n</s>            }\n</s>        }\n        result.add(max_depth);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result  =  new  ArrayList  <  Integer>();  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(   \"   \");  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  new  ArrayList  <  Integer>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "new  ArrayList  <  Integer>();  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(   \"   \");  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addAll(result);  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(max_depth);  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.addAll(result);  }",
          "correctness": "wrong"
        },
        {
          "patch": "paren_group  =  paren_group.trim();  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.addAll(paren_groups);  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n</s>        result.add(string);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result.add(string.toLowerCase());",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string!=  null)  result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string!=  null)  result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.trim());",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string!=  null)  {  result.add(string);  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  new  ArrayList  <  String>();  result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(String.valueOf(string));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.toUpperCase());",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.length()  >  0)  result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "if(string!=  null)  result.add(string);",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n</s>    Integer[] result = new Integer[2];\n</s>    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "Integer[]  result  =  new  Integer[1];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[1];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[0];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[2];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[2];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[3];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[0];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[n];",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer[]  result  =  new  Integer[4];",
          "correctness": "wrong"
        },
        {
          "patch": ".Integer[]  result  =  new  Integer[2];",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n</s>        running_max = Math.max(running_max, n);\n</s>        result.add(running_max);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "running_max  =  Math.max(running_max,  n  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n);",
          "correctness": "wrong"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "running_max  =  Math.min(running_max,  n);",
          "correctness": "wrong"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "Running_max  =  Math.max(running_max,  n  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Running_max  =  Math.max(running_max,  n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n,  0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n);",
          "correctness": "wrong"
        },
        {
          "patch": "running_max  =  Math.max(running_max,  n  +  1);",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n</s>    result += str.substring(0, beginning_of_suffix);\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "result  +=  str.substring(0,  beginning_of_suffix);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  str.substring(0,  beginning_of_suffix);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  str.substring(0,  beginning_of_suffix  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  str.substring(0,  beginning_of_suffix);",
          "correctness": "wrong"
        },
        {
          "patch": "result.append(str.substring(0,  beginning_of_suffix));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=  str.substring(0,  beginning_of_suffix+1);",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  str.substring(0,  beginning_of_suffix);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  str.substring(0,  beginning);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=  str.substring(0,  begin_of_suffix);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=  str.substring(0,  starting_of_suffix);",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n</s>    }\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "result  +=   \"0   \";  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.toLowerCase();  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.replace(   \"   \",   \"   \");  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =   \"   \";  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.replaceAll(   \"   \",   \"   \");  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=   \"   \";  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =   \"0   \";  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.trim();  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.replace(   \"   \",   \"   \");  }",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result.replace(   \",   \",   \"   \");  }",
          "correctness": "wrong"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n</s>        if (strings.size() > string.length()){\n            maxlen = strings.size();\n</s>        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}\n",
      "output": [
        {
          "patch": "if  (strings.size()  >=  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  >=  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  <  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  <=  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  <  string.length())  {  maxlen  =  maxlen;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  >=  string.length())  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  ==  string.length())  {  maxlen  =  string.length();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  <  string.length())  {  maxlen  =  string.size();",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (strings.size()!=  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (strings.size()  <  string.length())  {  maxlen  =  strings.size();",
          "correctness": "wrong"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n</s>        a = b;\n        b = a % b;\n</s>    }\n    return a;\n}\n",
      "output": [
        {
          "patch": "b  =  a  %  b;",
          "correctness": "wrong"
        },
        {
          "patch": "b  =  b  %  b;",
          "correctness": "wrong"
        },
        {
          "patch": "b  =  a  %  b;",
          "correctness": "wrong"
        },
        {
          "patch": "a  =  b  %  b;",
          "correctness": "timeout"
        },
        {
          "patch": "a  =  b;",
          "correctness": "timeout"
        },
        {
          "patch": "a  =  b;  b  =  b;",
          "correctness": "timeout"
        },
        {
          "patch": "a  =  b;  b  =  b%  b;",
          "correctness": "wrong"
        },
        {
          "patch": "b  =  a  %  b  %  b;",
          "correctness": "wrong"
        },
        {
          "patch": "a  =  b;  b  =  a%  b;",
          "correctness": "wrong"
        },
        {
          "patch": "b  =  b  %  b;",
          "correctness": "wrong"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n</s>        result.add(string.substring(i + 1));\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result.add(string.substring(i  +  1,  string.length()));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i  +  1).trim());",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i+1));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(0,  i  +  1));",
          "correctness": "plausible"
        },
        {
          "patch": "result.add(string.substring(i  +  1  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i  +  1,  result.length()));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string.substring(i  +  1,  i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string.substring(i  +  1  -  1).trim());",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n</s>    return result;\n</s>}\n",
      "output": [
        {
          "patch": "return  result  ==  null?   \"   \"  :  result;",
          "correctness": "wrong"
        },
        {
          "patch": "return  result  ==  null?  null  :  result;",
          "correctness": "wrong"
        },
        {
          "patch": "return  result.toLowerCase();",
          "correctness": "wrong"
        },
        {
          "patch": "return  String.valueOf(result);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =   \"   \";  return  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =   \"   \";  //$NON-NLS-1$",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =   \"   \";  return  result  +   \"   \";",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  result.toLowerCase();",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  String.valueOf(result);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  result.toString();",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n</s>            distinct.add(c);\n</s>    }\n    return distinct.size();\n}\n",
      "output": [
        {
          "patch": "distinct.add(String.valueOf(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "distinct.add(Character.toCharArray(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "distinct.add(Character.toString(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "distinct.add((char)  c);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  >=  0)  distinct.add(c);",
          "correctness": "wrong"
        },
        {
          "patch": "distinct.add(c);",
          "correctness": "wrong"
        },
        {
          "patch": "distinct.add((char)c);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  >  0)  distinct.add(c);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  <  0)  distinct.add(c);",
          "correctness": "wrong"
        },
        {
          "patch": "distinct.add(c)  {  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n</s>    for (String note : music_string.split(\" \")){\n</s>        result.add(note_map.get(note));\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (String  note  :  music_string.split(   \"   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.split(   \"   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.split('  '))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  String>  notes  =  new  ArrayList  <  String>(music_string);  for  (String  note  :  notes)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (String  note  :  music_string.split(   \"_   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.split(   \"   \").split(   \"   \"))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (String  note  :  music_string.trim().split(   \"   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.toLowerCase().split(   \"   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.split(   \"/   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (String  note  :  music_string.split(   \"*   \"))  {",
          "correctness": "wrong"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n</s>    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n</s>        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  string.length()  -  substring.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  string.length()  -  substring.length();  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  string.length()  +  substring.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  string.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  string.length()  -  substring.length();  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  string.length()  -  substring.length()  +  1;  i  +=  1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "(int  i  =  0;  i  <  string.length()  -  substring.length());  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  string.length()  -  substring.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  0;  i  <  string.length()  -  substring.length();  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <  string.length()  -  substring.length()  -  1);  i  +=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n</s>    Collections.sort(number_array);\n</s>    \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}\n",
      "output": [
        {
          "patch": "Collections.sort(number_array);",
          "correctness": "wrong"
        },
        {
          "patch": "Collections.sort(number_array);",
          "correctness": "wrong"
        },
        {
          "patch": "Collections.sort(number_array.trim());",
          "correctness": "uncompilable"
        },
        {
          "patch": "=  Collections.asList(numbers.split(   \"   \"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  String>  Arrays.sort(number_array);",
          "correctness": "uncompilable"
        },
        {
          "patch": ".sort(number_array);",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  String>  number_array  =  new  ArrayList  <  String>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "Collections.sort(number_array.split(   \"   \"));",
          "correctness": "uncompilable"
        },
        {
          "patch": "Collections.sort(number_array  +   \"   \"  +  number_array);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Collections.sort(number_array.toLowerCase());",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n</s>        for (int j = 0; j < numbers.length; j += 1){\n</s>            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  j  =  0;  j  <=  numbers.length;  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  results.length;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  result.length;  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "For  (int  j  =  0;  j  <=  numbers.length;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  data.length;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <=  numbers.length;  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  1;  j  <=  numbers.length;  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  result.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  distance;  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  length;  j  +=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n</s>        else if (numbers[i] < min) {\n</s>            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (numbers[i]  <  min)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if  (numbers[i]  <  min)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if  (max  <  min)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (max  >=  numbers.length)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numbers[i]  >  min)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (max  <  numbers[i])  {",
          "correctness": "wrong"
        },
        {
          "patch": "If  (numbers[i]  <  min)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (max  >=  numbers[i])  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (max  >=  numbers.length)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (max  <  min)  {",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n</s>        result.add((Integer) value);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result.add(Integer.valueOf(value));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add((Integer)  value);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add((Object)  value);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add((Integer)  value);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add((Integer)  value.clone());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(new  Integer(value));",
          "correctness": "uncompilable"
        },
        {
          "patch": "Result.add((Integer)  value);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(((Integer)  value));",
          "correctness": "wrong"
        },
        {
          "patch": "result.addAll((Integer)  value);",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n</s>    return string.length() - 1;\n</s>}\n",
      "output": [
        {
          "patch": "return  string.length()  ==  0?  0  :  string.length()  -  1;",
          "correctness": "wrong"
        },
        {
          "patch": "return  string.length()  >  0?  string.length()  -  1  :  0;",
          "correctness": "wrong"
        },
        {
          "patch": "int  length  =  string.length();  return  length  ==  0?  0  :  length;",
          "correctness": "plausible"
        },
        {
          "patch": "return  string.length()  >  0?  string.length()  -  1  :  string.length();",
          "correctness": "wrong"
        },
        {
          "patch": "return  string  ==  null?  0  :  string.length()  -  1;",
          "correctness": "wrong"
        },
        {
          "patch": "int  length  =  string.length();  return  length  >  0?  length  -  1  :  length;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string  ==  null)  return  0;  return  string.length()  -  1;",
          "correctness": "wrong"
        },
        {
          "patch": "return  string.length()  >  0?  string.length()  -  1  :  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "(string  ==  null)?  0  :  string.length()  -  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (string  ==  null)  {  return  0;  }  return  string.length()  -  1;",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n</s>    for (int i = n; i >= 0; i -= 1){\n</s>        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  n;  i  <=  0;  i  -=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n;  i  >=  0;  i  -=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n;  i  >=  0;  i  -=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n;  i  <  0;  i  -=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n  -  1;  i  >=  0;  i-=  1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "for  (int  i  =  n;  i  >=  0;  i  -=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n;  i  >=  0;  i  -=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  n;  i  <=  0;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  n;  i  >=  0;  i  -=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  n;  i  <  0;  i++)  {",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n</s>    return result;\n</s>}\n",
      "output": [
        {
          "patch": "return  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "new  ArrayList  <  Integer>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "i++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  Integer.valueOf(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": ".addAll(result);",
          "correctness": "uncompilable"
        },
        {
          "patch": ".addAll(result);  return  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "=  new  ArrayList  <  Integer>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "i  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Result.add(result);  return  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": ".add(new  Integer(i));",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n</s>        count.put(n, count.get(n) + 1);\n</s>    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": ".put(n,  count.get(n));",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.put(n,  count.get(n));",
          "correctness": "wrong"
        },
        {
          "patch": ".put(n,  count.get(n)  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.put(n,  count.get(n)  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "((Integer)n).put(n,  count.get(n));",
          "correctness": "uncompilable"
        },
        {
          "patch": "Count().put(n,  count.get(n)  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.put(n,  count.get(n)  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Count  =  0;  count.put(n,  count.get(n)  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Count++;  count.put(n,  count.get(n)  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  1)  count.put(n,  count.get(n)  +  1);",
          "correctness": "wrong"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n</s>            char_list[i] = Character.toLowerCase(c);\n        }\n        else {\n            char_list[i] = Character.toUpperCase(c);\n</s>        }\n    }\n    return new String(char_list);\n}\n",
      "output": [
        {
          "patch": "char_list[i]  =  Character.toUpperCase(c);",
          "correctness": "wrong"
        },
        {
          "patch": "char_list[i]  =  Character.toUpperCase(c);",
          "correctness": "wrong"
        },
        {
          "patch": "char_list[i]  =  Character.toUpperCase(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "char_list[i]  =  Character.toLowerCase(c);",
          "correctness": "wrong"
        },
        {
          "patch": "char_list[i]  =  Character.toUpperCase(char_list);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Char  char_list[i]  =  Character.toUpperCase(c);",
          "correctness": "uncompilable"
        },
        {
          "patch": "char_list[i]  =  Character.toLowerCase(c);",
          "correctness": "wrong"
        },
        {
          "patch": "char_list[i]  =  Character.toUpperCase(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "char_list[i]  =  Character.toUpperCase(c,  false);",
          "correctness": "uncompilable"
        },
        {
          "patch": "char_list[i]  =  Character.toLowerCase(i);",
          "correctness": "uncompilable"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n</s>    String result = null;\n</s>    for (String string : strings)\n        result += string;\n    return result;\n}\n",
      "output": [
        {
          "patch": "String  result  =   \"   \";",
          "correctness": "wrong"
        },
        {
          "patch": "null  String  result  =  null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  null;",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  String.class;",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  new  String[0];",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  new  String[]  {  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  new  String();",
          "correctness": "plausible"
        },
        {
          "patch": "final  String  result  =  null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "NullPointer  result  =  null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  result  =  null;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n</s>        if (string.startsWith(prefix, 1)){\n</s>            result.add(string);\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (string.startsWith(prefix,  0))  {",
          "correctness": "plausible"
        },
        {
          "patch": "if  (string.startsWith(prefix,  0))  {",
          "correctness": "plausible"
        },
        {
          "patch": "if  (string.toLowerCase().startsWith(prefix,  1))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string!=  null  &&  string.startsWith(prefix,  1))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.startsWith(prefix,  3))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string!=  null  &&  string.startsWith(prefix,  1))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.toLowerCase().startsWith(prefix,  1))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.startsWith(prefix.toLowerCase(),  1))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.startsWith(prefix,  3))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (string.startsWith(prefix.toLowerCase(),  1))  {",
          "correctness": "wrong"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n</s>        result.add(number);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result.add(new  Integer(number));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number.intValue());",
          "correctness": "wrong"
        },
        {
          "patch": "((Integer)  result).add(number);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(number.toInt());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add((Integer)  number);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number.toInt());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(number.toInteger());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addElement(number);",
          "correctness": "uncompilable"
        },
        {
          "patch": ".add(number.intValue());",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n</s>    for (int k = 0; k < n; k += 1){\n</s>        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "for  (int  k  =  0;  k  <=  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n  -  1;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  0;  k  <  n;  k++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n  +  1;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  0;  k  <  n;  k  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n  +  1;  k  <=  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  0;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n;  k  <=  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n;  k  <  n;  k++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  n;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n</s>        if (poly(xs, begin) * poly(xs, end) < 0) {\n</s>            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
      "output": [
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  >  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  <  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  <=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  >  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  <  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  <=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs)  <  0)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  >=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs)  <  0)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (poly(xs,  begin)  *  poly(xs,  end)  >=  0)  {",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n</s>            result.add(thirds.get(i));\n</s>        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result.add(l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add((Integer)l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "Result.add(l.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add((int)l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add((int)  l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add((int)(l.get(i)));",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(Integer.valueOf(i));",
          "correctness": "wrong"
        },
        {
          "patch": "result.addAll(l.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(trs.get(i));",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n</s>        result.add(n);\n</s>    }\n    Collections.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "((Integer)n).add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n!=  null)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n!=  0)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "((Integer)  n).add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n!=  null)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n!=  n)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  >  0)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n!=  l)  result.add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n!=  -1)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n!=  null)  result.add(n);",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n</s>    int m = 0;\n</s>    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}\n",
      "output": [
        {
          "patch": "null  m  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  m  =  0;",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  m  =  l;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  m  =  0;",
          "correctness": "wrong"
        },
        {
          "patch": "float  m  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  m  =  1;",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  m  =  0;",
          "correctness": "wrong"
        },
        {
          "patch": "int  m  =  -1;",
          "correctness": "plausible"
        },
        {
          "patch": "Number  m  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "null  m  =  l;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n</s>            for (int j = 0; j < i + \"\".length(); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n</s>                    result += 1;\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \".substring(j,  j)  ==   \"7   \")",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j,  j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \".substring(j,  j  +  1)  ==   \"7   \")",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \" \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j,  j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \".substring(j,  j)  ==   \"7 \")",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  i  +   \" \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  0;  j  <  i  +   \" \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j,  j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \"   \".equals(j,  j))",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  0;  j  <  i  +   \".length();  j  +=  1)  {  if  (i  +   \".substring(j,  j)  ==   \"7   \")",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n</s>    int[] evens = new int[1 + (int) (l.length / 2.)];\n</s>    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "int[]  evens  =  new  int[2  +  (int)  (l.length  /  2.)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2.)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2.0)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2]];",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2];",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[1  +  (int)  (l.length  /  2.)];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  evens  =  new  int[l.length  /  2];",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n</s>    for (int i = 0; i < s.length(); i += 3){\n</s>        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  s.length();  i  +=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length();  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length()  -  1;  i  +=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length();  i  +=  4)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length();  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length()  -  2;  i  +=  3)  {",
          "correctness": "plausible"
        },
        {
          "patch": "for  (int  i  =  0;  i  <=  s.length();  i  +=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  s.length();  i  +=  5)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  s.length();  i  +=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  0;  i  <  s.length()  -  1;  i  +=  3)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n</s>        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1)))\n</s>            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}\n",
      "output": [
        {
          "patch": "if  (is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (len  >  0  &&  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (len  >  0  &&  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (fib  ==  null  ||  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (len  <  0  ||  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (n  >  0  &&  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (!is_prime(fib.get(len  -  1)))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  ==  0  &&  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        },
        {
          "patch": "if  (n  ==  0  ||  is_prime(fib.get(len  -  1)))",
          "correctness": "timeout"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n</s>        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n</s>                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  j++)  {  for  (int  k  =  j;  k  <  numbers.length;  k++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  j  +=  1)  {  for  (int  k  =  j;  k  <  numbers.length;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  numbers.length;  j  +=  1)  {  for  (int  k  =  j;  k  <  numbers.length;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  k++)  {  for  (int  k  =  j;  k  <  numbers.length;  k++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  names.length;  j  +=  1)  {  for  (int  k  =  j;  k  <  names.length;  k  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  j  +=  2)  {  for  (int  k  =  j;  k  <  numbers.length;  k  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  j++)  {  for  (int  k  =  j;  k  <  numbers.length;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numbers.length;  j  +=  2)  {  for  (int  k  =  j;  k  <  numbers.length;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  numberCount;  j  +=  1)  {  for  (int  k  =  j;  k  <  numberCount;  k  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  i;  j  <  times.length;  j  +=  1)  {  for  (int  k  =  j;  k  <  times.length;  k  +=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n</s>    return n;\n</s>}\n",
      "output": [
        {
          "patch": "return  n  ==  0?  0  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "return  n  <  0?  0  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "return  n  >  0?  n  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "//$NON-NLS-1$  return  n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  n  <  0?  -1  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(   \"unused   \")  return  n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  n  >=  0?  n  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "return  n!=  0?  n  :  0;",
          "correctness": "wrong"
        },
        {
          "patch": "return  n  ==  0?  1  :  n;",
          "correctness": "wrong"
        },
        {
          "patch": "return  n  ==  0?  -1  :  n;",
          "correctness": "wrong"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n</s>        result.add(n - 1);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "((Integer)n).add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Integer)n).add(n  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Integer)  n).add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n  >  0?  n  -  1  :  n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Integer)  n).add(n  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  0)  result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  >  0)  result.add(n  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "((Integer)n).add(n  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Number)n).add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >=  0)  result.add(n);",
          "correctness": "wrong"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n</s>        for (int j = 0; j < l.size(); j += 1){\n</s>            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "for  (int  j  =  0;  j  <=  l.size();  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  l.size();  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  l.size();  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  l.size();  j  +=  2)  {",
          "correctness": "plausible"
        },
        {
          "patch": "for  (int  j  =  l.size()-1;  j  <  l.size();  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  l.size()  -  1;  j  >=  0;  j--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  1;  j  <=  l.size();  j  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  l.size()  -  1;  j  +=  1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "(int  j  =  0;  j  <  l.size();  j  +=  1))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  l.size()-1;  j  >=  0;  j--)  {",
          "correctness": "wrong"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n</s>        result = result + x % base;\n        x = x - x / base;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "x  =  x  -  x  /  base;",
          "correctness": "timeout"
        },
        {
          "patch": "x  =  x  -  base;",
          "correctness": "wrong"
        },
        {
          "patch": "x  =  x  -  base  -  x  /  base;",
          "correctness": "wrong"
        },
        {
          "patch": "x  =  base  +  x  -  x  /  base;",
          "correctness": "timeout"
        },
        {
          "patch": "x  -=  x  /  base;",
          "correctness": "timeout"
        },
        {
          "patch": "x  =  x  -  base  +  x  %  base;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (x  >  0)  result  =  result  +  x  %  base;",
          "correctness": "timeout"
        },
        {
          "patch": "x  =  x  -  base  +  x  /  base;",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  result  +  x  %  base;",
          "correctness": "timeout"
        },
        {
          "patch": "x  =  (x  -  x  /  base)  %  base;",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n</s>    return a * h;\n</s>}\n",
      "output": [
        {
          "patch": "return  a  *  h;",
          "correctness": "wrong"
        },
        {
          "patch": "return  triangle_area(a,h);",
          "correctness": "wrong"
        },
        {
          "patch": "return  (double)(a  *  h);",
          "correctness": "wrong"
        },
        {
          "patch": "return  (int)(a  *  h);",
          "correctness": "wrong"
        },
        {
          "patch": "return  triangle_area(a,  h);",
          "correctness": "wrong"
        },
        {
          "patch": "return  a  /  h;",
          "correctness": "wrong"
        },
        {
          "patch": "return  triangle_area(a  *  h);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((double)a)  *  ((double)h);",
          "correctness": "uncompilable"
        },
        {
          "patch": "s  *  h;  return  s  *  h;",
          "correctness": "uncompilable"
        },
        {
          "patch": "d  =  a  *  h;  return  d;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n</s>    }\n</s>    return result.get(result.size() - 1);\n}\n",
      "output": [
        {
          "patch": "result  =  new  ArrayList  <  Integer>();  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  <  4)  return  result.get(n);  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(0);  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (result  ==  null)  continue;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  <  5)  return  result.get(n);  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(result.size());  }",
          "correctness": "wrong"
        },
        {
          "patch": "result.size()  -  1;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  4)  return  result.get(n);  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  <  3)  return  result.get(n);  }",
          "correctness": "wrong"
        },
        {
          "patch": ".add(result.size()  -  1);  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n</s>        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n</s>    }\n}\n",
      "output": [
        {
          "patch": "return  list[(int)  (list.length  /  2)]  +  list[(int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "wrong"
        },
        {
          "patch": "return  value[(int)  (list.length  /  2)]  +  value[(int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  double[(int)  (list.length  /  2)]  +  list[(int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (int)  (list.length  /  2)  +  list[(int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "wrong"
        },
        {
          "patch": "return  list[(int)  (list.length  /  2)]  +  (int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  list[(int)(list.length  /  2)]  +  list[(int)(list.length  /  2)  +  1]  /  2;",
          "correctness": "wrong"
        },
        {
          "patch": "return  array[(int)  (list.length  /  2)]  +  array[(int)  (list.length  /  2)  +  1]  /  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  list[(int)  (list.length  /  2)]  +  list[(int)  (list.length  /  2)  +  1];",
          "correctness": "wrong"
        },
        {
          "patch": "return  list[(int)  (list.length  /  2)]  +  list[(int)  (list.length  /  2)]  +  1]  /  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  list[(int)  (list.length  /  2)]  +  list[(int)(list.length  /  2)  +  1]  /  2;",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n</s>        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i))  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i))  return  false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  <  text.length()  &&  text.charAt(i)  ==  text.charAt(i))  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  >=  text.length()  &&  text.charAt(i)  ==  text.charAt(i))  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i))  return  false;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(i))  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  <  text.length()  &&  text.charAt(i)  ==  text.charAt(i))  return  true;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i  +  1))  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i))  return  true;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text.charAt(i)  ==  text.charAt(text.length()  -  i))  return  true;",
          "correctness": "uncompilable"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n</s>        result = 2 * result;\n    }\n    return result % p;\n</s>}\n",
      "output": [
        {
          "patch": "result  =  2  *  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  2  *  result  %  p;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  2  *  result;  }  return  result;",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  3  *  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  result  %  p;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  3  *  result;  }  return  result;",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  2  *  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  2  *  result  %  p;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  2  *  result;  }  return  p;",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n</s>        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n</s>        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a'))  %  26)  +  (int)('a'));",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a'))  %  26)  +  (int)('a'));",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  (char)((((int)  c  -  5  -  (int)('a'))  %  26)  +  (int)('a'));",
          "correctness": "wrong"
        },
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a'))  +  (int)('a'));",
          "correctness": "wrong"
        },
        {
          "patch": "(char)(((int)  c  -  5  -  (int)('a'))  %  26)  +  (int)('a'));",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a'))  %  26)  +  (int)('a')));",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  (char)((((int)  c  -  5  -  (int)('a')))  +  (int)('a'));",
          "correctness": "wrong"
        },
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a'))  +  (int)('a'));",
          "correctness": "wrong"
        },
        {
          "patch": "c  =  (char)(((int)  c  -  5  -  (int)('a')))  +  (int)('a'));",
          "correctness": "uncompilable"
        },
        {
          "patch": "c  =  (char)((((int)  c  -  5  -  (int)('a'))  %  26));",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n</s>        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n</s>            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'a')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u')  {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u')  {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'b')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'c')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'f')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  't')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'h')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'a'  ||  c  ==  'e'  ||  c  ==  'i'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'p')",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n</s>        if (l[i] <= t)\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "if  (l[i]  <=  t)  return  false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  false;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  false;  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  true;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  false;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  true;  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <  t)  return  true;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  false;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l[i]  <=  t)  return  false;  return  true;",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n</s>    return x | y;\n</s>}\n",
      "output": [
        {
          "patch": "return  Integer.MAX_VALUE  |  Integer.MAX_VALUE;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (x  ==  0  ||  y  ==  0)  return  0;  return  0;",
          "correctness": "wrong"
        },
        {
          "patch": "return  Integer.valueOf(x)  |  Integer.valueOf(y);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (x  <  0  ||  y  <  0)  return  0;  else  return  0;",
          "correctness": "wrong"
        },
        {
          "patch": "Point  p  =  new  Point(x);  return  p.add(p.x,  p.y);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  Integer.valueOf(x,  Integer.valueOf(y));",
          "correctness": "uncompilable"
        },
        {
          "patch": "Double.isNaN(x)?  Double.NaN  :  Double.NaN;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (x  <  0  ||  y  <  0)  return  0;  return  0;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (x  ==  0  ||  y  ==  0)  return  0;  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "return  (x  &  0xFFFF)  |  (y  &  0xFFFF);",
          "correctness": "wrong"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n</s>    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n</s>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}\n",
      "output": [
        {
          "patch": "ArrayList  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "List  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "List  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  Character>  set1  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "nullSet  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "HashSet  <  Character>  set0  =  new  HashSet  <  Character>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "ArrayList  <  Character>  set0  =  new  ArrayList  <  Character>(s0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "List  <  Character>  set0  =  new  ArrayList  <  Character>(s0.toCharArray());",
          "correctness": "uncompilable"
        },
        {
          "patch": "nullList  <  Character>  set0  =  new  ArrayList  <  Character>();",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n</s>    return fib(n - 1) + fib(n - 2);\n</s>}\n",
      "output": [
        {
          "patch": "return  fib(n  -  1)  +  fib(n  -  2);",
          "correctness": "wrong"
        },
        {
          "patch": "return  fib(n  -  1)  +  fib(n  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "int  fib(n  -  1)  +  fib(n  -  2);  return  fib(n  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n  >  0)?  fib(n  -  1)  :  fib(n  -  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  fib(n  -  1)  +  fib(n  -  2);  return  fib(n  -  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  fib  =  fib(n  -  1);  return  fib  +  fib(n  -  2);",
          "correctness": "wrong"
        },
        {
          "patch": "return  fib(n  >  0?  fib(n  -  1)  :  fib(n  -  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  fib(n  >  0?  fib(n  -  1)  :  fib(n  -  2));",
          "correctness": "wrong"
        },
        {
          "patch": "return  fib(n  -  1)  +  fib(n  -  2);",
          "correctness": "wrong"
        },
        {
          "patch": "return  fib(n  -  1)  +  fib(n  -  3);",
          "correctness": "wrong"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n</s>        if (depth >= 0)\n            return true;\n    }\n    return false;\n</s>}\n",
      "output": [
        {
          "patch": "if  (depth  >=  0)  return  false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (depth  >  0)  return  false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (depth  >  0)  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (depth  >  0)  return  true;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (depth  >  0)  return  false;  }  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (depth  >  0)  return  false;  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (depth  >=  0)  return  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (depth  >  0)  return  true;  }  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (depth  >=  0)  return  false;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (depth  >  0)  return  false;  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n</s>    sorted = l;\n</s>    \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}\n",
      "output": [
        {
          "patch": "sorted  =  new  int[l.length];",
          "correctness": "wrong"
        },
        {
          "patch": "sorted  =  l;",
          "correctness": "wrong"
        },
        {
          "patch": "sorted  =  l.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sorted  =  (int[])  l;",
          "correctness": "wrong"
        },
        {
          "patch": "sorted  =  l.length  -  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sorted  =  new  int[l.length];",
          "correctness": "wrong"
        },
        {
          "patch": "sorted  =  l.length  -  i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sorted  =  (int[])l;",
          "correctness": "wrong"
        },
        {
          "patch": "sorted  =  (int)  l.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sorted  =  (int)  l;",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n</s>    ArrayList<Integer> common = new ArrayList<Integer>();\n</s>    \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "ArrayList  <  Integer>  common  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  Integer>  common  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "Set  <  Integer>  common  =  new  HashSet  <  Integer>();",
          "correctness": "plausible"
        },
        {
          "patch": "List  <  Integer>  common  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "ArrayList  <  Integer>  common  =  new  ArrayList  <  >();",
          "correctness": "wrong"
        },
        {
          "patch": "ArrayList  <  Integer>  common  =  new  ArrayList  <  Integer>(1);",
          "correctness": "wrong"
        },
        {
          "patch": "ArrayList  <  Integer>  common  =  new  ArrayList  <  Integer>(0);",
          "correctness": "wrong"
        },
        {
          "patch": "ArrayList  <  Integer>  common  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "Collection  <  Integer>  common  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "Set  <  Integer>  common  =  new  HashSet  <  Integer>();",
          "correctness": "plausible"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n</s>        if (is_prime(j)){\n            largest = n % j;\n</s>        }\n    }\n    return largest;\n}\n",
      "output": [
        {
          "patch": "if  (is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j)  ||  is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (!is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j)  ||  is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j))  {  largest  =  n  %  j;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j)  &&  j  <  n)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j)  &&  n  ==  j)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (!is_prime(j))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (is_prime(j)  ||  n  ==  j)  {",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n</s>    return (n + 1) * (n / 2);\n</s>}\n",
      "output": [
        {
          "patch": "(n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (n  +  1)  *  (n  /  2);",
          "correctness": "wrong"
        },
        {
          "patch": "(n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  (n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  0)  return  (n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)(n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  <  0)  return  (n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n+1)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n  +  2)  *  (n  /  2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n  +  1)  *  (n  /  2);",
          "correctness": "uncompilable"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n</s>    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  xs.size();  i  +=  1)  result.add(xs.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  0;  i  <  xs.size();  i  +=  1)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  xs.size();  i  +=  2)  result.add(xs.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <=  xs.size();  i  +=  1)  result.add(xs.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  xs.size();  i++)  result.add(xs.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  0;  i  <  xs.size();  i  +=  2)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <=  xs.size();  i  +=  1)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <  xs.size();  i++)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <  xs.size()  -  1;  i  +=  1)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "For  (int  i  =  0;  i  <  xs.size();  i  +=  1)  result.add(xs.get(i));",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n</s>    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n</s>}\n",
      "output": [
        {
          "patch": "return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  ==  1)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  <  0)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "(n  ==  0)?  0  :  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  0)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  ==  3)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  ==  2)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        },
        {
          "patch": "fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "uncompilable"
        },
        {
          "patch": "bfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  >  1)  return  0;  return  fibfib(n  -  1)  +  fibfib(n  -  2)  +  fibfib(n  -  3);",
          "correctness": "wrong"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n</s>    if (str_chars[str_chars.length - 1] == 'y')\n</s>        result += 1;\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (str_chars[str_chars.length  -  2]  ==  'y')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'a')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'h')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'u')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'p')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'x')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'Y')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  2]  ==  'y')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (str_chars[str_chars.length  -  1]  ==  'o')",
          "correctness": "wrong"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n</s>        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n</s>    }\n}\n",
      "output": [
        {
          "patch": "s  =  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift  -  1);  return  s.toString();",
          "correctness": "wrong"
        },
        {
          "patch": "s  =  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift  -  1);  return  s;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.length()  >  shift)  return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (s.length()  >  0)  return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift);",
          "correctness": "wrong"
        },
        {
          "patch": "return  s.substring(s.length()  -  shift)  +  s.substring(0,  s.length()  -  shift);",
          "correctness": "plausible"
        },
        {
          "patch": "StringBuilder  sb  =  new  StringBuilder();  return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift);",
          "correctness": "wrong"
        },
        {
          "patch": "StringBuffer  sb  =  new  StringBuffer();  return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift);",
          "correctness": "wrong"
        },
        {
          "patch": "s  =  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift);  return  s;",
          "correctness": "wrong"
        },
        {
          "patch": "s  =  new  StringBuilder();  return  s.substring(s.length()  -  shift  +  1)  +  s.substring(0,  s.length()  -  shift  -  1);",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n</s>        if (c == ' ')\n            break;\n</s>        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (c  =='')  break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  result  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  {  break;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  result  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  {  break;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  =='')  return  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '')  break;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n</s>        int cnt = Integer.parseInt(str);\n        result -= cnt;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "cnt  =  Integer.parseInt(str);",
          "correctness": "uncompilable"
        },
        {
          "patch": "cnt  =  Integer.parseInt(str.trim());",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  cnt  =  Integer.parseInt(str);",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  cnt  =  Integer.parseInt(str);",
          "correctness": "wrong"
        },
        {
          "patch": "result  -=  Integer.parseInt(str);",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  cnt  =  Integer.parseInt(str);",
          "correctness": "wrong"
        },
        {
          "patch": "Result  -=  Integer.parseInt(str);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  -=  Integer.parseInt(str);",
          "correctness": "wrong"
        },
        {
          "patch": "cnt  =  Integer.parseInt(str).trim();",
          "correctness": "uncompilable"
        },
        {
          "patch": "++int  cnt  =  Integer.parseInt(str);",
          "correctness": "uncompilable"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n</s>    int min_even = 0;\n    int index = 0;\n</s>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}\n",
      "output": [
        {
          "patch": "int  min_even  =  arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_even  =  arr.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_even  =  arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "null  min_even  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_even  =  arr[i].length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_even  =  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "t  min_even  =  arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  min_even  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  min_even  =  0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "nt  min_even  =  0;",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n</s>    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n</s>    \n    return result;\n}\n",
      "output": [
        {
          "patch": "int[]  frq  =  new  int[max];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  frq  =  new  int[max];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  frq  =  new  Integer[max];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  frq  =  new  int[max  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  frq  =  new  Integer[max];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  frq  =  new  int[max  +  1];",
          "correctness": "wrong"
        },
        {
          "patch": "[]  frq  =  new  int[max];",
          "correctness": "uncompilable"
        },
        {
          "patch": "t[]  frq  =  new  int[max];",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[]  frq  =  new  int[max  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  frq  =  new  int[max+1];",
          "correctness": "wrong"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n</s>    }\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "result  =  new  ArrayList  <  Integer>();  }",
          "correctness": "timeout"
        },
        {
          "patch": "new  ArrayList  <  Integer>();  }",
          "correctness": "timeout"
        },
        {
          "patch": "result  =  new  ArrayList  <  Integer>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "Result  =  new  ArrayList  <  Integer>();  }",
          "correctness": "uncompilable"
        },
        {
          "patch": ".add(Collections.min(lst));  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(Lists.min(lst));  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result=  new  ArrayList  <  Integer>();  }",
          "correctness": "timeout"
        },
        {
          "patch": "lst  =  lst.size();  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  Collections.synchronizedList(lst);  }",
          "correctness": "timeout"
        },
        {
          "patch": "result  =  Collections.singleton(lst);  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n</s>public static double triangle_area_2(double a, double b, double c) {\n</s>    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}\n",
      "output": [
        {
          "patch": "double  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Double  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "static  double  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "double  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "float  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "void  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "public  static  double  triangle_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "wrong"
        },
        {
          "patch": "double  triangle_area_2(double  b,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "winner_area_2(double  a,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "static  double  triangle_area_2(double  b,  double  b,  double  c)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n</s>    }\n</s>    return true;\n}\n",
      "output": [
        {
          "patch": "if  (w  ==  0)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (q  ==  null)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  ==  0)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (j  ==  0)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sum  >  w)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (q.length  ==  w)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  <  j)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (q.length  >  w)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (q.length  ==  0)  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  <  q.length)  return  false;  }",
          "correctness": "wrong"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n</s>    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i])\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i  +=  1)  {  if  (arr[i]!=  arr[i  -  i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i  +=  1)  {  if  (arr[i]!=  arr[i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i  +=  2)  {  if  (arr[i]!=  arr[i  -  i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i  +=  1)  {  if  (arr[i]!=  arr[i  +  i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length  -  1;  i  +=  1)  {  if  (arr[i]!=  arr[i  +  1])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length  -  1;  i  +=  1)  {  if  (arr[i]!=  arr[i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr[i].length;  i  +=  1)  {  if  (arr[i]!=  arr[i])",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i++)  {  if  (arr[i]!=  arr[i  -  i])",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i  +=  1)  {  if  (arr[i]!=  arr[i  -  i])  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  arr.length;  i++)  {  if  (arr[i]!=  arr[i])",
          "correctness": "wrong"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n</s>    for (String st : lst1)\n        l2 = st.length();\n</s>    \n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}\n",
      "output": [
        {
          "patch": "(String  st  :  lst1)  l2  =  lst.trim().length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(String  st  :  lst1)  l2  =  st.trim().length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (String  st  :  lst1)  l2  =  lst.trim().length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(String  st  :  lst1)  l2  =  lst1.trim().length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(String  st  :  lst1)  l2  +=  st.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(String  st  :  lst1)  l1  +=  st.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(String  st  :  lst1)  l2  =  lst2.trim().length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (String  st  :  lst1)  l2  =  st.trim().length();",
          "correctness": "wrong"
        },
        {
          "patch": "(String  st  :  lst1)  l2  +=  lst.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (String  st  :  lst2)  l2  =  lst.trim().length();",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n</s>            for (int k = j; k < a; j += 1) {\n</s>                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "for  (int  k  =  j;  k  <=  a;  k  +=  1)  {",
          "correctness": "timeout"
        },
        {
          "patch": "for  (int  k  =  i;  k  <  a;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  j;  k  <=  a;  j  +=  1)  {",
          "correctness": "timeout"
        },
        {
          "patch": "for  (int  k  =  j;  k  <  a;  k++)  {",
          "correctness": "timeout"
        },
        {
          "patch": "for  (int  k  =  i;  k  <  a;  k++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  j  -  1;  k  <  a;  k  +=  1)  {",
          "correctness": "timeout"
        },
        {
          "patch": "for  (int  k  =  i  +  1;  k  <  a;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  j;  k  <  a;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  k  =  j;  k  <=  a;  k++)  {",
          "correctness": "timeout"
        },
        {
          "patch": "for  (int  k  =  j;  k  <  a;  k  +=  2)  {",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n</s>    int power = 1;\n</s>    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n",
      "output": [
        {
          "patch": "int  power  =  0;",
          "correctness": "timeout"
        },
        {
          "patch": "Integer  power  =  1;",
          "correctness": "wrong"
        },
        {
          "patch": "null  power  =  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  power  =  2;",
          "correctness": "wrong"
        },
        {
          "patch": "int  power  =  1;",
          "correctness": "wrong"
        },
        {
          "patch": "int  power  =  n;",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  power  =  1;",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  power  =  false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  power  =  true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  power  =  -1;",
          "correctness": "timeout"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n</s>    double root = Math.pow(a, 1./3);\n</s>    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}\n",
      "output": [
        {
          "patch": "double  root  =  Math.pow(a,  1./3);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  1./4);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  1./2);",
          "correctness": "wrong"
        },
        {
          "patch": "Double  root  =  Math.pow(a,  1./3);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  1./5);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  2./3);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  1./10);",
          "correctness": "wrong"
        },
        {
          "patch": "Double  root  =  Math.pow(a,  1./4);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  3.);",
          "correctness": "wrong"
        },
        {
          "patch": "double  root  =  Math.pow(a,  1./1);",
          "correctness": "wrong"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n</s>        if (c == '2' || c == '3' || c == '5' || c == '7')\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '1')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7')  {  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '0')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '2')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '1'  ||  c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '4')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '1'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '3')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7'  ||  c  ==  '5')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  '2'  ||  c  ==  '3'  ||  c  ==  '5'  ||  c  ==  '7')",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n</s>    String result = Integer.toHexString(decimal);\n</s>    return \"db\" + result + \"db\";\n}\n",
      "output": [
        {
          "patch": "String  result  =  Integer.toHexString(decimal  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  Integer.toHexString(decimal);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  Integer.toString(decimal);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  Integer.toHexString(decimal  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  Long.toHexString(decimal);",
          "correctness": "wrong"
        },
        {
          "patch": "String  result  =  Integer.toJavaString(decimal);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  Integer.toBoolean(decimal);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  Integer.toUpperCase(decimal);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  Integer.toHexString(0,  decimal);",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  result  =  Integer.toHexString(db);",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n</s>        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n</s>            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  1))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i  +  1)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  1))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i  +  1)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  1))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (s.charAt(i  +  1)  ==  s.charAt(i  +  1)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (s.charAt(i)  ==  s.charAt(i  +  2)  ||  s.charAt(i  +  1)  ==  s.charAt(i  +  2))",
          "correctness": "plausible"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n</s>        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n</s>        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}\n",
      "output": [
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C-   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  <  1.3)  letter_grade[i]  =   \"C-   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C+   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "else  if  (gpa  >  1.3)  letter_grade[i]  =   \"C   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C+   \";  else  if  (gpa  >  1.3)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C-   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C-   \";  else  if  (gpa  >  1.0)  letter_grade[i]  =   \"C+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C-   \";  else  if  (gpa  >  1.3)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        },
        {
          "patch": "if  (gpa  >  1.3)  letter_grade[i]  =   \"C   \";  else  if  (gpa  >  1.3)  letter_grade[i]  =   \"D+   \";  else  if  (gpa  >  1.7)  letter_grade[i]  =   \"C   \";",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n</s>        if (l - i == 0)\n</s>            return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "if  (i  -  l  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  -  l  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i  ==  1)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i  ==  1)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i  >=  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i!=  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i  <  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  (i  +  1)  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (l  -  i  <=  0)",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n</s>    return (int) ((10 + 9) * Math.pow(10, n - 2));\n</s>}\n",
      "output": [
        {
          "patch": "(int)  ((10  +  9)  *  Math.pow(10,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  ((10  +  9)  *  Math.pow(10,  n  -  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  Math.pow(10,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (int)  ((10  +  9)  *  Math.pow(10,  n  -  2));",
          "correctness": "wrong"
        },
        {
          "patch": "(int)  ((10  +  9)  *  Math.pow(10,  n));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  ((11  +  9)  *  Math.pow(10,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  ((10)  *  Math.pow(10,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  ((10  +  9)  *  Math.pow(11,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)  ((9  +  9)  *  Math.pow(10,  n  -  2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (int)  ((10  +  9)  *  Math.pow(10,  n  -  1));",
          "correctness": "wrong"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n</s>        sum += Integer.parseInt((N + \"\").substring(i + 1));\n</s>    }\n    return Integer.toBinaryString(sum);\n}\n",
      "output": [
        {
          "patch": "=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "+=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  <  N)  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": "sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  +  1)  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  ==  1)  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": ";  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "wrong"
        },
        {
          "patch": ".append(Integer.parseInt((N  +   \" \")).substring(i  +  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": ")  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  >  1)  sum  +=  Integer.parseInt((N  +   \"   \").substring(i  +  1));",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n</s>    for (int i = 0; i < lst.length; i += 1) {\n</s>        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <=  lst.length;  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length;  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length;  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length  -  1;  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst[i].length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length;  i  +=  3)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  1;  i  <=  lst.length;  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  lst.length;  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  lst.length;  i  +=  2)  {",
          "correctness": "wrong"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n</s>        result += new String(chars);\n    }\n    return result;\n</s>}\n",
      "output": [
        {
          "patch": "result  +=  String.valueOf(chars);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.append(chars);  }  return  result.toString();",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=  String.valueOf(chars);  }  return  result;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  CharOperation.toCharArray(chars);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=   \"   \"  +  new  String(chars);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=   \"   \"   \"  +  new  String(chars);  }  return  result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=   \"   \"  +  new  String(chars);  }  return  result;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  CharOperation.toChars(chars);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=   \"   \"  +  new  String(chars);  }  return   \"   \";",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  new  String(chars);  }  return  result.toString();",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n</s>        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n</s>            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  >=  0;  j  -=  1)  {  if  (lst.get(i).get(j)  ==  x)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.get(i).size()  -  1;  j  >=  0;  j  -=  1)  {  if  (lst.get(i).get(j)  ==  x)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.size();  j  >=  0;  j  -=  1)  {  if  (lst.get(i).get(j)  ==  x)  {  result.add(new  GET_ROW().new  Tuple(i,  j));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  >=  0;  j  -=  1)  {  if  (lst.get(j).get(j)  ==  x)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  0;  j  <  lst.size();  j++)  {  if  (lst.get(i).get(j)  ==  x)  {  result.add(new  GET_ROW().new  Tuple(i,  j));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  <=  0;  j++)  {  if  (lst.get(i).get(j)  ==  x)  {  result.add(new  GET_ROW().new  Tuple(i,  j));",
          "correctness": "wrong"
        },
        {
          "patch": "if  (lst.get(i).size()  >  0)  {  for  (int  j  =  lst.get(i).size()  -  1;  j  >=  0;  j  -=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  >=  0;  j  -=  1)  {  if  (lst.get(i).get(j)  ==  x  ||  lst.get(i).get(j)  ==  x)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  >=  0;  j  -=  1)  {  if  (!lst.get(i).get(j))  {  result.add(new  GET_ROW().new  Tuple(i,  j));",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  j  =  lst.size()  -  1;  j  >=  0;  j  -=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n</s>            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n</s>        }\n        return array;\n    }\n}\n",
      "output": [
        {
          "patch": "[i]  =  array[i  -  1];",
          "correctness": "uncompilable"
        },
        {
          "patch": "array[i]  =  array[i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i  -  1]  =  array[array.length  -  i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i  +  1]  =  array[array.length  -  i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "[i]  =  array[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "array[i]  =  array[(array.length  -  i  -  1)  %  2];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i]  =  array[array.length  -  i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i  -  1]  =  array[array.length  -  i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i]  =  array[i  -  1];",
          "correctness": "wrong"
        },
        {
          "patch": "array[i  -  2]  =  array[array.length  -  i  -  1];",
          "correctness": "wrong"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n</s>                d.charAt(s.indexOf((int) c) + 2 * 2)\n</s>            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "Character.toCharArray(s.indexOf((int)  c)  +  2  *  2)",
          "correctness": "uncompilable"
        },
        {
          "patch": "d.charAt(s.lastIndexOf((int)  c)  +  2  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "s.charAt(s.indexOf((int)  c)  +  2  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.indexOf((int)  c)  +  1  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.indexOf((int)  c)  +  1  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.indexOf((int)  c)  +  3  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.lastIndexOf((int)  c)  +  2  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.indexOf((int)  c)  +  3  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "d.charAt(s.indexOf((int)  c)  +  1  +  2  *  2)",
          "correctness": "wrong"
        },
        {
          "patch": "s.charAt(s.indexOf((int)  c)  +  2  *  2);",
          "correctness": "uncompilable"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n</s>    List<Integer> numbers = new ArrayList<Integer>();\n</s>    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}\n",
      "output": [
        {
          "patch": "List  <  Integer>  numbers  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "Set  <  Integer>  numbers  =  new  HashSet  <  Integer>();",
          "correctness": "plausible"
        },
        {
          "patch": "Collection  <  Integer>  numbers  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  Integer>  numbers  =  new  ArrayList  <  Integer>(0);",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  Integer>  numbers  =  new  ArrayList  <  >();",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  Integer>  numbers  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  numbers  =  new  Integer[]  {  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "final  List  <  Integer>  numbers  =  new  ArrayList  <  Integer>();",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  Integer>  numbers  =  new  ArrayList  <  Integer>(1);",
          "correctness": "wrong"
        },
        {
          "patch": "Integer[]  numbers  =  new  ArrayList  <  Integer>();",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n</s>        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n</s>            result += 1;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (sentence.length()  >=  2  &&  sentence.subSequence(0,  1).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  2  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence!=  null  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  2  &&  sentence.subSequence(0,  1).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence!=  null  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  1  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  2  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  3  &&  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  2  &&  sentence.subSequence(0,  2).equals(   \"i   \"))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sentence.length()  >=  2  ||  sentence.subSequence(0,  2).equals(   \"I   \"))",
          "correctness": "wrong"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n</s>    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n</s>            return true;\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "if  ((int)x  ==  x  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  y  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  0  &&  (int)y  ==  0)  {  if  (x  +  y  ==  0  ||  x  +  z  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  x  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  x  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  ((int)x  ==  x  &&  y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  x  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  y  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  y  &&  (int)y  ==  y)  {  if  (x  +  y  ==  z  ||  x  +  z  ==  y)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  ==  0  &&  (int)y  ==  0)  {  if  (x  +  y  ==  0  ||  x  +  z  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((int)x  >=  x  &&  (int)y  >=  y)  {  if  (x  +  y  >=  z  ||  x  +  z  >=  y)",
          "correctness": "wrong"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n</s>        if (Character.isLowerCase(c)) {\n</s>            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "if  (c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#'  ||  c  ==  '#",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'  ||  c  ==  'Z'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'O'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_'  ||  c  ==  '_')  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'  ||  c  ==  'O'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E",
          "correctness": "uncompilable"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n</s>        result += (int) c;\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result  +=  (int)  c;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  (Integer)  c;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  =  (int)  c;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  (char)  c;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  ((int)  c);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (max  >  0)  result  +=  (int)  c;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  (int)  (c  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  c;",
          "correctness": "wrong"
        },
        {
          "patch": "lst[i]  +=  (int)  c;",
          "correctness": "wrong"
        },
        {
          "patch": "int  c  =  (int)  max;  result  +=  c;",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n</s>            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n</s>                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}\n",
      "output": [
        {
          "patch": "if  (state.equals(   \"upper \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (state.equals(   \"upper   \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else  if  (state.equals(   \"upper   \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (state.equals(   \"upper)  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else  if  (state.equals(   \"upper \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (state.equals(   \"upper \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (!state.equals(   \"upper \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (state.equals(   \"upper \")  &&  (str_key.toUpperCase().equals(str_key)))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (state.equals(   \"upper \")  &&  (!str_key.toUpperCase().equals(str_key)))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (!state.equals(   \"upper   \")  &&!str_key.toUpperCase().equals(str_key))  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n</s>        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n</s>            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}\n",
      "output": [
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  false;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {  if  (j  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  false;  for  (int  j  =  1;  j  <  i;  j  +=  1)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  1;  j  <  i;  j  +=  1)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  false;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  is_prime  =  false;  for  (int  j  =  2;  j  <  i;  j  +=  1)  {  if  (j  %  j  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "boolean  is_prime  =  true;  for  (int  j  =  2;  j  <  i;  j++)  {  if  (i  %  j  ==  0)  {",
          "correctness": "wrong"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n</s>    return (a % 10) * (b % 10);\n</s>}\n",
      "output": [
        {
          "patch": "(a  %  10)  *  (b  %  10);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (a  %  10)  *  (b  %  10);",
          "correctness": "wrong"
        },
        {
          "patch": "=  (a  %  10)  *  (b  %  10);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (a  %  10  %  10)  *  (b  %  10);",
          "correctness": "wrong"
        },
        {
          "patch": "return  (a  %  100.0)  *  (b  %  100.0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(a  %  10  %  10)  *  (b  %  10);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(a  %  10)  *  (b  %  10);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  (a  %  100.0  *  (b  %  100.0));",
          "correctness": "uncompilable"
        },
        {
          "patch": "(a  %  100.0)  *  (b  %  100.0);",
          "correctness": "uncompilable"
        },
        {
          "patch": ")  return  (a  %  10)  *  (b  %  10);",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n</s>        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n</s>            count += 1;\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u')  {  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'a')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'A')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  '0')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'C')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'H')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'c')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  '1')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (c  ==  'A'  ||  c  ==  'e'  ||  c  ==  'I'  ||  c  ==  'o'  ||  c  ==  'u'  ||  c  ==  'I')",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n</s>    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n</s>    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (value.substring(value.length()  -  1).equals( \".5 \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if  (value.substring(value.length()).equals( \".5 \"))  {  result  =  num  >  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (value.substring(value.length()  -  1).equals( \".5 \"))  {  result  =  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (value.substring(value.length()  -  2)  ==  '.')  {  result  =  num  >  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (value.substring(value.length()  -  1).equals( \".5 \"))  {  result  =  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (value.substring(value.length()  -  1)  ==  '.')  {  result  =  num  >  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (value.indexOf('.')  >=  0)  {  result  =  num  >  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (value.substring(value.length()  -  1)  ==  '.')  {  result  =  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (value.substring(value.length()).equals(   \".   \"))  {  result  =  num  >  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (value.substring(value.length()  -  2).equals(   \".5   \"))  {  result  =  0?  (int)Math.floor(num)  :  (int)Math.ceil(num);",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n</s>\t\tpile.add(n - 2 * i);\n</s>\t}\n\treturn pile;\n}\n",
      "output": [
        {
          "patch": "if(i  >  0)  {  pile.add(n  -  2  *  i);  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  >  0)  {  pile.add(n  -  2  *  i);  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(i  <  0)  {  pile.add(n  -  2  *  i);  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  <  0)  {  pile.add(n  -  2  *  i);  }",
          "correctness": "wrong"
        },
        {
          "patch": "(n  >  0?  n  -  2  *  i  :  0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Integer)n).add(n  -  2  *  i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i  >  0)  pile.add(n  -  2  *  i);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  >  0)  {  pile.add(n  +  2  *  i);  }",
          "correctness": "wrong"
        },
        {
          "patch": "(n  >  0?  n  -  2  *  i  :  n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "((Integer)i).add(n  -  2  *  i);",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n</s>\tString s_list = \"\";\n</s>\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}\n",
      "output": [
        {
          "patch": "String  s_list  =   \"   \";",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =   \"s+   \";",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =  s;",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =   \"   \"   \";",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  s_list  =  null;",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =  s.trim();",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =   \"   \";",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list=   \"   \";",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =   \"n   \";",
          "correctness": "wrong"
        },
        {
          "patch": "String  s_list  =   \"s*   \";",
          "correctness": "wrong"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n</s>    if(x < y) return -1;\n</s>    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}\n",
      "output": [
        {
          "patch": "if(x  <=  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  <=  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  >=  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  <  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  <  y)  return  0;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  >=  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  <  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  ==  y)  return  -1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  <  y)  return  0;",
          "correctness": "wrong"
        },
        {
          "patch": "if(x  ==  y)  return  -1;",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n</s>        avg_rounded = (int) Math.ceil(avg);\n</s>    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}\n",
      "output": [
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  (Math.ceil(avg));",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Integer.toString(avg);",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg  +  1);",
          "correctness": "wrong"
        },
        {
          "patch": "avg_rounded  =  (int)  Math.ceil(avg  -  0.5);",
          "correctness": "plausible"
        },
        {
          "patch": "avg_rounded  =  (Integer)  Math.ceil(avg);",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n</s>            if((curr_digit % 2) != 0) {\n                all_odd = true;\n</s>                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}\n",
      "output": [
        {
          "patch": "if((curr_digit  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  3)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  2)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  4)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  3)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  1)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  8)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  2)!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((curr_digit  %  2)  >  0)  {",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n</s>        if(digit_map.get(num) != \"\") {\n</s>            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if(digit_map.get(num)  ==  null)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)  ==  null)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)!=   \"   \")  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)!=  null)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if(digit_map.get(num)  ==  0)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(digit_map.get(num).equals(   \"   \"))  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)  ==   \" \")  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)  ==   \" \")  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit_map.get(num)!=  null)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if(digit_map.get(num).equals(   \"   \"))  {",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n</s>            for(int j = 1; j <= i; i++) x -= j;\n</s>            ret.add(x);\n        }\n    }\n    return ret;\n}\n",
      "output": [
        {
          "patch": "(int  j  =  1;  j  <=  i;  j++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  i;  j++)  x  *=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  n;  j++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  j;  j++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  i;  j++)  x  +=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  i;  i++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  2;  j  <=  i;  j++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  i;  j++)  x  -=  x;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  0;  j++)  x  -=  j;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  j  =  1;  j  <=  i;  j++)  y  -=  j;",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n</s>        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n</s>    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}\n",
      "output": [
        {
          "patch": "if((i  %  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;  else  if((i  %  2)  ==  1)  even_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0)  odd_palindrome_count--;  else  if((i  %  2)  ==  1  &&  is_palindrome(i))  even_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count++;  else  if((i  %  2)  ==  1  &&  is_palindrome(i))  even_palindrome_count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  *  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;  else  if((i  *  2)  ==  1  &&  is_palindrome(i))  even_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "(i  %  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;  else  if((i  %  2)  ==  1  &&  is_palindrome(i))  even_palindrome_count--;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  is_palindrome(i))  even_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  i  <=  n)  odd_palindrome_count--;  else  if((i  %  2)  ==  1  &&  i  <=  n)  even_palindrome_count--;",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;  else  if((i  %  2)  ==  1  &&  is_palindrome(i))  even_palindrome_count;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((i  +  1)  ==  0  &&  is_palindrome(i))  odd_palindrome_count--;  else  if((i  +  1)  ==  1  &&  is_palindrome(i))  even_palindrome_count--;",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n</s>        if(neg) num *= 1;\n</s>        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "if(neg)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(neg)  num  *=  0;",
          "correctness": "wrong"
        },
        {
          "patch": "if(neg)  num  *=  2;",
          "correctness": "wrong"
        },
        {
          "patch": "if(num  >  0)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(num  <  0)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(neg)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(neg)  num  *=  -1;",
          "correctness": "plausible"
        },
        {
          "patch": "if(num  >=  0)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(num  ==  0)  num  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(neg)  num  *=  1  -  count;",
          "correctness": "wrong"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n</s>    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n</s>    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size());",
          "correctness": "wrong"
        },
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size());",
          "correctness": "wrong"
        },
        {
          "patch": "t  min_value  =  sorted_arr.get(sorted_arr.size());",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size()  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size()  -  1);",
          "correctness": "wrong"
        },
        {
          "patch": "t  min_value  =  sorted_arr.get(sorted_arr.size()  -  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size()  -  2);",
          "correctness": "wrong"
        },
        {
          "patch": "int  min_value  =  sorted_arr.get(sorted_arr.size()  -  2);",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  min_value  =  sorted_arr.get(sorted_arr.size());",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  min_value  =  sorted_arr.get(sorted_arr.size());",
          "correctness": "wrong"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n</s>    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n</s>    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
      "output": [
        {
          "patch": "(int  i  :  lst2)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  :  lst1)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  :  lst2)  {  if((i  %  2)  ==  0)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  :  lst2)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "wrong"
        },
        {
          "patch": "For(int  i  :  lst2)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  :  lst2)  {  if((i  %  2)!=  1)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  :  lst1)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  :  lst2)  {  if((i  %  2)  ==  2)  even++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  :  lst2)  {  if((i  %  2)  ==  1)  even++;",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  :  lst2)  {  if((i  %  3)  ==  1)  even++;",
          "correctness": "uncompilable"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n</s>        if(count_letter[i] < most_count) {\n</s>            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}\n",
      "output": [
        {
          "patch": "if(count_letter[i]  <=  most_count)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  <  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  <  26)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  <  list_letters[i])  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i]  <  list_letters.length)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  >=  most_count)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  ==  most_count)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i]  <=  most_count)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(count_letter[i].equals(most_count))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i]  <  27)  {",
          "correctness": "wrong"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n</s>        if(c.indexOf(s.charAt(i)) != -1) {\n</s>            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}\n",
      "output": [
        {
          "patch": "if(c.indexOf(s.charAt(i))  ==  -1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))!=  -1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))  ==  -1)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))!=  -1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))  <  0)  {",
          "correctness": "plausible"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))  >  -1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(!c.contains(s.charAt(i)))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(s.indexOf(i)!=  -1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(c.indexOf(s.charAt(i))  >=  0)  {",
          "correctness": "wrong"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n</s>            if(digit % 2 == 0) {\n                n--;\n</s>            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if(digit  %  2!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  <=  0)  {  n--;",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2!=  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2!=  0)  {  n--;",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  ==  0  &&  digit  <  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  1  ==  0)  {  n--;",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  ==  0  &&  n  >  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  <=  0)  {  n--;",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  ==  0  ||  digit  <  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(digit  %  2  ==  0  &&  n  <  0)  {",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n</s>        s += num;\n</s>        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}\n",
      "output": [
        {
          "patch": "s  +=  num;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  num;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  (long)num;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  (long)num;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  Long.MAX_VALUE;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  Long.toString(num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "s  +=  Long.valueOf(num);",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  num  -  1;",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  Math.abs(num);",
          "correctness": "wrong"
        },
        {
          "patch": "s  +=  num  -  1;",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n</s>        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n</s>        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "(int  j  =  0;  j  <  grid[j].length;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  j  =  0;  j  <  grid[j].length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "For(int  j  =  0;  j  <  grid[j].length;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  j  =  0;  j  <  row_capacity;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  j  =  0;  j  <  grid[j].length  -  1;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  j  =  0;  j  <  grid[i].length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  j  =  0;  j  <  i;  j++)  {  row_capacity  +=  i;",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  j  =  0;  j  <  i;  j++)  {  row_capacity  +=  grid[j].length;",
          "correctness": "wrong"
        },
        {
          "patch": "//  for(int  j  =  0;  j  <  grid[j].length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  j  =  0;  j  <=  grid[j].length;  j++)  {",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n</s>      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n</s>   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}\n",
      "output": [
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  1;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  -1;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2)  return  0;  if(o1  <  o2)  return  -1;  }",
          "correctness": "plausible"
        },
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  -1;  if(o1  >  o2)  return  1;  }",
          "correctness": "plausible"
        },
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  0;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  <  o2)  return  -1;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2  ||  o1  <  o2)  return  -1;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  1;  if(o1  >  o2)  return  1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2)  return  1;  if(o1  <  o2)  return  0;  if(o1  >  o2)  return  1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(o1  ==  o2)  return  0;  if(o1  >  o2)  return  -1;  }",
          "correctness": "wrong"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n</s>        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n</s>        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'e'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'a'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'i'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'f'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'p'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'c'  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "char[]  vowels  =  {  'a',  'e',  'i',  'o',  'u',  'o'  }  ;",
          "correctness": "wrong"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n</s>    for(int i = word.length() - 2; i >= 0; i--) {\n</s>        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}\n",
      "output": [
        {
          "patch": "For(int  i  =  word.length()  -  1;  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  word.length()  -  1);  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  word.length()  -  2;  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "For(int  i  =  word.length()  -  2;  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  =  word.length()  -  1;  i  >=  0;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  i  =  word.length()  -  2;  i  >=  0;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  word.length()  -  1;  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  =  word.length()  -  1;  i  >=  0;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  i  =  word.length()  -  2;  i  >=  0;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  word.length()  -  2);  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "</s></s>",
      "output": [
        {
          "patch": "TimeZone.setDefault(TimeZone.getTimeZone(   \"GMT   \"));",
          "correctness": "wrong"
        },
        {
          "patch": "TimeZone.setDefault(TimeZone.getTimeZone(   \"UTC   \"));",
          "correctness": "wrong"
        },
        {
          "patch": "Locale.setDefault(Locale.ENGLISH);",
          "correctness": "wrong"
        },
        {
          "patch": "Locale.setDefault(Locale.US);",
          "correctness": "wrong"
        },
        {
          "patch": "Locale.setDefault(Locale.ENGLISH);",
          "correctness": "wrong"
        },
        {
          "patch": "Locale.setDefault(Locale.ENGLISH,   \"false   \");",
          "correctness": "wrong"
        },
        {
          "patch": "NumberFormat.setLocale(Locale.ENGLISH);",
          "correctness": "wrong"
        },
        {
          "patch": "List  <  String>  emptyList  =  new  ArrayList  <  String>();",
          "correctness": "wrong"
        },
        {
          "patch": "Locale.setDefault(Locale.US);",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(   \"unchecked   \")",
          "correctness": "wrong"
        }
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n</s>    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n</s>        result.add(arr.get(i));\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k);  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "For(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k  -  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k-1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//  for(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  i  =  0;  i  >=  arr.size()  -  k;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  i  =  arr.size()  -  1;  i  >=  arr.size()  -  k-1;  i--)  {",
          "correctness": "wrong"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n</s>        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n</s>            result += lst.get(i);\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if((i  %  2)  ==  0  &&  (lst.get(i)  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  (lst.get(i)  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  (lst.get(i)  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  (lst.get(i)  %  2)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  lst.get(i)  %  2)  ==  0)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  (lst.get(i)  %  3)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  lst.get(i)  %  2)  ==  0)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((i  %  2)  ==  1  &&  (lst.get(i)  %  3)  ==  0)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if((i  %  2)  ==  0  &&  (lst.get(i)  %  2)  ==  0))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((i  %  2)  ==  1)  &&  (lst.get(i)  %  2)  ==  0)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n</s>        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n</s>        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  3)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  2)  {  result  -=  arr.get(k);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  2)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  3)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  1)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  4)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  2)  {  result  -=  arr.get(i);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(i)).length()  >=  2)  {  result  -=  arr.get(k);",
          "correctness": "wrong"
        },
        {
          "patch": "if(Integer.toString(arr.get(k)).length()  >=  2)  {  result  -=  arr.get(k);",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n</s>    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n</s>        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}\n",
      "output": [
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  =  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  2)  n  /=  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  /=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if((n  %  2)  ==  1)  n  =  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(n  >=  1  &&  (n  %  2)  ==  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n</s>            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n</s>        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <  1  ||  day  >  31))  {  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&  (day  <  1  ||  day  >  31))  return  false;",
          "correctness": "plausible"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(month  <  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month  ==  month_check1[i]  &&!(day  <  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <  1  ||  day  >  31))  continue;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  ||!(day  <  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <  1  ||  day  <  31))  return  false;",
          "correctness": "plausible"
        },
        {
          "patch": "if(month!=  month_check1[i]  &&!(day  <=  1  ||  day  >  31))  return  false;",
          "correctness": "wrong"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n</s>            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n</s>        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}\n",
      "output": [
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2)  ==  0)  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  3)  ==  0)  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  4)  ==  0)  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2  ==  0))  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2)!=  0)  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2)  ==  0)  count  =  0;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2)  ==  0)  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2!=  0))  count++;",
          "correctness": "wrong"
        },
        {
          "patch": "if(Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2  ==  0)  count++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isUpperCase(curr)  &&  ((curr  -  'a')  %  2)  ==  0)  count++;",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n</s>        if(lst[i] <= lst[i + 1]) return false;\n</s>    }\n    return true;\n}\n",
      "output": [
        {
          "patch": "if(lst[i]  <  lst[i  +  1])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  1])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  2])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <  lst[i  +  1])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  1])  continue;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  1])  return  false;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  1])  {  return  false;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i  +  1])  return  true;",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst[i]  <=  lst[i+1])  return  false;",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n</s>    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n</s>    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}\n",
      "output": [
        {
          "patch": "int  r  =  Math.max(interval1[1],  interval2[1]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  l  =  Math.min(interval1[1],  interval2[1]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  l  =  Math.min(interval1[0],  interval2[1]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  l  =  Math.min(interval1[0],  interval2[0]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "r  =  Math.max(interval1[1],  interval2[1]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  r  =  Math.max(interval1[0],  interval2[1]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  r  =  Math.max(interval1[0],  interval2[0]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  l  =  Math.min(interval1[0],  interval2[0]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  l  =  Math.min(interval1[1],  interval2[0]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "r  =  Math.max(interval1[0],  interval2[1]);",
          "correctness": "uncompilable"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n</s>        else if(arr[i] > 0) prod *= 1;\n</s>    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n",
      "output": [
        {
          "patch": "if(arr[i]  >  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  <  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  ==  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  <=  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  >  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "else  if(arr[i]  >  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "else  if(arr[i]  <  0)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  >  0)  prod  *=  0;",
          "correctness": "wrong"
        },
        {
          "patch": "else  if(arr[i]  >  1)  prod  *=  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if(arr[i]  >=  0)  prod  *=  1;",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n</s>                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n</s>            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}\n",
      "output": [
        {
          "patch": "val  =  Math.max(val,  grid[i][j  +  1]);  if(j!=  0)  val  =  Math.min(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i  -  1][j]);  if(j!=  0)  val  =  Math.min(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "if(i!=  0)  val  =  Math.max(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i][j  +  1]);  if(j!=  0)  val  =  Math.min(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i][j  +  0]);  if(j!=  0)  val  =  Math.min(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i][j  +  1]);  if(j!=  0)  val  =  Math.min(val,  grid[i  -  0][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "if(i!=  0)  val  =  Math.max(val,  grid[i  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "if(i!=  0)  val  =  Math.max(val,  grid[i  -  1][j  +  1]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i][j  +  1]);  if(j!=  0)  val  =  Math.min(val,  grid[j  -  1][j]);",
          "correctness": "wrong"
        },
        {
          "patch": "val  =  Math.max(val,  grid[i  -  1][j]);  if(j!=  0)  val  =  Math.min(val,  grid[j  -  1][j]);",
          "correctness": "wrong"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n</s>    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n</s>    }\n    return sequence;\n}\n",
      "output": [
        {
          "patch": "sequence[0]  =  -1;  sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sequence[0]  =  0;  sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sequence[0]  =  1;  sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n  ==  0)  continue;  sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "sequence[0]  =  -1;  sequence[1]  =  -3;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n  >  0)  {  sequence[1]  =  -3;",
          "correctness": "wrong"
        },
        {
          "patch": "if(n  ==  0)  {  sequence[1]  =  -3;",
          "correctness": "wrong"
        },
        {
          "patch": "if(n  ==  0)  {  sequence[0]  =  0;",
          "correctness": "wrong"
        },
        {
          "patch": "sequence[0]  =  0;  sequence[1]  =  -1;",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n</s>    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n</s>            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}\n",
      "output": [
        {
          "patch": "while(n  >  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "wrong"
        },
        {
          "patch": "(n  >=  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(n  >=  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(n  <  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "wrong"
        },
        {
          "patch": "while(n  >=  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {",
          "correctness": "timeout"
        },
        {
          "patch": "(n  >  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n  >  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "wrong"
        },
        {
          "patch": "while(n  >=  0)  {  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while  (n  <  0)  {  int  digit  =  n  *  10;  if(digit  %  2  ==  0)  {  product  /=  digit;",
          "correctness": "wrong"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n</s>    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n</s>            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\n",
      "output": [
        {
          "patch": "Collections.reverse(opening_brackets);  int  cnt  =  0,  i  =  0,  l  =  closing_brackets.size();  for(int  idx  :  closing_brackets)  {  if(i  <  l)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0;  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  opening_brackets.get(i))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0;  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  closing_brackets.get(i))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0;  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  opening_brackets.get(i))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0;  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  closing_brackets.get(i))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Collections.reverse(opening_brackets);  int  cnt  =  0,  i  =  0,  l  =  closing_brackets.size();  for(int  idx  :  closing_brackets)  {  if(i  <  l)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0,  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  closing_brackets.get(i))  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  cnt  =  0,  i  =  0,  l  =  0;  for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  opening_brackets.get(i))  {",
          "correctness": "wrong"
        },
        {
          "patch": "for(int  idx  :  closing_brackets)  {  if(i  <  l  ||  idx  >=  closing_brackets.get(i))  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "s.reverse(opening_brackets);  int  cnt  =  0,  i  =  0,  l  =  closing_brackets.size();  for(int  idx  :  closing_brackets)  {  if(i  <  l)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n</s>    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "int  result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Result  result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "Integer  result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  result  =  0,  i  =  0;  for(int  j  =  0;  j  <=  lst.length;  j++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "result  =  0,  i  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "+=  Math.floor((int)  lst[i])  *  (Math.ceil((int)  lst[i]));",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  result  =  0,  j  =  0;  for(int  j  =  0;  j  <  lst.length;  j++)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n</s>    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n</s>}\n",
      "output": [
        {
          "patch": "int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -  'a';  return  (last.length()  ==  1)  ||  (0  <=  last_char_pos  ||  last_char_pos  <=  25);",
          "correctness": "wrong"
        },
        {
          "patch": "=  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -  '",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  last  =  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  last  =  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -",
          "correctness": "uncompilable"
        },
        {
          "patch": "=  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -",
          "correctness": "uncompilable"
        },
        {
          "patch": "=  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -",
          "correctness": "uncompilable"
        },
        {
          "patch": "=  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  last  =  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  return   \"   \";  if(txt.length()  ==  1)  return  (last.length()  ==  1)  ||  (0  <=  last_char_pos  ||  last_char_pos  <=  25);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  last  =   \"   \";  int  last_char_pos  =  Character.toUpperCase(last.charAt(0))  -  'a';",
          "correctness": "uncompilable"
        },
        {
          "patch": "String  last  =  parts[parts.length  -  1];  if(txt.charAt(txt.length()  -  1)  =='')  last  =   \"   \";  if(txt.length()  ==  1)  return  (last.length()  ==  1)  ||  (0  <=  last_char_pos  ||  last_char_pos  <=  25);",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n</s>    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n</s>    }\n    return ind;\n}\n",
      "output": [
        {
          "patch": "int  ind  =  1;  for(int  i  =  0;  i  <  arr.length  -  1;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  0;  for(int  i  =  0;  i  <  arr.length;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  1;  for(int  i  =  0;  i  <  arr.length;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  0;  if(arr[i]  <  arr[i  +  1])  ind  =  i  +  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(arr[i]  <  arr[i  +  1])  ind  =  i  +  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  ind  =  1;  if(arr[i]  <  arr[i  +  1])  ind  =  i  +  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  ind  =  1;  for(int  i  =  0;  i  <  arr.length  -  1;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  0;  for(int  i  =  0;  i  <  arr.length;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  1;  for(int  i  =  0;  i  <  arr.length  -  2;  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "int  ind  =  0;  if(arr[i]  <  arr[i  +  1])  ind  =  i  +  1;",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n</s>    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n</s>        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}\n",
      "output": [
        {
          "patch": "boolean  negative  =  true,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  true,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  true,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MAX_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  false,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  true,  positive  =  false;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  false,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  false,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MAX_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  true,  positive  =  true;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  0;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  false,  positive  =  false;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean  negative  =  true,  positive  =  false;  int  max_negative  =  Integer.MAX_VALUE,  min_positive  =  Integer.MIN_VALUE;  for(int  i  =  1;  i  <  lst.length;  i++)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n</s>    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n</s>    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}\n",
      "output": [
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  ((Double)  a).doubleValue();",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  ((Double)  a).doubleValue();",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  (Double)  a;",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  (Double)  a;",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  ((Double)  b).doubleValue();",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  ((Double)  b).doubleValue();",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  Double.parseDouble(temp_a_string);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  Double.parseDouble(temp_a_string);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(  a  instanceof  Double)  temp_a  =  ((Double)  a).doubleValue();",
          "correctness": "wrong"
        },
        {
          "patch": "if(a  instanceof  Double)  temp_a  =  ((Double)  a).DoubleValue();",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n</s>    return ((n * 2 == 1) ^ (n < 8));\n</s>}\n",
      "output": [
        {
          "patch": "((n  *  2  ==  1)  ^  (n  <  8));",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  ((n  *  2  ==  1)  ^  (n  <  8));",
          "correctness": "wrong"
        },
        {
          "patch": "(n  *  2  ==  1)  ^  (n  <  8));",
          "correctness": "uncompilable"
        },
        {
          "patch": "((n  *  2  ==  1)  ^  (n  <  8)));",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  ((n  *  2  ==  0)  ^  (n  <  8));",
          "correctness": "wrong"
        },
        {
          "patch": "((n  *  2!=  1)  ^  (n  <  8));",
          "correctness": "uncompilable"
        },
        {
          "patch": "((n  *  2  ==  1)  ^  (n  <  8))  ||  (n  <  8);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  ((n  *  2  ==  1)  ^  (n  <  8);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  ((n  *  2!=  1)  ^  (n  <  8));",
          "correctness": "wrong"
        },
        {
          "patch": "((n  *  2  ==  0)  ^  (n  <  8));",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n</s>    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n</s>    }\n    return special_fact;\n}\n",
      "output": [
        {
          "patch": "(long  i  =  n;  i  >=  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(long  i  =  n;  i  >=  1;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(long  i  =  n  -  1);  i  >=  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(long  i  =  n;  i  >=  1;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(long  i  =  n;  i  >=  0;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(long  i  =  n;  i  <=  1;  i--)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(long  i  =  n;  i  <=  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(long  n  =  n;  i  >=  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "For(long  i  =  n;  i  >=  1;  i--)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(long  i  =  n;  i  >=  0;  i--)  {",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n</s>    return new_text;\n</s>}\n",
      "output": [
        {
          "patch": "new_text  =  text.substring(i,  i  +  1);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (new_text  ==  null)  return   \"   \";  return  new_text;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (new_text.length()  ==  0)  return  new_text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_text  =  text.substring(i  +  1);  return  new_text;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (new_text!=  null)  return  new_text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (new_text  ==  null)  return  null;  return  new_text;",
          "correctness": "wrong"
        },
        {
          "patch": "(new_text  ==  null)?   \"   \"  :  new_text);",
          "correctness": "uncompilable"
        },
        {
          "patch": "(new_text!=  null)?  new_text  :   \"   \";",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (new_text.length()  >  0)  return  new_text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (text  ==  null)  return  new_text;  else  return  new_text;",
          "correctness": "wrong"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n</s>    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n</s>        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}\n",
      "output": [
        {
          "patch": "if  ('a'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  >  lst[1].charAt(0)  &&  lst[1].charAt(0)  >  'z'  ||  'A'  >  lst[1].charAt(0)  &&  lst[1].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  <=  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  (('a'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  ('a'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  >  lst[1].charAt(0)  &&  lst[1].charAt(0)  >  'z'  ||  'A'  >  lst[1].charAt(0)  &&  lst[1].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  >  lst[0].charAt(1)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  >  lst[0].charAt(0)  &&  lst[1].charAt(0)  >  'z'  ||  'A'  >  lst[1].charAt(0)  &&  lst[1].charAt(0)  >  'Z')",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  >  lst[0].charAt(0)  &&  (lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z'))",
          "correctness": "wrong"
        },
        {
          "patch": "if  ('a'  <=  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'z'  ||  'A'  >  lst[0].charAt(0)  &&  lst[0].charAt(0)  >  'Z')",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n</s>        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n</s>            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "if  (i  %  4  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  3  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  3  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  4  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  4  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  3  ==  0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (i  <  lst.length)  result  +=  lst[i]  *  lst[i];  else  if  (i  <  lst.length)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  2  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  4  <=  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  3  <=  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  2  ==  0)  result  +=  lst[i]  *  lst[i];  else  if  (i  %  3  ==  0)",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  <  lst.length)  result  +=  lst[i]  *  lst[i];  else  if  (i  <  lst.length)",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n</s>        for (int i = 2; i < word.length(); i += 1){\n</s>            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  word.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  2;  i  <  word.length();  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  word.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  2;  i  <  word.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  2;  i  <=  word.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  2;  i  <  word.length();  i++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  word.length();  i  +=  2)  {",
          "correctness": "wrong"
        },
        {
          "patch": "For  (int  i  =  0;  i  <  word.length();  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  word.length();  i  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "For  (int  i  =  2;  i  <  word.length();  i  +=  2)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n</s>    if (numerator / denom == (int) (numerator / denom))\n</s>        return true;\n    return false;\n}\n",
      "output": [
        {
          "patch": "if  (numerator  <  0  ||  denom  ==  (int)  (numerator  <  0))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (numerator  <  0  ||  denom  ==  (int)  (numerator  <  0))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (denom  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (denom  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numerator  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numerator  /  denom  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numerator  /  denom  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numerator  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  ((numerator  /  denom)  ==  (int)  (numerator  /  denom))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (numerator  <  0  ||  denom  >=  (int)  (numerator  <  0))",
          "correctness": "uncompilable"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n</s>            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n</s>        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}\n",
      "output": [
        {
          "patch": "digit  +=  ((n  +   \"   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "wrong"
        },
        {
          "patch": "digit  +=  ((n  +   \"   \").toCharArray()[j]  +  '0')  *  neg;  }",
          "correctness": "wrong"
        },
        {
          "patch": "digit  +=  ((n  +   \".   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "wrong"
        },
        {
          "patch": "digit  +=  (n  +   \"   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit  +=  ((n  +   \"   \").toCharArray()[j])  *  neg;  }",
          "correctness": "wrong"
        },
        {
          "patch": "digit  +=  ((n  +   \"   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "wrong"
        },
        {
          "patch": "(n  +   \"   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "((n  +   \"   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit  +=  ((n  +   \"   \").toCharArray()[j]  -  '0')  *  digit;  }",
          "correctness": "wrong"
        },
        {
          "patch": "digit  +=  ((n  +   \"/   \").toCharArray()[j]  -  '0')  *  neg;  }",
          "correctness": "wrong"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n</s>            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n</s>                count += 1;\n        }\n    }\n    return count;\n}\n",
      "output": [
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&  odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&  odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.length())  &&  odd_digits.contains(number_as_string.charAt(0)))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.length())  &&  odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  ||  odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&  odd_digits.contains(number_as_string.charAt(number_as_string.length()))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&!odd_digits.contains(number_as_string.charAt(0)))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&  odd_digits.contains(number_as_string.charAt(number_as_string.length()  +  1)))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (odd_digits.contains(number_as_string.charAt(0))  &&  odd_digits.contains(number_as_string.charAt(0)))",
          "correctness": "wrong"
        },
        {
          "patch": "if  (!odd_digits.contains(number_as_string.charAt(0))  &&!odd_digits.contains(number_as_string.charAt(0)))",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n</s>    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n</s>                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  n-2;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <  n-2;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {  for  (int  k  =  0;  k  <  n;  k  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  n-1;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  n-2;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {  for  (int  k  =  0;  k  <  n;  k++)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <=  n-2;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  n-2;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j++)  {  for  (int  k  =  0;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  n;  i  +=  1)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {  for  (int  k  =  0;  k  <  n;  k  +=  1)  {",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  0;  i  <  n-2;  i  +=  2)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {  for  (int  k  =  0;  k  <  n;  k  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int  i  =  0;  i  <  n-2;  i  +=  1))  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  n-2;  i  +=  2)  {  for  (int  j  =  0;  j  <  n-1;  j  +=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n</s>    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n</s>    return result;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index;  i  +=  1)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  planet_names.size();  i  <  planet2_index;  i  +=  1)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index;  i  +=  2)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index;  i++)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  planet1_index;  i  <  planet2_index;  i  +=  1)  result.add(planet_names.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index;  i  +=  1)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  planet_names.size();  i  <  planet2_index;  i  +=  2)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index;  i  +=  1)  result.add(planet_names.get(planet1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  planet1_index;  i  <  planet2_index+1;  i  +=  1)  result.add(planet_names.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "(int  i  =  planet1_index;  i  <  planet2_index;  i  +=  2)  result.add(planet_names.get(i));",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n</s>        (s1, s2) -> s1.length() - s2.length()\n</s>    );\n    return result;\n}\n",
      "output": [
        {
          "patch": "(s1,  s2)  ->  s1.length()  -  s2.length()",
          "correctness": "wrong"
        },
        {
          "patch": "(s1)  ->  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)  -  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)  ->  (s1.length()  -  s2.length())",
          "correctness": "wrong"
        },
        {
          "patch": "(s1  -  s2)  ->  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)  ->  s1.length()  -  s2.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)  &  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)  -  s1.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(s1,  s2)!=  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "(str,  s2)  ->  s1.length()  -  s2.length()",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n</s>        if (n % i == 0) return x;\n    }\n    return y;\n</s>}\n",
      "output": [
        {
          "patch": "if  (n  %  i  ==  0)  return  x;  }  return  y;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  y;  }  return  y;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  i;  }  return  y;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  n;  }  return  y;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  %  i  ==  0)  return  x;  }  return  y;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  x;  }  return  i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  i;  }  return  i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  x;  }  return  y  +  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  x;  }  return  x;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (n  %  i  ==  0)  return  -1;  }  return  -1;",
          "correctness": "wrong"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n</s>                result += d_int;\n</s>            }\n        }\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result  +=  d_int  %  2;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  Double.toString(d_int);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result  +=  d_int;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  d_int;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  d_int  %  2;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  Double.valueOf(d_int);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  d_int  &  0xFFFF;",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  (int)  (d_int  %  2);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  Double.valueOf(d_int);",
          "correctness": "wrong"
        },
        {
          "patch": "result  +=  (d_int  %  2);",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n</s>        result[i] = Math.floorDiv(game[i], guess[i]);\n</s>    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "result[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "Result[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "i++;  result[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "game[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "game[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "i  +=  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "wrong"
        },
        {
          "patch": "s[i]  =  Math.floorDiv(game[i],  guess[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Result[i]  =  Math.floorDiv(game[i],  guess[i],  false);",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n</s>            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n</s>    }\n    return class_name + \".\" + strong;\n}\n",
      "output": [
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toUpperCase(c)  ==  c)  CAP  +=  1;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toLowerCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toUpperCase(c)  ==  c)  CAP  +=  1;  }",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  2;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  2;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  2;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  1;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }  val  -=  SM;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.toUpperCase(c)  ==  c)  SM  +=  2;  if  (Character.toLowerCase(c)  ==  c)  CAP  +=  1;  }  val  =  CAP  -  SM;",
          "correctness": "wrong"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n</s>    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n</s>            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i  +=  1)  {  for  (int  j  =  0;  j  <  l;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i  +=  2)  {  for  (int  j  =  0;  j  <  l;  j  +=  2)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i++)  {  for  (int  j  =  0;  j  <  l;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i  +=  2)  {  for  (int  j  =  0;  j  <  l;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i  +=  1)  {  for  (int  j  =  0;  j  <  l;  j  +=  2)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  b.length();  i  +=  1)  {  for  (int  j  =  0;  j  <  l;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  b.length();  i  +=  2)  {  for  (int  j  =  0;  j  <  l;  j  +=  2)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  b.length();  i  +=  2)  {  for  (int  j  =  0;  j  <  l;  j  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  a.length();  i  +=  1)  {  for  (int  j  =  0;  j  <  l;  j++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  b.length();  i  +=  1)  {  for  (int  j  =  0;  j  <  l;  j  +=  2)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n</s>    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n</s>    }\n    return new int[] {even_count, odd_count};\n}\n",
      "output": [
        {
          "patch": "(int)c  %  2  ==  0)  even_count  +=  1;  if  ((int)c  %  2  ==  1)  odd_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(char  c  :  (num  +   \"   \").toCharArray())  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "(char  c  :  (num  +   \"   \").toCharArray())  {  if  ((int)c  %  2  ==  0)  even_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "((int)c  %  2  ==  0)  even_count  +=  1;  if  ((int)c  %  2  ==  1)  odd_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)c  %  2  ==  0)  even_count  +=  1;  if  ((int)c  %  2  ==  1)  odd_count  +=  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)c  %  2  ==  0)  even_count  +=  2;  if  ((int)c  %  2  ==  1)  odd_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(int)c  %  2  ==  0)  even_count  +=  2;  if  ((int)c  %  2  ==  1)  odd_count  +=  2;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  ((int)c  %  2  ==  0)  even_count  +=  1;  if  ((int)c  %  2  ==  1)  odd_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "(char)c  %  2  ==  0)  even_count  +=  1;  if  ((int)c  %  2  ==  1)  odd_count  +=  1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (char  c  :  (num  +   \"   \").toCharArray())  {  if  ((int)c  %  2  ==  0)  even_count  +=  1;",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n</s>        result += sym[i];\n</s>        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}\n",
      "output": [
        {
          "patch": "if  (number  >  0)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "sym[i]  =  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  >  0)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number!=  0)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "sym[i]  =  sym[i].trim();",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  <  0)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (i  <  sym.length)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (sym!=  null)  result  +=  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  >  0)  result  +=   \"   \"  +  sym[i];",
          "correctness": "wrong"
        },
        {
          "patch": "if  (number  >  0)  {  result  +=  sym[i];  }",
          "correctness": "wrong"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n</s>    return a*a + b*b == c*c;\n</s>}\n",
      "output": [
        {
          "patch": "return  a*a  +  b*b  ==  c*c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a*b  +  b*b  ==  c*c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  (a*a  +  b*b  ==  c*c);",
          "correctness": "wrong"
        },
        {
          "patch": "return  b*a  +  b*b  ==  c*c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a  *  b  *  b  ==  c  *  c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a*a  +  b*b  ==  c*c  +  b;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a*a  +  b*b  ==  c*c  +  c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a*a  +  b*b  ==  c*c  *  b;",
          "correctness": "wrong"
        },
        {
          "patch": "return  b  *  a  +  b  *  b  ==  c  *  c;",
          "correctness": "wrong"
        },
        {
          "patch": "return  a*a  +  b*b  ==  c*c+c;",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n</s>            return s1.size() - s2.size();\n</s>        }\n    );\n    return words_list.get(0);\n}\n",
      "output": [
        {
          "patch": "return  s1.size()  -  s2.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s1  ==  null?  null  :  s1.size()  -  s2.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s1.size()  -  s2.size()  -  s1.size();",
          "correctness": "wrong"
        },
        {
          "patch": "s1.size()  -=  s2.size();  return  s1.size()  -  s2.size();",
          "correctness": "uncompilable"
        },
        {
          "patch": "s1  =  new  HashSet  <  Character>();  return  s1.size()  -  s2.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s2.size()  -  s1.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s1.size()  -  s2.size()  -  s2.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s1.size()  -  s2.size()  -  1;",
          "correctness": "wrong"
        },
        {
          "patch": "return  s2  ==  null?  null  :  s1.size()  -  s2.size();",
          "correctness": "wrong"
        },
        {
          "patch": "return  s1.size()  -  ((String)  s2).size();",
          "correctness": "uncompilable"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n</s>    return new int[] {number + need,  remaining - need};\n</s>}\n",
      "output": [
        {
          "patch": "return  new  int[]  {  number  +  need,  remaining  -  need  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  result  =  new  int[]  {  number  +  need,  remaining  -  need  }  ;  return  result;",
          "correctness": "wrong"
        },
        {
          "patch": "new  int[]  {  number  +  need,  remaining  -  need  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  new  int[]  {  number  +  need,  remaining  -  need,  remaining  -  need  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (remaining  >  need)  return  new  int[]  {  number  +  need,  remaining  -  need  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  new  int[]  {  number  +  need,  remaining  +  need  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "int[]  return  new  int[]  {  number  +  need,  remaining  -  need  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  new  int[]  {  number  +  need,  remaining  -  need,  remaining  }  ;",
          "correctness": "wrong"
        },
        {
          "patch": "return  new  int[]  {  number  +  need,  remaining  -  need  },  new  int[]  {  number  }  ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return  new  int[]  {  number  +  need  -  need,  remaining  -  need  }  ;",
          "correctness": "wrong"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n</s>    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n</s>    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}\n",
      "output": [
        {
          "patch": "for  (int  i  =  0;  i  <  operand.length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  operand.length;  i  +=  2)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  operand.length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  operand[i].length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "For  (int  i  =  0;  i  <  operand.length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  operand.length;  i++)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  operand.length;  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  0;  i  <  operand[i];  i  +=  1)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for  (int  i  =  1;  i  <  operand.length;  i  +=  2)  {",
          "correctness": "uncompilable"
        },
        {
          "patch": "For(int  i  =  0;  i  <  operand.length;  i  +=  1)  {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n</s>        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n</s>    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n",
      "output": [
        {
          "patch": "if  (Character.isLowerCase(c))  sb.append(Character.toString(c));  else  sb.append(Character.toString(c));",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.isLowerCase((char)c))  sb.append((char)c);  else  sb.append((char)c);",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.isLowerCase(c))  sb.append(Character.toLowerCase(c));",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.isWhitespace(c))  sb.append(Character.toWhitespace(c));  else  sb.append(Character.toWhitespace(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isDigit(c))  sb.append(Character.toDigit(c));  else  sb.append(Character.toDigit(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isLowerCase((char)c))  sb.append((char)c);  else  sb.append((char)c);  flg  =  1;",
          "correctness": "wrong"
        },
        {
          "patch": "if  (Character.isBlank(c))  sb.append(Character.toBlank(c));  else  sb.append(Character.toBlank(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isBound(c))  sb.append(Character.toBound(c));  else  sb.append(Character.toBound(c));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isLowerCase(c))  sb.append(Character.toLowerCase(c));  else",
          "correctness": "uncompilable"
        },
        {
          "patch": "if  (Character.isLowerCase(c))  sb.append(Character.toUpperCase(c));",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n</s>    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n</s>    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}\n",
      "output": [
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-388   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-383   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(text);",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(text);",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-384   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-388   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-383   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-384   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-382   \");",
          "correctness": "wrong"
        },
        {
          "patch": "MessageDigest  md  =  MessageDigest.getInstance(   \"SHA-387   \");",
          "correctness": "wrong"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n</s>    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n</s>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}\n",
      "output": [
        {
          "patch": "Integer  upper  =  Integer.valueOf(a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  lower  =  Math.max(0,  a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  upper  =  Math.min(8,  a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  lower  =  Math.max(2,  a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  lower  =  Math.max(2,  a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer  upper  =  Integer.MAX_VALUE;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  lower  =  Math.max(2,  b);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  lower  =  Integer.MAX_VALUE;",
          "correctness": "uncompilable"
        },
        {
          "patch": "nt  lower  =  Math.max(2,  a);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int  lower  =  Math.max(1,  a);",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}