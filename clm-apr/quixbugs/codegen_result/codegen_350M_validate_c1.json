{
  "config": "CODEGEN_COMPLETE_CODEFORM_NOCOMMENT",
  "data": {
    "BITCOUNT": {
      "loc": "15-16",
      "input": "public static int bitcount(int n) {\n    int count = 0;\n    while (n != 0) {",
      "function range": "12,5-19,5",
      "output": [
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n      n &= n - 1;\n      count++;\n    }\n    return count;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "BREADTH_FIRST_SEARCH": {
      "loc": "26-27",
      "input": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);",
      "function range": "20,5-45,5",
      "output": [
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (nodesvisited.contains(node)) {\n        continue;\n      }\n      if (node == goalnode) {\n        return true;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (node == goalnode) {\n        return true;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n    }\n    return false;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (node == goalnode) {\n        return true;\n      } else {\n        queue.addLast(node);\n        nodesvisited.add(node);\n      }\n    }\n    return false;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (nodesvisited.contains(node)) {\n        continue;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n      if (node == goalnode) {\n        return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (nodesvisited.contains(node)) {\n        continue;\n      }\n      if (node == goalnode) {\n        return true;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (nodesvisited.contains(node)) {\n        return true;\n      }\n      if (node == goalnode) {\n        return false;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (nodesvisited.contains(node)) {\n        continue;\n      }\n      if (node == goalnode) {\n        return true;\n      }\n      queue.addLast(node);\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (node == goalnode) {\n        return true;\n      } else {\n        queue.addLast(node);\n      }\n    }\n    return false;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (node == goalnode) {\n        return true;\n      } else {\n        queue.addLast(node);\n        nodesvisited.add(node);\n      }\n    }\n    return false;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node node = queue.removeFirst();\n      if (node == goalnode) {\n        return true;\n      }\n      queue.addLast(node);\n      nodesvisited.add(node);\n    }\n    return false;\n  }",
          "correctness": "timeout"
        }
      ]
    },
    "BUCKETSORT": {
      "loc": "24-25",
      "input": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer x : counts) {\n        sorted_arr.set(i,x);\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    return sorted_arr;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    return sorted_arr;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer x : counts) {\n        sorted_arr.set(i,x);\n        i++;\n    }\n    Collections.sort(sorted_arr);\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    Collections.sort(sorted_arr);\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer x : counts) {\n        sorted_arr.set(i,x);\n        i++;\n    }\n    Collections.sort(sorted_arr);\n    return sorted_arr;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer x : counts) {\n        sorted_arr.set(i,x);\n        i++;\n    }\n    Collections.sort(sorted_arr);\n    return sorted_arr;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    while (i < counts.size()) {\n        sorted_arr.add(counts.get(i));\n        i++;\n    }\n    Collections.sort(sorted_arr);\n    return sorted_arr;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DEPTH_FIRST_SEARCH": {
      "loc": "23-23",
      "input": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {",
      "function range": "17,13-28,13",
      "output": [
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        return nodesvisited.add(node);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return nodesvisited.contains(goalnode);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left) || search(node.right);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return nodesvisited.contains(node);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return nodesvisited.contains(goalnode);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left) || search(node.right);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left) || search(node.right);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left) || search(node.right);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        nodesvisited.add(node);\n        return search(node.left) || search(node.right);\n    }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "DETECT_CYCLE": {
      "loc": "18-19",
      "input": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.getNext();\n      tortoise = tortoise.getNext();\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.next;\n      tortoise = tortoise.next;\n      if (hare == null || tortoise == null) {\n        return true;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.next;\n      tortoise = tortoise.next;\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.getNext();\n      tortoise = tortoise.getNext();\n      if (hare == null || tortoise == null) {\n        return true;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (tortoise == hare) {\n        return true;\n      }\n      hare = hare.next;\n      if (hare == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (tortoise == hare) {\n        return true;\n      }\n      hare = hare.next;\n      if (hare == null) {\n        return false;\n      }\n      hare = hare.next;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.getNext();\n      tortoise = tortoise.getNext();\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (tortoise == hare) {\n        return true;\n      }\n      hare = hare.getNext();\n      if (hare == null) {\n        return false;\n      }\n      hare = hare.getNext();\n      if (hare == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (hare == null || tortoise == null) {\n        return false;\n      }\n      hare = hare.next;\n      tortoise = tortoise.next;\n    }\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n      if (tortoise == hare) {\n        return true;\n      }\n      hare = hare.getNext();\n      if (hare == null) {\n        return false;\n      }\n    }\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_FIRST_IN_SORTED": {
      "loc": "19-20",
      "input": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;",
      "function range": "15,5-32,5",
      "output": [
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return lo;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    return lo;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else if (arr[mid] > x) {\n        hi = mid;\n      } else {\n        return mid;\n      }\n    }\n    return lo;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else if (arr[mid] > x) {\n        hi = mid;\n      } else {\n        return mid;\n      }\n    }\n    return -1;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else if (arr[mid] > x) {\n        hi = mid;\n      } else {\n        return mid;\n      }\n    }\n    return lo;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] < x) {\n            lo = mid + 1;\n        } else if (arr[mid] > x) {\n            hi = mid;\n        } else {\n            return mid;\n        }\n    }\n    return lo;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else if (arr[mid] > x) {\n        hi = mid;\n      } else {\n        return mid;\n      }\n    }\n    return lo;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] < x) {\n            lo = mid + 1;\n        } else if (arr[mid] > x) {\n            hi = mid;\n        } else {\n            return mid;\n        }\n    }\n    return lo;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] < x) {\n            lo = mid + 1;\n        } else if (arr[mid] > x) {\n            hi = mid;\n        } else {\n            return mid;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] < x) {\n        lo = mid + 1;\n      } else if (arr[mid] > x) {\n        hi = mid;\n      } else {\n        return mid;\n      }\n    }\n    return -1;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_IN_SORTED": {
      "loc": "20-21",
      "input": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return binsearch(arr, x, start, end);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return binsearch(arr, x, start, end);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return -1;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    }\n    return binsearch(arr, x, start, end);\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return binsearch(arr, x, start, mid);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return binsearch(arr, x, start, mid);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return binsearch(arr, x, start, end);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return binsearch(arr, x, start, end);\n    }\n}",
          "correctness": "timeout"
        }
      ]
    },
    "FLATTEN": {
      "loc": "22-28",
      "input": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {",
      "function range": "14,5-29,5",
      "output": [
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n }\n return result;\n}\n return arr;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(x);\n            }\n }\n return result;\n} else {\n        return arr;\n}\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n }\n return result;\n} else {\n        return arr;\n}\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n }\n return result;\n} else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return flatten(arr);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GCD": {
      "loc": "19-20",
      "input": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GET_FACTORS": {
      "loc": "20-21",
      "input": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }",
      "function range": "6,5-21,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            factors.add(i);\n        }\n    }\n    return factors;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    for (int i=2; i < max; i++) {\n        factors.add(i);\n    }\n    return factors;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            factors.add(i);\n        }\n    }\n    return factors;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    factors.add(1);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            factors.add(i);\n        }\n    }\n    return factors;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    factors.add(1);\n    for (int i=2; i < max; i++) {\n        factors.add(i);\n        factors.addAll(get_factors(n / i));\n    }\n    return factors;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    ArrayList<Integer> factors = new ArrayList<Integer>();\n    factors.add(1);\n    for (int i=2; i < max; i++) {\n        factors.add(i);\n        factors.addAll(get_factors(n / i));\n    }\n    return factors;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "HANOI": {
      "loc": "29-30",
      "input": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));",
      "function range": "17,5-34,5",
      "output": [
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, end));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, start));\n    }\n    return steps;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, end));\n        helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_VALID_PARENTHESIZATION": {
      "loc": "17-18",
      "input": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}",
      "function range": "6,5-18,5",
      "output": [
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn (depth == 0);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "KHEAPSORT": {
      "loc": "28-29",
      "input": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();",
      "function range": "21,5-40,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    output.addAll(heap);\n    return output;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    for (int i = 0; i < k; i++) {\n        output.add(heap.poll());\n    }\n    return output;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (heap.size() > 0) {\n        output.add(heap.poll());\n    }\n    return output;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    for (int i = 0; i < heap.size(); i++) {\n        output.add(heap.poll());\n    }\n    return output;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    for (int i = 0; i < heap.size(); i++) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        Integer v = heap.poll();\n        output.add(v);\n        for (int i = 0; i < k; i++) {\n            if (v.compareTo(arr.get(i)) < 0) {\n                heap.add(arr.get(i));\n            }\n        }\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        Integer v = heap.poll();\n        output.add(v);\n        for (int i = 0; i < k; i++) {\n            if (v.compareTo(arr.get(i)) > 0) {\n                heap.add(arr.get(i));\n            }\n        }\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        int v = heap.poll();\n        output.add(v);\n        for (int i = 0; i < k; i++) {\n            if (v == arr.get(i)) {\n                heap.add(arr.get(i));\n                break;\n            }\n        }\n    }\n    return output;\n}",
          "correctness": "timeout"
        }
      ]
    },
    "KNAPSACK": {
      "loc": "30-31",
      "input": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }",
      "function range": "14,5-40,5",
      "output": [
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            } else {\n                memo[i][j] = weight + value;\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            } else {\n                memo[i][j] = memo[i - 1][j - 1] + weight + value;\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "KTH": {
      "loc": "26-27",
      "input": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {",
      "function range": "8,5-30,5",
      "output": [
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(above, k);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - 1);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return below.get(k - 1);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return kth(below, k - num_lessoreq);\n    }\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "LCS_LENGTH": {
      "loc": "35-37",
      "input": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {",
      "function range": "13,5-58,5",
      "output": [
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                return dp.get(i).get(j);\n            }\n        }\n    }\n    return null;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                dp.get(i).put(j, dp.get(i).get(j) + 1);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j)+1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()-1).get(t.length()-1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j)+1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()-1).get(t.length()-1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length() - 1).get(t.length() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()).get(t.length()).intValue();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LEVENSHTEIN": {
      "loc": "17-18",
      "input": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty() ? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {",
      "function range": "13,5-25,5",
      "output": [
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return levenshtein(source, target);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return 0;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else {\n        return levenshtein(source, target.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return levenshtein(source, target.substring(0, target.length() - 1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return levenshtein(source, target);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return levenshtein(source, target);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(target.length() - 1));\n    } else {\n        return levenshtein(source, target);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (source.charAt(source.length() - 1) == target.charAt(target.length() - 1)) {\n        return levenshtein(source.substring(0, source.length() - 1), target.substring(0, target.length() - 1));\n    } else {\n        return levenshtein(source.substring(1), target.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else {\n        return levenshtein(source, target.substring(0, 1));\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else {\n        return levenshtein(source.substring(1), target.substring(0, 1));\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LIS": {
      "loc": "31-32",
      "input": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return longest;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n            i++;\n        }\n    }\n    return longest;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return ends.get(longest);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return ends.get(longest);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return ends.get(longest+1);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return ends.get(longest);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n            i++;\n        }\n    }\n    return ends.get(longest);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return ends.get(longest+1);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return longest;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "LONGEST_COMMON_SUBSEQUENCE": {
      "loc": "18-19",
      "input": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a;\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a;\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a;\n    } else {\n        return longest_common_subsequence(a.substring(0, a.length() - 1), b.substring(0, b.length() - 1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a;\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return longest_common_subsequence(a.substring(0, a.length() - 1), b.substring(0, b.length() - 1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return a + b;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return \"\";\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return a.substring(0, a.length() - 1) + b.substring(b.length() - 1);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1) + b.substring(b.length() - 1);\n    } else {\n        return a + b;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a;\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return longest_common_subsequence(a.substring(0, a.length() - 1), b.substring(0, b.length() - 1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.substring(1);\n    } else if (a.charAt(a.length() - 1) == b.charAt(b.length() - 1)) {\n        return a.substring(0, a.length() - 1);\n    } else {\n        return longest_common_subsequence(a.substring(0, a.length() - 1), b.substring(0, b.length() - 1));\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_SUBLIST_SUM": {
      "loc": "19-20",
      "input": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {",
      "function range": "14,5-24,5",
      "output": [
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      max_ending_here = Math.max(max_ending_here, x);\n      max_so_far = Math.max(max_so_far, x);\n    }\n    return max_ending_here + max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      max_ending_here = Math.max(max_ending_here, x);\n      max_so_far = Math.max(max_so_far, x);\n    }\n    return max_ending_here - max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      max_ending_here = Math.max(max_ending_here, x);\n      max_so_far = Math.max(max_so_far, x);\n    }\n    return max_ending_here;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here + max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here - max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here + max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_so_far;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n      if (x > max_ending_here) {\n        max_ending_here = x;\n      }\n      if (x > max_so_far) {\n        max_so_far = x;\n      }\n    }\n    return max_ending_here - max_so_far;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "MERGESORT": {
      "loc": "38-39",
      "input": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {",
      "function range": "37,5-51,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i).compareTo(arr.get(j)) > 0) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) < arr.get(j)) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    result.add(arr.get(i));\n                    result.add(arr.get(j));\n                }\n            }\n        }\n        return result;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "MINIMUM_SPANNING_TREE": {
      "loc": "29-30",
      "input": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {",
      "function range": "8,5-34,5",
      "output": [
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                if (!groupByNode.containsKey(node)) {\n                    groupByNode.put(node, new HashSet<>(Arrays.asList(node)));\n                }\n                if (groupByNode.get(node)!= groupByNode.get(vertex_u)) {\n                    minSpanningTree.add(edge);\n                    groupByNode = update(groupByNode, node, vertex_u);\n                }\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "NEXT_PALINDROME": {
      "loc": "37-38",
      "input": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid != high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);",
      "function range": "16,5-41,5",
      "output": [
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(0);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    return Arrays.toString(digit_list);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(2);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(0);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(0);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(0);\nreturn Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(2);\notherwise.add(3);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.add(2);\notherwise.add(3);\nreturn Arrays.toString(digit_list);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_PERMUTATION": {
      "loc": "19-20",
      "input": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {",
      "function range": "15,5-44,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(j+1));\n            }\n            perm.set(i, perm.get(i+1));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(i+1));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(j-1));\n            }\n            perm.set(i, perm.get(i+1));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                if (perm.get(j) < perm.get(j+1)) {\n                    perm.set(i, perm.get(i+1));\n                    perm.set(j, perm.get(j+1));\n                    break;\n                }\n            }\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(i, perm.get(j));\n                perm.set(j, perm.get(i));\n            }\n            perm.set(i, perm.get(i+1));\n            perm.set(i+1, perm.get(i));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(j+1));\n            }\n            perm.set(i, perm.get(i+1));\n            perm.set(i+1, perm.get(i));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                if (perm.get(j) < perm.get(j+1)) {\n                    perm.set(i, perm.get(i+1));\n                    perm.set(j, perm.get(j+1));\n                }\n            }\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(i, perm.get(j));\n                perm.set(j, perm.get(i));\n            }\n            perm.set(i, perm.get(i+1));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(i, perm.get(j));\n                perm.set(j, perm.get(i));\n            }\n            perm.set(i, perm.get(i+1));\n            perm.set(i+1, perm.get(i));\n            return perm;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(i, perm.get(j));\n                perm.set(j, perm.get(i));\n            }\n            perm.set(i, perm.get(i+1));\n            perm.set(i+1, perm.get(i));\n            return perm;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PASCAL": {
      "loc": "22-23",
      "input": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();",
      "function range": "14,5-40,5",
      "output": [
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(1);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(1);\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        row.add(r);\n        row.add(1);\n        rows.add(row);\n    }\n    return rows;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "POSSIBLE_CHANGE": {
      "loc": "17-18",
      "input": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[0] + coins[1];\n    } else if (total == 3) {\n        return coins[0] + coins[1] + coins[2];\n    } else if (total == 4) {\n        return coins[0] + coins[1] + coins[2] + coins[3];\n    }\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[1];\n    } else if (total == 3) {\n        return coins[2];\n    } else if (total == 4) {\n        return coins[3];\n    } else if (total == 5) {\n        return coins[4];\n    }\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[0] + coins[1];\n    } else if (total == 3) {\n        return coins[0] + coins[1] + coins[2];\n    } else {\n        return coins[0] + coins[1] + coins[2] + coins[3];\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[1];\n    } else if (total == 3) {\n        return coins[2];\n    } else if (total == 4) {\n        return coins[3];\n    } else {\n        return 0;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[0] + coins[1];\n    } else if (total == 3) {\n        return coins[0] + coins[1] + coins[2];\n    } else {\n        return 0;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[1];\n    } else if (total == 3) {\n        return coins[2];\n    } else if (total == 4) {\n        return coins[3];\n    } else {\n        return coins[4];\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else if (total == 2) {\n        return coins[1];\n    } else if (total == 3) {\n        return coins[2];\n    } else {\n        return coins[3];\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    for (int i = 0; i < coins.length; i++) {\n        if (coins[i] == total) {\n            return i;\n        }\n    }\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    for (int i = 0; i < coins.length; i++) {\n        if (coins[i] == total) {\n            return i;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    } else if (total == 1) {\n        return coins[0];\n    } else {\n        return possible_change(coins, coins.length - 1) + possible_change(coins, coins.length - 2);\n    }\n}",
          "correctness": "timeout"
        }
      ]
    },
    "QUICKSORT": {
      "loc": "26-27",
      "input": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);",
      "function range": "14,5-38,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(lesser);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else if (x > pivot) {\n            greater.add(x);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(lesser);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(greater);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else if (x > pivot) {\n            greater.add(x);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(greater);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n            pivot = x;\n        } else if (x > pivot) {\n            greater.add(x);\n            pivot = x;\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(greater);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else if (x > pivot) {\n            greater.add(x);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(greater);\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n            pivot = x;\n        } else if (x > pivot) {\n            greater.add(x);\n            pivot = x;\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return new ArrayList<Integer>(lesser);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n            greater.add(pivot);\n        } else if (x > pivot) {\n            greater.add(x);\n            lesser.add(pivot);\n        } else {\n            greater.add(x);\n            lesser.add(pivot);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    return quicksort(lesser);\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n            greater.add(pivot);\n        } else if (x > pivot) {\n            greater.add(x);\n            lesser.add(pivot);\n        } else {\n            greater.add(x);\n            lesser.add(pivot);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    return new ArrayList<Integer>(lesser);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n            greater.add(pivot);\n        } else if (x > pivot) {\n            greater.add(x);\n            lesser.add(pivot);\n        } else {\n            greater.add(x);\n            lesser.add(pivot);\n        }\n    }\n    lesser.add(pivot);\n    greater.add(pivot);\n    quicksort(lesser);\n    quicksort(greater);\n    return lesser;\n  }",
          "correctness": "timeout"
        }
      ]
    },
    "REVERSE_LINKED_LIST": {
      "loc": "20-20",
      "input": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node != null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "RPN_EVAL": {
      "loc": "34-35",
      "input": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);",
      "function range": "15,5-40,5",
      "output": [
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = (Double) stack.pop();\n}\nstack.push(c);\n}\n}\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = Double.parseDouble(token);\n}\nstack.push(c);\n}\n}\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = a.doubleValue() * b.doubleValue();\n}\nstack.push(c);\n}\n}\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = a.doubleValue() + b.doubleValue();\n}\nstack.push(c);\n}\n}\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = a.doubleValue() * b.doubleValue();\n}\nstack.push(c);\n}\n}\nreturn (Double) stack.pop();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = a.doubleValue() * b.doubleValue();\n}\nstack.push(c);\n}\n    }\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = Double.valueOf(a.doubleValue() + b.doubleValue());\n}\nstack.push(c);\n}\n}\nreturn c;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = a.doubleValue() * b.doubleValue();\n}\nstack.push(c);\n}\n}\nreturn (Double) stack.pop();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = Double.valueOf(a.doubleValue() + b.doubleValue());\n}\nstack.push(c);\n}\n}\nreturn (Double) stack.pop();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\nif (bin_op!= null) {\nc = bin_op.apply(a, b);\n} else {\nc = Double.valueOf(a.doubleValue() + b.doubleValue());\n}\nstack.push(c);\n}\n}\nreturn (Double) stack.pop();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SHORTEST_PATH_LENGTH": {
      "loc": "39-40",
      "input": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),",
      "function range": "11,5-44,5",
      "output": [
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), distance + 1));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), distance + unvisitedNodes.get(node)));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node)));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return Integer.MAX_VALUE;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), distance + unvisitedNodes.get(node)));\n        }\n    }\n    return Integer.MAX_VALUE;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return Integer.MAX_VALUE;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), unvisitedNodes.get(node) + 1));\n        }\n    }\n    return Integer.MAX_VALUE;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SHORTEST_PATH_LENGTHS": {
      "loc": "38-39",
      "input": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),",
      "function range": "19,5-44,5",
      "output": [
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(i,k)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(i,k)));\n                length_by_path.put(Arrays.asList(i,k), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n                length_by_path.put(Arrays.asList(k,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), length_by_path.get(Arrays.asList(i,k)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n                length_by_path.put(Arrays.asList(i,k), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SHORTEST_PATHS": {
      "loc": "30-31",
      "input": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));",
      "function range": "16,5-34,5",
      "output": [
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(0), update_weight);\n            weight_by_node.put(edge.get(1), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(0), update_weight);\n            weight_by_node.put(edge.get(1), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SHUNTING_YARD": {
      "loc": "34-34",
      "input": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }",
      "function range": "15,5-42,5",
      "output": [
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.add(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.add(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.add(operator);\n        }\n    }\n    return rpntokens;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.addLast(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());\n            }\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());\n            }\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());\n            }\n        }\n    }\n    return rpntokens;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.add(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(operator);\n        }\n    }\n    return rpntokens;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SIEVE": {
      "loc": "41-42",
      "input": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {",
      "function range": "38,5-46,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      primes.add(n);\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (isPrime(n)) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (n % 2 == 0) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (n%2==0) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (n%2 == 0) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (n%2==0) primes.add(n);\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (isPrime(n)) primes.add(n);\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (n%2 == 0) primes.add(n);\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (isPrime(n)) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n      if (isPrime(n)) {\n        primes.add(n);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SQRT": {
      "loc": "16-17",
      "input": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    return Math.sqrt(approx);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    if (approx > epsilon) {\n      return approx;\n    }\n    return Double.NEGATIVE_INFINITY;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    if (approx > epsilon) {\n      return approx;\n    } else {\n      return Double.NEGATIVE_INFINITY;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    return Math.sqrt(approx);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    return approx * approx;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    if (approx > epsilon) {\n      return approx;\n    }\n    return Double.POSITIVE_INFINITY;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.NEGATIVE_INFINITY;\n    }\n    return Math.sqrt(approx);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    return Math.sqrt(approx);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    if (approx > epsilon) {\n      return approx;\n    } else {\n      return Double.NEGATIVE_INFINITY;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    if (Double.isNaN(approx) || Double.isInfinite(approx)) {\n      return Double.NaN;\n    }\n    if (Double.isInfinite(approx)) {\n      return Double.POSITIVE_INFINITY;\n    }\n    if (approx > epsilon) {\n      return approx;\n    }\n    return Double.NaN;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SUBSEQUENCES": {
      "loc": "16-17",
      "input": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n    if (k == 0) {",
      "function range": "14,5-31,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n    if (k == 0) {\n      return new ArrayList<ArrayList>();\n    } else if (k == 1) {\n      return new ArrayList<ArrayList>();\n    } else if (k == 2) {\n      return new ArrayList<ArrayList>();\n    } else if (k == 3) {\n      return new ArrayList<ArrayList>();\n    } else if (k == 4) {\n      return new ArrayList<ArrayList>();\n    } else {\n      return new ArrayList<ArrayList>();\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TO_BASE": {
      "loc": "21-22",
      "input": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; ",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = alphabet.charAt(i) + result;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result += alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TOPOLOGICAL_ORDERING": {
      "loc": "17-18",
      "input": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {",
      "function range": "5,5-24,5",
      "output": [
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            orderedNodes.add(nextNode);\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (nextNode.getPredecessors().isEmpty()) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (!nextNode.getPredecessors().isEmpty()) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            orderedNodes.add(nextNode);\n        }\n    }\n    return orderedNodes;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            orderedNodes.add(nextNode);\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            orderedNodes.add(nextNode);\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (nextNode.getPredecessors().isEmpty()) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (nextNode.getPredecessors().isEmpty()) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (!node.getPredecessors().contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WRAP": {
      "loc": "32-32",
      "input": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }",
      "function range": "18,5-33,5",
      "output": [
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    return lines;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    return lines;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    return lines;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    return lines;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    return lines;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "POWERSET": {
      "loc": "23-30",
      "input": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);",
      "function range": "14,5-35,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    }
  }
}