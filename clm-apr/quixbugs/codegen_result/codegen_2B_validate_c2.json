{
  "config": "CODEGEN_COMPLETE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "BITCOUNT": {
      "loc": "15-16",
      "input": "public static int bitcount(int n) {\n    int count = 0;\n    while (n != 0) {\n// buggy line:        n = (n ^ (n - 1));",
      "function range": "12,5-19,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int bitcount(int n) {\n    int count = 0;\n    while (n!= 0) {\n        n = n & (n - 1);\n        count++;\n    }\n    return count;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "BREADTH_FIRST_SEARCH": {
      "loc": "26-27",
      "input": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n// buggy line:    while (true) {",
      "function range": "20,5-45,5",
      "output": [
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node current = queue.removeFirst();\n      if (current.equals(goalnode)) {\n        return true;\n      }\n      for (Node child : current.getChildren()) {\n        if (!nodesvisited.contains(child)) {\n          queue.addLast(child);\n          nodesvisited.add(child);\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node child : current.getChildren()) {\n            if (!nodesvisited.contains(child)) {\n                queue.addLast(child);\n                nodesvisited.add(child);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node neighbor : current.getNeighbors()) {\n            if (!nodesvisited.contains(neighbor)) {\n                queue.addLast(neighbor);\n                nodesvisited.add(neighbor);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current == goalnode) {\n            return true;\n        }\n        for (Node child : current.getChildren()) {\n            if (!nodesvisited.contains(child)) {\n                queue.addLast(child);\n                nodesvisited.add(child);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node node = queue.removeFirst();\n        if (node.equals(goalnode)) {\n            return true;\n        }\n        for (Node child : node.getChildren()) {\n            if (!nodesvisited.contains(child)) {\n                queue.addLast(child);\n                nodesvisited.add(child);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node neighbor : current.getNeighbors()) {\n            if (!nodesvisited.contains(neighbor)) {\n                queue.addLast(neighbor);\n                nodesvisited.add(neighbor);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node neighbor : current.getNeighbors()) {\n            if (!nodesvisited.contains(neighbor)) {\n                nodesvisited.add(neighbor);\n                queue.addLast(neighbor);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n      Node current = queue.removeFirst();\n      if (current.equals(goalnode)) {\n        return true;\n      }\n      for (Node child : current.getChildren()) {\n        if (!nodesvisited.contains(child)) {\n          queue.addLast(child);\n          nodesvisited.add(child);\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node neighbor : current.getNeighbors()) {\n            if (!nodesvisited.contains(neighbor)) {\n                nodesvisited.add(neighbor);\n                queue.addLast(neighbor);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n    while (!queue.isEmpty()) {\n        Node current = queue.removeFirst();\n        if (current.equals(goalnode)) {\n            return true;\n        }\n        for (Node neighbor : current.getNeighbors()) {\n            if (!nodesvisited.contains(neighbor)) {\n                queue.addLast(neighbor);\n                nodesvisited.add(neighbor);\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "BUCKETSORT": {
      "loc": "24-25",
      "input": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n// buggy line:    for (Integer count : arr) {",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        sorted_arr.add(i,count);\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        sorted_arr.add(i,count);\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        sorted_arr.add(i, count);\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        sorted_arr.add(i,count);\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        if (count > 0) {\n            sorted_arr.add(i,count);\n        }\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (i = 0; i < arr.size(); i++) {\n        sorted_arr.add(counts.get(arr.get(i)));\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        sorted_arr.add(i,count);\n        i++;\n    }\n    return sorted_arr;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (i = 0; i < arr.size(); i++) {\n        sorted_arr.add(counts.get(arr.get(i)));\n        counts.set(arr.get(i),0);\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        if (count > 0) {\n            sorted_arr.add(i,count);\n        }\n        i++;\n    }\n    return sorted_arr;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n    for (Integer count : counts) {\n        if (count > 0) {\n            sorted_arr.add(i,count);\n        }\n        i++;\n    }\n    return sorted_arr;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "DEPTH_FIRST_SEARCH": {
      "loc": "23-23",
      "input": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n// buggy line:        for (Node successornodes : node.getSuccessors()) {",
      "function range": "17,13-28,13",
      "output": [
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successor : node.getSuccessors()) {\n            if (search(successor)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                nodesvisited.add(node);\n                return true;\n            }\n        }\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successor : node.getSuccessors()) {\n            if (search(successor)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                nodesvisited.add(node);\n                return true;\n            }\n        }\n        return false;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n        for (Node successornodes : node.getSuccessors()) {\n            if (search(successornodes)) {\n                return true;\n            }\n        }\n        nodesvisited.add(node);\n        return false;\n    }\n}",
          "correctness": "timeout"
        }
      ]
    },
    "DETECT_CYCLE": {
      "loc": "18-19",
      "input": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n// buggy line:        if (hare.getSuccessor() == null)",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            break;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return false;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return true;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return false;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            break;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return false;\n        }\n        hare = hare.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n        tortoise = tortoise.getSuccessor();\n    }\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return false;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return true;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return true;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == null) {\n            return false;\n        }\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n        if (hare.getSuccessor() == null) {\n            return true;\n        }\n        hare = hare.getSuccessor();\n        tortoise = tortoise.getSuccessor();\n        if (hare == tortoise) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_FIRST_IN_SORTED": {
      "loc": "19-20",
      "input": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n// buggy line:    while (lo <= hi) {",
      "function range": "15,5-32,5",
      "output": [
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] > x) {\n            hi = mid - 1;\n        } else {\n            lo = mid + 1;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n      int mid = lo + (hi - lo) / 2;\n      if (arr[mid] == x) {\n        return mid;\n      } else if (arr[mid] < x) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    return -1;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return lo;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n    while (lo < hi) {\n        int mid = lo + (hi - lo) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_IN_SORTED": {
      "loc": "20-21",
      "input": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n// buggy line:        return binsearch(arr, x, mid, end);",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid+1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid + 1, end);\n    }\n    return mid;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    } else {\n        return mid;\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n        return binsearch(arr, x, mid, end);\n    }\n    return mid;\n}",
          "correctness": "timeout"
        }
      ]
    },
    "FLATTEN": {
      "loc": "22-28",
      "input": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n// buggy line:                result.add(flatten(x));\n// buggy line:}\n// buggy line:        }\n// buggy line:        return result;\n// buggy line:}else {\n// buggy line: return flatten(arr);",
      "function range": "14,5-29,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(x);\n            }\n        } else {\n            return arr;\n        }\n        return result;\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n            result.add(x);\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n            result.add(x);\n        }\n        return result;\n    } else {\n        return arr;\n    }\n}\n\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(x);\n            }\n        } else {\n            return arr;\n        }\n        return result;\n}\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(x);\n            }\n        } else {\n            return arr;\n        }\n        return result;\n    }\n\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        } else {\n            return arr;\n        }\n        return result;\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        } else {\n            return arr;\n        }\n        return result;\n}\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                result.add(flatten(x));\n            }\n        } else {\n            return arr;\n        }\n        return result;\n    }\n\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "GCD": {
      "loc": "19-20",
      "input": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n// buggy line:        return gcd(a % b, b);",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GET_FACTORS": {
      "loc": "20-21",
      "input": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n// buggy line:   \treturn new ArrayList<Integer>();",
      "function range": "6,5-21,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return null;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>(Arrays.asList(n));\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n    return new ArrayList<Integer>(Arrays.asList(n));\n}",
          "correctness": "plausible"
        }
      ]
    },
    "HANOI": {
      "loc": "29-30",
      "input": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n// buggy line:        steps.add(new Pair<Integer,Integer>(start, helper));",
      "function range": "17,5-34,5",
      "output": [
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    } else {\n        steps.add(new Pair<Integer,Integer>(start, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n        steps.addAll(hanoi(height-1, helper, end));\n        steps.add(new Pair<Integer,Integer>(start, end));\n    }\n    return steps;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_VALID_PARENTHESIZATION": {
      "loc": "17-18",
      "input": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\n// buggy line:return true;",
      "function range": "6,5-18,5",
      "output": [
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn depth == 0? true : false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn depth == 0? true : false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\nreturn depth == 0;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "KHEAPSORT": {
      "loc": "28-29",
      "input": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n// buggy line:    for (Integer x : arr) {",
      "function range": "21,5-40,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (heap.size() > 0) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.remove());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (heap.size() > 0) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while(!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n    while (heap.size() > 0) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "KNAPSACK": {
      "loc": "30-31",
      "input": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n// buggy line:            else if (weight < j) {",
      "function range": "14,5-40,5",
      "output": [
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = memo[i - 1][j];\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = memo[i - 1][j];\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = memo[i - 1][j];\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight + items[i - 1][1] < j) {\n                memo[i][j] = memo[i - 1][j];\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight + items[i - 1][1] < j) {\n                memo[i][j] = memo[i - 1][j];\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight] + value);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i - 1][j - weight]);\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - value]);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n            else if (weight < j) {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n            else {\n                memo[i][j] = Math.max(memo[i - 1][j], memo[i][j - weight]);\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
          "correctness": "wrong"
        }
      ]
    },
    "KTH": {
      "loc": "26-27",
      "input": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n// buggy line:        return kth(above, k);",
      "function range": "8,5-30,5",
      "output": [
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return pivot;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return pivot;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return arr.get(k);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return arr.get(k);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return pivot;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return pivot;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return arr.get(k - 1);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return arr.get(k - 1);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return arr.get(k);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n        return kth(above, k - num_lessoreq);\n    } else {\n        return below.get(k - num_less);\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LCS_LENGTH": {
      "loc": "35-37",
      "input": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n// buggy line:                if (dp.containsKey(i-1)) {\n// buggy line:                    Map<Integer, Integer> internal_map = dp.get(i);",
      "function range": "13,5-58,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j, internal_map.get(j) + 1);\n                dp.put(i, internal_map);\n            }\n        }\n    }\n    return dp.get(s.length()-1).get(t.length()-1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "LEVENSHTEIN": {
      "loc": "17-18",
      "input": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty() ? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n// buggy line:        return 1 + levenshtein(source.substring(1), target.substring(1));",
      "function range": "13,5-25,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else if (target.charAt(0) == source.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else {\n        return levenshtein(source.substring(1), target.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty()? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n        return levenshtein(source.substring(1), target.substring(1));\n    } else {\n        return levenshtein(source, target.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "LIS": {
      "loc": "31-32",
      "input": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n// buggy line:            longest = length + 1;",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = length;\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = Math.max(longest, length+1);\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            longest = Math.max(longest, length);\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            if (length > longest) {\n                longest = length;\n            }\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n        } else {\n            ends.put(length, i);\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            if (length > longest) {\n                longest = length;\n            }\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            if (length > longest) {\n                longest = length;\n            }\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n            if (length > longest) {\n                longest = length;\n            }\n        }\n        i++;\n    }\n    return longest;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LONGEST_COMMON_SUBSEQUENCE": {
      "loc": "18-19",
      "input": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n// buggy line:        return a.charAt(0) + longest_common_subsequence(a.substring(1), b);",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return longest_common_subsequence(a.substring(1), b);\n    } else {\n        return longest_common_subsequence(a, b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return longest_common_subsequence(a.substring(1), b);\n    } else {\n        return \"\";\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1));\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return longest_common_subsequence(a.substring(1), b);\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n    } else {\n        return longest_common_subsequence(a.substring(1), b);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a, b.substring(1));\n    } else {\n        return longest_common_subsequence(a.substring(1), b);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a, b.substring(1));\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1));\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n        return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n    } else {\n        return longest_common_subsequence(a.substring(1), b.substring(1));\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_SUBLIST_SUM": {
      "loc": "19-20",
      "input": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n// buggy line:        max_ending_here = max_ending_here + x;",
      "function range": "14,5-24,5",
      "output": [
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max(max_ending_here, x);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max(max_ending_here, x);\n        max_so_far = max(max_so_far, x + max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max_ending_here + x;\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here += x;\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max_ending_here + x;\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here += x;\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max_ending_here + x;\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max(max_ending_here, x);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = Math.max(max_ending_here, x);\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n        max_ending_here = max(max_ending_here, x);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MERGESORT": {
      "loc": "38-39",
      "input": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n// buggy line:    if (arr.size() == 0) {",
      "function range": "37,5-51,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MINIMUM_SPANNING_TREE": {
      "loc": "29-30",
      "input": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n// buggy line:                groupByNode = update(groupByNode, node, vertex_u);",
      "function range": "8,5-34,5",
      "output": [
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n                groupByNode = update(groupByNode, node, vertex_v);\n            }\n        }\n    }\n    return minSpanningTree;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "NEXT_PALINDROME": {
      "loc": "37-38",
      "input": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid != high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));",
      "function range": "16,5-41,5",
      "output": [
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    return Arrays.toString(otherwise.toArray(new Integer[otherwise.size()]));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    return Arrays.toString(otherwise.toArray(new Integer[0]));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    return Arrays.toString(otherwise.toArray(new Integer[otherwise.size()]));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\notherwise.addAll(Arrays.asList(digit_list));\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    for (int i = 0; i < digit_list.length; i++) {\n        otherwise.add(digit_list[i]);\n    }\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    for (int i = 0; i < digit_list.length; i++) {\n        if (digit_list[i]!= 0) {\n            otherwise.add(digit_list[i]);\n        }\n    }\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    for (int i = 0; i < digit_list.length; i++) {\n        otherwise.add(digit_list[i]);\n    }\n    return Arrays.toString(otherwise.toArray(new Integer[otherwise.size()]));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    for (int i = 0; i < digit_list.length; i++) {\n        if (digit_list[i]!= 9) {\n            otherwise.add(digit_list[i]);\n        }\n    }\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid!= high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n    for (int i = 0; i < digit_list.length; i++) {\n        if (digit_list[i]!= 0) {\n            otherwise.add(digit_list[i]);\n        }\n    }\n    return Arrays.toString(otherwise.toArray());\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_PERMUTATION": {
      "loc": "19-20",
      "input": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n// buggy line:                if (perm.get(j) < perm.get(i)) {",
      "function range": "15,5-44,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(i));\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(i)+1);\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(i));\n            return perm;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(i)+1);\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n                perm.set(j, perm.get(i));\n                perm.set(i, perm.get(j));\n            }\n            perm.set(i, perm.get(perm.size()-1));\n            perm.remove(perm.size()-1);\n        } else {\n            break;\n        }\n    }\n    return perm;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PASCAL": {
      "loc": "22-23",
      "input": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n// buggy line:        for (int c=0; c<r; c++) {",
      "function range": "14,5-40,5",
      "output": [
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c));\n        }\n        row.add(1);\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c));\n        }\n        row.add(1);\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c)+rows.get(r-2).get(c));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c)+rows.get(r-2).get(c));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=r-1; c>=0; c--) {\n            row.add(rows.get(r-1).get(c)+rows.get(r-1).get(c+1));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<init.size(); c++) {\n            row.add(init.get(c) + init.get(c+1));\n        }\n        init = row;\n        rows.add(init);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c) + rows.get(r-1).get(c+1));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c) + rows.get(r-2).get(c));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c)+rows.get(r-1).get(c+1));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int c=0; c<rows.get(r-1).size(); c++) {\n            row.add(rows.get(r-1).get(c) + rows.get(r-2).get(c));\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "POSSIBLE_CHANGE": {
      "loc": "17-18",
      "input": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n// buggy line:    if (total < 0) {",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (i - coins[j] >= 0) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (coins[j] <= i) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (coins[j] <= i) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (i >= coins[j]) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (i >= coins[j]) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (coins[j] == i) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (coins[j] == i) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (i - coins[j] >= 0) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int coin : coins) {\n            if (i >= coin) {\n                dp[i] += dp[i - coin];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n    if (total < 0) {\n        return 0;\n    }\n    int[] dp = new int[total + 1];\n    dp[0] = 1;\n    for (int i = 1; i <= total; i++) {\n        for (int j = 0; j < coins.length; j++) {\n            if (i >= coins[j]) {\n                dp[i] += dp[i - coins[j]];\n            }\n        }\n    }\n    return dp[total];\n}",
          "correctness": "wrong"
        }
      ]
    },
    "QUICKSORT": {
      "loc": "26-27",
      "input": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n// buggy line:        } else if (x > pivot) {",
      "function range": "14,5-38,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(arr, lesser);\n    quicksort(arr, greater);\n    return arr;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    return quicksort(lesser) + pivot + quicksort(greater);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(lesser);\n    quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(greater);\n    result.addAll(lesser);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    lesser = quicksort(lesser);\n    greater = quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(greater);\n    result.addAll(lesser);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(lesser);\n    quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(lesser);\n    result.add(pivot);\n    result.addAll(greater);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(lesser);\n    quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(greater);\n    result.addAll(lesser);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    lesser = quicksort(lesser);\n    greater = quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(greater);\n    result.addAll(lesser);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(lesser);\n    quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(lesser);\n    result.addAll(greater);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    quicksort(lesser);\n    quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(lesser);\n    result.add(pivot);\n    result.addAll(greater);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n        } else {\n            greater.add(x);\n        }\n    }\n    lesser = quicksort(lesser);\n    greater = quicksort(greater);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.addAll(greater);\n    result.addAll(lesser);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REVERSE_LINKED_LIST": {
      "loc": "20-20",
      "input": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node != null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n// buggy line:        node = nextnode;",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node!= null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n        prevnode = node;\n        node = nextnode;\n    }\n    return prevnode;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "RPN_EVAL": {
      "loc": "34-35",
      "input": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n// buggy line:c= bin_op.apply(a,b);",
      "function range": "15,5-40,5",
      "output": [
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\n    return stack.pop();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\n    return (Double) stack.pop();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\nreturn (Double) stack.pop();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\n    Double result = (Double) stack.pop();\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\nDouble result = (Double) stack.pop();\nreturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            if (bin_op!= null) {\n                c = bin_op.apply(a, b);\n            }\n            stack.push(c);\n        }\n    }\n    return stack.pop();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\n    Double result = (Double) stack.pop();\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\nDouble result = (Double) stack.pop();\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            c = bin_op.apply(a, b);\n            stack.push(c);\n        }\n    }\n    Double result = (Double) stack.pop();\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n            if (bin_op!= null) {\n                c = bin_op.apply(a, b);\n            }\n            stack.push(c);\n        }\n    }\n    return stack.pop();\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SHORTEST_PATH_LENGTH": {
      "loc": "39-40",
      "input": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n// buggy line:                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));",
      "function range": "11,5-44,5",
      "output": [
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n        }\n    }\n    return -1;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SHORTEST_PATH_LENGTHS": {
      "loc": "38-39",
      "input": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n// buggy line:                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));",
      "function range": "19,5-44,5",
      "output": [
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                if (update_length < length_by_path.get(Arrays.asList(i,j))) {\n                    length_by_path.put(Arrays.asList(i,j), update_length);\n                }\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                if (update_length < length_by_path.get(Arrays.asList(i,j))) {\n                    length_by_path.put(Arrays.asList(i,j), update_length);\n                }\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(k,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(k,j)));\n                if (update_length < length_by_path.get(Arrays.asList(i,j))) {\n                    length_by_path.put(Arrays.asList(i,j), update_length);\n                }\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(k,j)));\n                if (update_length < length_by_path.get(Arrays.asList(i,j))) {\n                    length_by_path.put(Arrays.asList(i,j), update_length);\n                }\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                        length_by_path.get(Arrays.asList(i,j)));\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SHORTEST_PATHS": {
      "loc": "30-31",
      "input": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n// buggy line:            weight_by_edge.put(edge, update_weight);",
      "function range": "16,5-34,5",
      "output": [
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            if (update_weight < weight_by_node.get(edge.get(1))) {\n                weight_by_node.put(edge.get(1), update_weight);\n            }\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            weight_by_node.put(edge.get(1), update_weight);\n            weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            if (update_weight < weight_by_node.get(edge.get(1)))\n                weight_by_node.put(edge.get(1), update_weight);\n            if (update_weight < weight_by_node.get(edge.get(0)))\n                weight_by_node.put(edge.get(0), update_weight);\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            if (update_weight < weight_by_node.get(edge.get(1))) {\n                weight_by_node.put(edge.get(1), update_weight);\n            }\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            if (update_weight < weight_by_node.get(edge.get(1))) {\n                weight_by_node.put(edge.get(1), update_weight);\n            }\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n            if (update_weight < weight_by_node.get(edge.get(1))) {\n                weight_by_node.put(edge.get(1), update_weight);\n            }\n        }\n    }\n    return weight_by_node;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SHUNTING_YARD": {
      "loc": "34-34",
      "input": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n// buggy line:        }",
      "function range": "15,5-42,5",
      "output": [
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n            opstack.push(token);\n        }\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SIEVE": {
      "loc": "41-42",
      "input": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n// buggy line:        if (any(list_comp(n, primes))) {",
      "function range": "38,5-46,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (prime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (prime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SQRT": {
      "loc": "16-17",
      "input": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n// buggy line:    while (Math.abs(x-approx) > epsilon) {",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon*approx) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon*approx) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon*approx) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n    while (Math.abs(x-approx) > epsilon*approx) {\n      approx *= 0.5f;\n    }\n    return approx;\n  }",
          "correctness": "timeout"
        }
      ]
    },
    "SUBSEQUENCES": {
      "loc": "16-17",
      "input": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n    if (k == 0) {\n// buggy line:        return new ArrayList();",
      "function range": "14,5-31,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TO_BASE": {
      "loc": "21-22",
      "input": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n// buggy line:        result = result + String.valueOf(alphabet.charAt(i));",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + alphabet.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n        result = result + String.valueOf(alphabet.charAt(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TOPOLOGICAL_ORDERING": {
      "loc": "17-18",
      "input": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n// buggy line:            if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {",
      "function range": "5,5-24,5",
      "output": [
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getSuccessors())) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (nextNode.getPredecessors().containsAll(orderedNodes) &&!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.contains(nextNode)) {\n                orderedNodes.remove(nextNode);\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getSuccessors())) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n            if (orderedNodes.contains(nextNode)) {\n                orderedNodes.remove(nextNode);\n                orderedNodes.add(nextNode);\n            }\n        }\n    }\n    return orderedNodes;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WRAP": {
      "loc": "32-32",
      "input": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n// buggy line:    return lines;",
      "function range": "18,5-33,5",
      "output": [
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    lines.add(text);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length() > 0) {\n        lines.add(text);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length() > 0) {\n        lines.add(text);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    line = text;\n    lines.add(line);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    line = text;\n    lines.add(line);\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length() > 0) {\n        line = text;\n        lines.add(line);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length() > 0) {\n        lines.add(text);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length()!= 0) {\n        lines.add(text);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n    if (text.length() > 0) {\n        line = text;\n        lines.add(line);\n    }\n    return lines;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "POWERSET": {
      "loc": "23-30",
      "input": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n// buggy line:        to_add.add(first);\n// buggy line:        for (ArrayList subset : rest_subsets) {\n// buggy line:            to_add.addAll(subset);\n// buggy line:        }\n// buggy line:        output.add(to_add);\n// buggy line:        return output;",
      "function range": "14,5-35,5",
      "output": [
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        return new ArrayList<ArrayList>(0);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        return new ArrayList<ArrayList>(100);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        to_add.add(first);\n        for (ArrayList subset : rest_subsets) {\n            to_add.addAll(subset);\n        }\n        output.add(to_add);\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList());\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            ArrayList to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        return new ArrayList<ArrayList>(0);\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        to_add.add(first);\n        for (ArrayList subset : rest_subsets) {\n            to_add.addAll(subset);\n        }\n        output.add(to_add);\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList());\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList());\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList(100));\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList(100));\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.add(first);\n            to_add.addAll(subset);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        output.add(new ArrayList(100));\n        return output;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n        for (ArrayList subset : rest_subsets) {\n            to_add = new ArrayList(100);\n            to_add.addAll(subset);\n            to_add.add(first);\n            output.add(to_add);\n        }\n        return output;\n    } else {\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        return output;\n    }\n}",
          "correctness": "wrong"
        }
      ]
    }
  }
}