{
  "config": "PLBART_SEQFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "BITCOUNT": {
      "loc": "15-16",
      "input": "<s> public static int bitcount(int n) { int count = 0; while (n != 0) { /* n = (n ^ (n - 1)); */ <mask> count++; } return count; } </s> java",
      "function range": "12,5-19,5",
      "output": [
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ n = (n ^ (n - 1)); count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ n >>= 1 ; count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if (n == 0 ) { break ; } count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & 1 ) == 1 ) count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if (n == 0 ) { break; } count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & 1 )!= 0 ) count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & (n - 1))); count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & 1 ) == 0 ) count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & 1 ) == 1) count++; } return count; }",
        "public static int bitcount(int n) { int count = 0; while (n!= 0) { /* n = (n ^ (n - 1)); */ if ( (n & 1 ) == 1 ) { break; } count++; } return count; }"
      ]
    },
    "BREADTH_FIRST_SEARCH": {
      "loc": "26-27",
      "input": "<s> public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ <mask> Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } </s> java",
      "function range": "20,5-45,5",
      "output": [
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (!queue.isEmpty()) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0 ) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0 && queue.isEmpty()) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ if (queue.isEmpty()) { return false; } else { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (!queue.isEmpty()) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0 ) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ if (queue.isEmpty()) { return false; } else { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } }",
        "public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); /* while (true) { */ while (queue.size() > 0) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } } return false; }"
      ]
    },
    "BUCKETSORT": {
      "loc": "24-25",
      "input": "<s> public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ <mask> sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; } </s> java",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { sorted_arr.add(x); } sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x > i) sorted_arr.add(x); } sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x < count) sorted_arr.add(x); } sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x > 0) sorted_arr.add(x); } sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x > i) { sorted_arr.add(x); } } sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x > i) sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ while (i < counts.size()) { if (counts.get(i) > counts.get(count)) sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; } */ return sorted_arr; }",
        "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0)); for (Integer x : arr) { counts.set(x,counts.get(x)+1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; /* for (Integer count : arr) { */ for (Integer x : counts) { if (x > i) sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; } */ return sorted_arr; }"
      ]
    },
    "DEPTH_FIRST_SEARCH": {
      "loc": "23-23",
      "input": "<s> boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ <mask> if (search(successornodes)) { return true; } } } return false; } </s> java",
      "function range": "17,13-28,13",
      "output": [
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes.getNodes()) { if (search(successornode)) { return true; } } if (search(successornodes)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes) { if (search(successornode)) { return true; } } if (search(successornodes)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornodes2 : successornodes.getSuccessors()) { if (search(successornodes)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornodes : successornodes.getSuccessors()) { if (search(successornodes)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes) { if (search(successornodes)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes) { if (search(successornode)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes) { if (search(successornode)) { return true; } } } return false; } }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes.getSuccessors()) { if (search(successornode)) { return true; } } } return false; }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornode : successornodes.getSuccessors()) { if (search(successornode)) { return true; } } } return false; } }",
        "boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { /* for (Node successornodes : node.getSuccessors()) { */ for (Node successornodes2 : successornodes.getSuccessors()) { if (search(successornodes)) { return true; } } } return false; } }"
      ]
    },
    "DETECT_CYCLE": {
      "loc": "18-19",
      "input": "<s> public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ <mask> return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } } </s> java",
      "function range": "13,5-27,5",
      "output": [
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ if (tortoise.getSuccessor() == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ if (hare.getSuccessor().getSuccessor() == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ if (hare == tortoise) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ hare = hare.getSuccessor(); if (hare == tortoise) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ hare = hare.getSuccessor(); if (hare == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ if (hare.getSuccessor() == tortoise) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ if (tortoise.getSuccessor() == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true ; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ hare = hare.getSuccessor(); if (hare == tortoise) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise ) return true; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ hare = hare.getSuccessor(); if (hare == tortoise) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true ; } }",
        "public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { /* if (hare.getSuccessor() == null) */ hare = hare.getSuccessor(); if (hare == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true ; } }"
      ]
    },
    "FIND_FIRST_IN_SORTED": {
      "loc": "19-20",
      "input": "<s> public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ <mask> int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; } </s> java",
      "function range": "15,5-32,5",
      "output": [
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (lo <= hi) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (lo < hi) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ if (x < arr[lo]) { return lo; } else if (x > arr[hi]) { return hi; } int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (x >= arr[lo]) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ if (x >= arr[lo]) { return lo; } else if (x <= arr[hi]) { return hi; } int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ if (x <= arr[lo]) { return lo; } else if (x >= arr[hi]) { return hi; } int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ if (x < arr[lo]) return lo; else if (x > arr[hi]) return hi; int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (lo < hi) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (lo <= hi) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; } return -1; }",
        "public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; /* while (lo <= hi) { */ while (x >= arr[lo]) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x!= arr[mid-1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; } return -1; }"
      ]
    },
    "FIND_IN_SORTED": {
      "loc": "20-21",
      "input": "<s> public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ <mask> } else { return mid; } } </s> java",
      "function range": "12,5-24,5",
      "output": [
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return binsearch(arr, x, mid + 1, end); } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return binsearch(arr, x, mid + 1, end); } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return binsearch(arr, x, end, mid); } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return -1; } else if (x == arr[mid]) { return start; } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return - 1; } else if (x == arr[mid]) { return start; } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return mid; } else if (x == arr[mid]) { return start; } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return mid; } else if (x == arr[mid]) { return end; } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ } else if (x == arr[mid]) { return start; } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return binsearch(arr, x, start + (end - start) / 2, mid); } else { return mid; } }",
        "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { /* return binsearch(arr, x, mid, end); */ return binsearch(arr, x, end, mid); } else if (x == arr[mid]) { return 0; } else { return mid; } }"
      ]
    },
    "FLATTEN": {
      "loc": "22-28",
      "input": "<s> public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); */ <mask> } } </s> java",
      "function range": "14,5-29,5",
      "output": [
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { return arr; } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { return flatten(arr); } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); */ } } else { return arr; } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { /* return flatten(arr); */ } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); */ } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); */ } } else { return flatten(arr); } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { return flatten(arr); } } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { return arr; } } }",
        "public static Object flatten(Object arr) { if(arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { /* result.add(flatten(x)); } } return result; }else { return flatten(arr); } } else { return flatten(arr.toString()); } }"
      ]
    },
    "GCD": {
      "loc": "19-20",
      "input": "<s> public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ <mask> } } </s> java",
      "function range": "15,5-21,5",
      "output": [
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return a / b; } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(a / b, b / a); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return a / gcd(b, b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(b, a % b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(b % a, a % b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(a / b, b / b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return b / gcd(a % b, b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(a // b, b // a); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(b, a / b); } }",
        "public static int gcd(int a, int b) { if (b == 0) { return a; } else { /* return gcd(a % b, b); */ return gcd(a / b, b % b); } }"
      ]
    },
    "GET_FACTORS": {
      "loc": "20-21",
      "input": "<s> public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ <mask> } </s> java",
      "function range": "6,5-21,5",
      "output": [
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return null; }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(0); }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(max); }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(1); }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(); } }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ return new ArrayList<Integer>(); } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ /* return new ArrayList<Integer>(); */ return null; }",
        "public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int)(Math.sqrt(n) + 1.0); for (int i=2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } /* return new ArrayList<Integer>(); */ /* return new ArrayList<Integer>(); */ }"
      ]
    },
    "HANOI": {
      "loc": "29-30",
      "input": "<s> public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ <mask> steps.addAll(hanoi(height-1, helper, end)); } return steps; } </s> java",
      "function range": "17,5-34,5",
      "output": [
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ } if (height > 0) { int helper = crap_set.poll(); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); } if (height > 0) { int helper = crap_set.poll(); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); helper = crap_set.poll(); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); /* steps.add(new Pair<Integer,Integer>(helper, end)); */ steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); } else { int helper = start; steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); steps.add(new Pair<Integer,Integer>(helper, end)); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); steps.add(new Pair<Integer,Integer>(helper, end)); steps.add(new Pair<Integer,Integer>(helper, end)); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); steps.add(new Pair<Integer,Integer>(helper, end)); steps.add(new Pair<Integer,Integer>(end, helper)); steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); /* steps.add(new Pair<Integer,Integer>(helper, end)); */ steps.add(new Pair<Integer,Integer>(helper, end)); */ steps.addAll(hanoi(height-1, helper, end)); } return steps; }",
        "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); /* steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.add(new Pair<Integer,Integer>(helper, end)); /* steps.add(new Pair<Integer,Integer>(helper, end)); */ steps.add(new Pair<Integer,Integer>(start, helper)); */ steps.addAll(hanoi(height-1, helper, end)); } return steps; }"
      ]
    },
    "IS_VALID_PARENTHESIZATION": {
      "loc": "17-18",
      "input": "<s> public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ <mask> } </s> java",
      "function range": "6,5-18,5",
      "output": [
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return true; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return depth == 0; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return false; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ /* return false; */ return true; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return (depth == 0); }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return depth > 0; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ return true; /* return false; */ }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ /* return false; */ return false; }",
        "public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } /* return true; */ /* return false; */ return depth == 0; }"
      ]
    },
    "KHEAPSORT": {
      "loc": "28-29",
      "input": "<s> public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ <mask> heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; } </s> java",
      "function range": "21,5-40,5",
      "output": [
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap.poll()) { output.add(v); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer y : heap) { output.add(y); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap) { output.add(v); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer y : heap.poll()) { output.add(y); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap.poll()) { output.add(v); } output.add(x); heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer y : heap.poll()) { output.add(y); } output.add(x); heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap.poll()) { output.add(v); } output.add(heap.poll()); heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap.poll()) { output.add(v); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output ; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer v : heap.poll()) { output.add(v); } output.add(x); heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll(); } return output; }",
        "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0,k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); /* for (Integer x : arr) { */ for (Integer y : heap.poll()) { output.add(y); } heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output ; }"
      ]
    },
    "KNAPSACK": {
      "loc": "30-31",
      "input": "<s> public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ <mask> memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; } </s> java",
      "function range": "14,5-40,5",
      "output": [
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i-1][j], value + memo[i-1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i-1][j], value - memo[i-1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i-1][j - weight], value + memo[i-1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i - 1][j], value + memo[i - 1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i-1][j], value + memo [i-1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ memo[i][j] = Math.min(memo[i - 1][j], value - memo[i - 1][j - weight]); } else if (weight > j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ if (weight == j) { memo[i][j] = Math.min(memo[i-1][j], value + memo[i-1][j - weight]); } else { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ if (weight == j) { memo[i][j] = Math.min(memo[i-1][j], value - memo[i-1][j - weight]); } else { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ if (weight == j) { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; }",
        "public static int knapsack(int capacity, int [][] items) { int weight = 0, value = 0; int n = items.length; int memo[][] = new int[n + 1][capacity + 1]; for (int i = 0; i <= n ; i++) { if (i - 1 >= 0) { weight = items[i - 1][0]; value = items[i - 1][1]; } for (int j = 0; j <= capacity; j++) { if (i == 0 || j == 0) { memo[i][j] = 0; } /* else if (weight < j) { */ if (weight == j) { memo[i][j] = Math.min(memo[i-1][j], value + memo[i-1][j - weight]); } else { memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]); } else { memo[i][j] = memo [i-1][j]; } } } return memo[n][capacity]; } }"
      ]
    },
    "KTH": {
      "loc": "26-27",
      "input": "<s> public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ <mask> } else { return pivot; } } </s> java",
      "function range": "8,5-30,5",
      "output": [
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ return arr.get(0); } else if (k == num_lessoreq) { return arr.get(0); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { /* return kth(below, k); */ } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { return below.get(0); } else if (k == num_less) { return above.get(0); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { return arr.get(0); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ return pivot; } else if (k == num_lessoreq) { /* return kth(below, k); */ return pivot; } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ return pivot; } else if (k == num_lessoreq) { return below.get(0); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k > num_lessoreq) { /* return kth(below, k); */ } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { return below.get(0); } else if (k == num_lessoreq) { return above.get(0); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { return arr.get(0); } else if (k == num_less) { return arr.get(1); } else { return pivot; } }",
        "public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { /* return kth(above, k); */ } else if (k == num_lessoreq) { return arr.get(0); } else if (k == num_less) { return arr.get(0); } else { return pivot; } }"
      ]
    },
    "LCS_LENGTH": {
      "loc": "35-37",
      "input": "<s> public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ <mask> int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } } </s> java",
      "function range": "13,5-58,5",
      "output": [
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.get(i-1).containsKey(j)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.get(i-1).containsKey(j)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.containsKey(i)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.get(i-1).containsKey(j)) { Map<Integer, Integer> internal_map = dp.get(i-1); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else if (dp.get(i-1).containsKey(j)) { Map<Integer, Integer> internal_map = dp.get(i-1); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else { if (dp.containsKey(i)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else { if (dp.containsKey(i)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } } return 0; }",
        "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { /* if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); */ internal_map.put(j, dp.get(i-1).get(j)); dp.get(i-1).put(j, internal_map); } else { if (dp.containsKey(i)) { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j, dp.get(i-1).get(j)); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty()? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } } }"
      ]
    },
    "LEVENSHTEIN": {
      "loc": "17-18",
      "input": "<s> public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty() ? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ <mask> } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } } </s> java",
      "function range": "13,5-25,5",
      "output": [
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return source.length() - target.length(); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return 1 + Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1)) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1)) ), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return 1 + Math.min(Math.min( levenshtein(source, target), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ } else if (source.charAt(1) == target.charAt(1)) { return 1 + levenshtein(source.substring(1), target); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return 1 + Math.min( levenshtein(source.substring(1), target.substring(1)), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return 1 + Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1)) ), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1)) ), levenshtein(source.substring(1), target) ); } }",
        "public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty()? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { /* return 1 + levenshtein(source.substring(1), target.substring(1)); */ return Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target) ); } else { return 1 + Math.min(Math.min( levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1)) ), levenshtein(source.substring(1), target) ); } }"
      ]
    },
    "LIS": {
      "loc": "31-32",
      "input": "<s> public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ <mask> } i++; } return longest; } </s> java",
      "function range": "13,5-37,5",
      "output": [
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length, i); /* longest = length + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length, i); /* longest = length - 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { /* longest = longest + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length, i+1); /* longest = length + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length, i + 1); /* longest = length + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length, i); /* longest = i + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else { ends.put(length+1, i); /* longest = length + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else if (val > arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else if (val > arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length - 1; */ } i++; } return longest; }",
        "public static int lis(int[] arr) { Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j=1; j < longest+1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length =!prefix_lengths.isEmpty()? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } else if (val == arr[ends.get(length+1)]) { ends.put(length+1, i); /* longest = length + 1; */ } i++; } return longest; }"
      ]
    },
    "LONGEST_COMMON_SUBSEQUENCE": {
      "loc": "18-19",
      "input": "<s> public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ <mask> } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length() ? fst : snd; } } </s> java",
      "function range": "14,5-25,5",
      "output": [
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a.substring(2), b); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(b.substring(1), a); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a.substring(1), b); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a, b.substring(1)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a.substring(2), b.substring(2)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a.substring(2), b.substring(2)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd ; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd ; } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.substring(1) + longest_common_subsequence(a.substring(2), b); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } } }",
        "public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return \"\"; } else if (a.charAt(0) == b.charAt(0)) { /* return a.charAt(0) + longest_common_subsequence(a.substring(1), b); */ return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1)); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length()? fst : snd; } } }"
      ]
    },
    "MAX_SUBLIST_SUM": {
      "loc": "19-20",
      "input": "<s> public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ <mask> max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; } </s> java",
      "function range": "14,5-24,5",
      "output": [
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ max_ending_here = Math.max(max_ending_here, x); max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ if (x > max_ending_here) max_ending_here = x; max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ if (max_ending_here > max_so_far) max_ending_here = max_so_far; max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ max_ending_here = Math.min(max_ending_here, x); max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ if (max_ending_here > max_so_far) { max_ending_here = max_so_far; } max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ if (x > max_ending_here) { max_ending_here = x; } max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ } for (int x : arr) { max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ max_ending_here = max_ending_here + x; max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ max_ending_here = Math.max(max_ending_here, Math.min(x, max_ending_here)); max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }",
        "public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { /* max_ending_here = max_ending_here + x; */ if (max_ending_here > max_so_far) max_ending_here = max_so_far; max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far ; }"
      ]
    },
    "MERGESORT": {
      "loc": "38-39",
      "input": "<s> public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ <mask> return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } } </s> java",
      "function range": "37,5-51,5",
      "output": [
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return arr; } else if (arr.size() % 2 == 0) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return arr; } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(100); } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(arr); } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(); } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(100); } else if (arr.size() % 2 == 0) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(arr.size()); } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ arr = new ArrayList<Integer>(100); return arr; } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ return new ArrayList<Integer>(arr.size()); } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge (left, right); } }",
        "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { /* if (arr.size() == 0) { */ arr = new ArrayList<Integer>(100); return arr; } else if (arr.size() == 1) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0,middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge (left, right); } }"
      ]
    },
    "MINIMUM_SPANNING_TREE": {
      "loc": "29-30",
      "input": "<s> public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ <mask> } } } return minSpanningTree; } </s> java",
      "function range": "8,5-34,5",
      "output": [
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } } else { if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } for (Node node : groupByNode.get(vertex_u)) { if (!groupByNode.containsKey(node)) { groupByNode.put(node, new HashSet<>(Arrays.asList(node))); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ if (!groupByNode.containsKey(node)) { groupByNode.put(node, new HashSet<>(Arrays.asList(node))); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } } else { for (Node node : groupByNode.get(vertex_u)) { if (!groupByNode.containsKey(node)) { groupByNode.put(node, new HashSet<>(Arrays.asList(node))); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } } else { if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ if (groupByNode.get(node)!= null) { minSpanningTree.add(edge); groupByNode = update(groupByNode, node, vertex_v); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } } else { for (Node node : groupByNode.get(vertex_u)) { if (!groupByNode.containsKey(node)) { groupByNode.put(node, new HashSet<>(Arrays.asList(vertex_u))); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } } else { for (Node node : groupByNode.get(vertex_u)) { if (node!= vertex_v) { minSpanningTree.add(edge); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ if (groupByNode.get(node)!= null) { minSpanningTree.add(edge); groupByNode = update(groupByNode, node, vertex_u); } } } } return minSpanningTree; }",
        "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node,Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)){ groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)){ groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u)!= groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { /* groupByNode = update(groupByNode, node, vertex_u); */ } for (Node node : groupByNode.get(vertex_u)) { if (!groupByNode.containsKey(node)) { groupByNode.put(node, new HashSet<>(Arrays.asList(vertex_u))); } } } } return minSpanningTree; }"
      ]
    },
    "NEXT_PALINDROME": {
      "loc": "37-38",
      "input": "<s> public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid != high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ <mask> otherwise.add(1); return String.valueOf(otherwise); } </s> java",
      "function range": "16,5-41,5",
      "output": [
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ return Arrays.toString(digit_list); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ otherwise.addAll(Arrays.asList(digit_list)); return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ for (int i = 0; i < digit_list.length; i++) { otherwise.add(digit_list[i]); } otherwise.add(1); return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ for (int i = 0; i < digit_list.length - 1; i++) { otherwise.add(digit_list[i]); } otherwise.add(1); return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ otherwise.addAll(Arrays.asList(digit_list)); return Arrays.toString(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ for (int i = 0; i < digit_list.length; i++) { if (digit_list[i] == 9) { otherwise.add(0); } } otherwise.add(1); return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ otherwise.addAll(Arrays.copyOfRange(digit_list, 0, digit_list.length)); return String.valueOf(otherwise); }",
        "public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid!= high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); /* otherwise.addAll(Collections.nCopies(digit_list.length, 0)); */ for (int i = 0; i < digit_list.length; i++) { if (digit_list[i] == 9) { otherwise.add(1); return String.valueOf(otherwise); }"
      ]
    },
    "NEXT_PERMUTATION": {
      "loc": "19-20",
      "input": "<s> public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ <mask> ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } </s> java",
      "function range": "15,5-44,5",
      "output": [
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) > perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) == perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) < perm.get(i+1)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(i) < perm.get(j)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) > perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) == perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) < perm.get(i+1)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(i) < perm.get(j)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) > perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); } }",
        "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i=perm.size()-2; i!=-1; i--) { if (perm.get(i) < perm.get(i+1)) { for (int j=perm.size()-1; j!=i; j--) { /* if (perm.get(j) < perm.get(i)) { */ if (perm.get(j) < perm.get(i+1)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i,temp_j); next_perm.set(j,temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k=next_perm.size()-1; k!=i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); } return new ArrayList<Integer>(); } }"
      ]
    },
    "PASCAL": {
      "loc": "22-23",
      "input": "<s> public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ <mask> int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; } </s> java",
      "function range": "14,5-40,5",
      "output": [
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ for (int b=0; b<r; b++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ row.add(rows.get(r-1).get(c)); } for (int c=0; c<r; c++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ for (int b=0; b<r; b++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ row.add(rows.get(r-1).get(c)); row.add(rows.get(r-1).get(c+1)); row.add(rows.get(r-1).get(c-2)); row.add(rows.get(r-1).get(c-3)); row.add(rows.get(r-1).get(c-4)); row.add(rows.get(r-1).get(c-5)); row.add(rows.get(r-1).get(c-6)); int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ row.add(rows.get(r-1).get(c)); row.add(rows.get(r-1).get(c+1)); row.add(rows.get(r-1).get(c+2)); row.add(rows.get(r-1).get(c-3)); row.add(rows.get(r-1).get(c-4)); row.add(rows.get(r-1).get(c-5)); row.add(rows.get(r-1).get(c-6)); int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ row.add(rows.get(r-1).get(c-1)); row.add(rows.get(r-1).get(c)); row.add(rows.get(r-1).get(c+1)); row.add(rows.get(r-1).get(c+2)); row.add(rows.get(r-1).get(c-3)); row.add(rows.get(r-1).get(c-4)); row.add(rows.get(r-1).get(c-5)); int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ for (int b=0; b<r; b++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ for (int b=0; b<r; b++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } row.add(upleft); row.add(upleft+upright); } rows.add(row); } return rows; }",
        "public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r=1; r<n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); /* for (int c=0; c<r; c++) { */ for (int b=0; b<r; b++) { int upleft, upright; if (c > 0) { upleft = rows.get(r-1).get(c-1); } else { upleft = 0; } if (c < r) { upright = rows.get(r-1).get(c); } else { upright = 0; } row.add(upleft+upright); } row.add(upleft); } rows.add(row); } return rows; }"
      ]
    },
    "POSSIBLE_CHANGE": {
      "loc": "17-18",
      "input": "<s> public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ <mask> return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); } </s> java",
      "function range": "13,5-24,5",
      "output": [
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins.length == 0) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins.length == 0 ) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins. length == 0 ) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins. length == 0) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins.length == 0 ) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (total == coins.length) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins.length == 0) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins.length == 0 ) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); }",
        "public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } /* if (total < 0) { */ if (coins == null || coins.length == 0) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total-first) + possible_change(rest, total); } return 1; }"
      ]
    },
    "QUICKSORT": {
      "loc": "26-27",
      "input": "<s> public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ <mask> greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; } </s> java",
      "function range": "14,5-38,5",
      "output": [
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { greater.add(x); } else { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { } else { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x > pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ lesser.add(x); } else if (x == pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x < pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser ; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { greater.add(x); } else { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser ; }",
        "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); /* } else if (x > pivot) { */ } else if (x == pivot) { } else { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser ; }"
      ]
    },
    "REVERSE_LINKED_LIST": {
      "loc": "20-20",
      "input": "<s> public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node != null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ <mask> } return prevnode; } </s> java",
      "function range": "14,5-23,5",
      "output": [
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = node; node = nextnode; } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = node; } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = nextnode; } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = node; node = node.getSuccessor(); } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = nextnode; node = node.getSuccessor(); } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = node; node = node.getPredecessor(); } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = nextnode; node = nextnode; } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = node; node = node.getNext(); } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ node = node.getSuccessor(); prevnode = node; } return prevnode; }",
        "public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node!= null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); /* node = nextnode; */ prevnode = nextnode; node = node.getPredecessor(); } return prevnode; }"
      ]
    },
    "RPN_EVAL": {
      "loc": "34-35",
      "input": "<s> public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ <mask> stack.push(c); } } return (Double) stack.pop(); } </s> java",
      "function range": "15,5-40,5",
      "output": [
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(a,b); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(a, b); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(c, a); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(c,a); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(a,b); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(c,b); } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ if (bin_op!= null) { c = bin_op.apply(a,b); } else { c = a; } stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ stack.push(c); } } for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ stack.push(c); } } for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { Double c = (Double) token; stack.push(c); } } return (Double) stack.pop(); }",
        "public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put(\"+\", (a, b) -> a + b); op.put(\"-\", (a, b) -> a - b); op.put(\"*\", (a, b) -> a * b); op.put(\"/\", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); /* c= bin_op.apply(a,b); */ stack.push(c); } } for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { String token = (String) token; stack.push(c); } } return (Double) stack.pop(); }"
      ]
    },
    "SHORTEST_PATH_LENGTH": {
      "loc": "39-40",
      "input": "<s> public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ <mask> } } return Integer.MAX_VALUE; } </s> java",
      "function range": "11,5-44,5",
      "output": [
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ } if (unvisitedNodes.get(node) == null) { unvisitedNodes.put(node, Integer.MAX_VALUE); } else { unvisitedNodes.put(node, unvisitedNodes.get(node)); } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)) > n) { unvisitedNodes.put(nextnode, unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)) > n) { unvisitedNodes.put(nextnode, unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ } if (unvisitedNodes.get(node) == null) { unvisitedNodes.put(node, Integer.MAX_VALUE); } else { unvisitedNodes.put(node, Math.min(unvisitedNodes.get(node), length_by_edge.get(Arrays.asList(node, nextnode)))); } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ } if (unvisitedNodes.get(node) == null) { unvisitedNodes.put(node, Integer.MAX_VALUE); } else { unvisitedNodes.put(node, Math.min(unvisitedNodes.get(node), length_by_edge.get(Arrays.asList(node, nextnode))); } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)) >= n) { unvisitedNodes.put(nextnode, unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)) >= n) { unvisitedNodes.put(nextnode, unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ if (unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)) > n) { unvisitedNodes.put(nextnode, unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))); } } } return Integer.MAX_VALUE; }",
        "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) { int n = length_by_edge.size(); Map<Node, Integer> unvisitedNodes = new HashMap<>(); Set<Node> visitedNodes = new HashSet<>(); unvisitedNodes.put(startnode, 0); while (!unvisitedNodes.isEmpty()) { Node node = getNodeWithMinDistance(unvisitedNodes); int distance = unvisitedNodes.get(node); unvisitedNodes.remove(node); if (node.getValue() == goalnode.getValue()) { return distance; } visitedNodes.add(node); for (Node nextnode : node.getSuccessors()) { if (visitedNodes.contains(nextnode)) { continue; } if (unvisitedNodes.get(nextnode) == null) { unvisitedNodes.put(nextnode, Integer.MAX_VALUE); } unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode), /* unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode)))); */ } if (unvisitedNodes.get(node) == null) { unvisitedNodes.put(node, Integer.MAX_VALUE); } else { unvisitedNodes.put(node, unvisitedNodes.get(node) + length_by_edge.get(Arrays.asList(node, nextnode))); } } return Integer.MAX_VALUE; }"
      ]
    },
    "SHORTEST_PATH_LENGTHS": {
      "loc": "38-39",
      "input": "<s> public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ <mask> length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; } </s> java",
      "function range": "19,5-44,5",
      "output": [
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k)); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k)); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k)); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k)); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,k), update_length); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }",
        "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) { Map<List<Integer>,Integer> length_by_path = new HashMap<>(); for (int i = 0; i < numNodes; i++) { for (int j =0; j < numNodes; j++) { List<Integer> edge = new ArrayList<>(Arrays.asList(i,j)); if (i == j) { length_by_path.put(edge, 0); } else if (length_by_edge.containsKey(edge) ) { length_by_path.put(edge, length_by_edge.get(edge)); } else { length_by_path.put(edge, INF); } } } for (int k = 0; k < numNodes; k++) { for (int i = 0; i < numNodes; i++) { for (int j = 0; j < numNodes; j++) { int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)), /* length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k))); */ length_by_path.put(Arrays.asList(i,j), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k))); length_by_path.put(Arrays.asList(i,k), length_by_path.get(Arrays.asList(j,k))); length_by_path.put(Arrays.asList(j,k), length_by_path.get(Arrays.asList(i,k)); length_by_path.put(Arrays.asList(i,j), update_length); } } } return length_by_path; }"
      ]
    },
    "SHORTEST_PATHS": {
      "loc": "30-31",
      "input": "<s> public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ <mask> } } return weight_by_node; } </s> java",
      "function range": "16,5-34,5",
      "output": [
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) > weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) > weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); weight_by_node.put(edge, update_weight); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) < weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) < weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); weight_by_node.put(edge, update_weight); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ weight_by_node.put(edge.get(0), update_weight); weight_by_node.put(edge.get(1), update_weight); } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) > weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); weight_by_node.put(edge, weight_by_node.get(edge)); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ } for (List<String> edge : weight_by_edge.keySet()) { weight_by_edge.put(edge, weight_by_edge.get(edge)); } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) > weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); weight_by_node.put(edge, weight_by_edge.get(edge)); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ if (weight_by_edge.get(edge) < weight_by_node.get(edge)) { weight_by_edge.put(edge, weight_by_node.get(edge)); weight_by_node.put(edge, weight_by_node.get(edge)); } } } return weight_by_node; }",
        "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) { Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min( weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); /* weight_by_edge.put(edge, update_weight); */ weight_by_node.put(edge.get(0), weight_by_node.get(edge.get(1))); weight_by_node.put(edge.get(1), update_weight); } } return weight_by_node; }"
      ]
    },
    "SHUNTING_YARD": {
      "loc": "34-34",
      "input": "<s> public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ <mask> } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; } </s> java",
      "function range": "15,5-42,5",
      "output": [
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add((Integer) opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } /* } */ while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }",
        "public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put(\"+\",1); precedence.put(\"-\",1); precedence.put(\"*\",2); precedence.put(\"/\",2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token: tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } /* } */ opstack.push(operator); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }"
      ]
    },
    "SIEVE": {
      "loc": "41-42",
      "input": "<s> public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ <mask> primes.add(n); } } return primes; } </s> java",
      "function range": "38,5-46,5",
      "output": [
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (n % 2 == 0) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ } else { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (n % 2 == 0 ) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (n % 2 == 0) primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (list_comp(n, primes) == null) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (any(list_comp(n, primes)) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (any(list_comp(n, primes))) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (isPrime(n)) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (list_comp(n, primes)) { primes.add(n); } } return primes; }",
        "public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n=2; n<max+1; n++) { /* if (any(list_comp(n, primes))) { */ if (any(list_comp(n, primes)) { primes.add(n); } } return primes; } return primes; }"
      ]
    },
    "SQRT": {
      "loc": "16-17",
      "input": "<s> public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ <mask> approx = 0.5f * (approx + x / approx); } return approx; } </s> java",
      "function range": "14,5-20,5",
      "output": [
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ approx = 0.5f * (approx - x / approx); approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ approx = 0.5f * (approx - x / approx); } while (Math.abs(x-approx) > epsilon) { approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ approx = 0.5f * (approx - x / approx); } while (Math.abs(x-approx) < epsilon) { approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx < 0.5f) { approx = 0.5f; } else { approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx > 0.5f * (approx + x / approx)) { approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx < 0.5f) { approx = 0.5f * (approx + x / approx); } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx < 0.5f) { approx = 0.5f * (approx + x / approx); } return approx; } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx > 0.5f * (approx + x / approx)) { approx = 0.5f * (approx + x / approx); } return approx; } return approx; }",
        "public static double sqrt(double x, double epsilon) { double approx = x / 2f; /* while (Math.abs(x-approx) > epsilon) { */ if (approx < 0.5f) { approx = 0.5f; } else { approx = 0.5f * (approx + x / approx); } return approx; } return approx; }"
      ]
    },
    "SUBSEQUENCES": {
      "loc": "16-17",
      "input": "<s> public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ <mask> } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; } </s> java",
      "function range": "14,5-31,5",
      "output": [
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ return new ArrayList<ArrayList>(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } if (a == b) { return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } else if (k == 1) { return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } else if (k == 1) { /* return new ArrayList(); */ } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } else if (k == 1) { return new ArrayList<ArrayList>(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ return new ArrayList<ArrayList>(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret ; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ return new ArrayList<ArrayList>(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; } return ret; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } if (a == b) { return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret ; }",
        "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { /* return new ArrayList(); */ } else if (k == 1) { /* return new ArrayList(); */ } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret ; }"
      ]
    },
    "TO_BASE": {
      "loc": "21-22",
      "input": "<s> public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ <mask> } return result; } </s> java",
      "function range": "14,5-25,5",
      "output": [
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + alphabet.charAt(i); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + String.valueOf(alphabet.charAt(i + 1)); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + alphabet.charAt(i + 1); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + alphabet.substring(0, i); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + String.valueOf(alphabet.charAt(i)); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + alphabet.substring(i); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ if (i!= 0) { result = result + alphabet.charAt(i); } } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + alphabet.substring(i * b, i * b + b); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ result = result + String.valueOf(alphabet.charAt(i+1)); } return result; }",
        "public static String to_base(int num, int b) { String result = \"\"; String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; int i; while (num > 0) { i = num % b; num = num / b; /* result = result + String.valueOf(alphabet.charAt(i)); */ if (i!= 0) { result = result + alphabet.charAt(i + 1); } } return result; }"
      ]
    },
    "TOPOLOGICAL_ORDERING": {
      "loc": "17-18",
      "input": "<s> public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) { */ <mask> orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; } </s> java",
      "function range": "5,5-24,5",
      "output": [
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode)) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (nextNode.getPredecessors().isEmpty()) { orderedNodes.add(nextNode); listSize++; } } else if (nextNode.getPredecessors().isEmpty()) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (nextNode.getPredecessors().isEmpty()) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode.getPredecessors())) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (nextNode.getPredecessors().isEmpty()) { orderedNodes.add(nextNode); listSize++; } else { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode.getPredecessors())) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode)) { orderedNodes.add(nextNode); listSize++; } else { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode)) { orderedNodes.remove(nextNode); } else { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }",
        "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { /* if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) { */ if (orderedNodes.containsAll(nextNode.getPredecessors()) &&!orderedNodes.contains(nextNode.getPredecessors())) { orderedNodes.add(nextNode); listSize++; } } } } return orderedNodes; }"
      ]
    },
    "WRAP": {
      "loc": "32-32",
      "input": "<s> public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ <mask> } </s> java",
      "function range": "18,5-33,5",
      "output": [
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return lines; }",
        "public static ArrayList<String> wrap (String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return lines; }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return lines ; }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return new ArrayList<String>(lines); }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return lines; } }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ /* return new ArrayList<String>(lines); */ return lines; }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ System.out.println(lines); return lines; }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ return lines; /* return new ArrayList<String>(lines); */ }",
        "public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(\" \", cols); if (end == -1) { end = cols; } line = text.substring(0,end); text = text.substring(end); lines.add(line); } /* return lines; */ if (lines.isEmpty()) { return new ArrayList<String>(); } return lines; }"
      ]
    },
    "POWERSET": {
      "loc": "23-30",
      "input": "<s> public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ <mask> } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } } </s> java",
      "function range": "14,5-35,5",
      "output": [
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ return output; } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else { return new ArrayList<ArrayList>(); } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else { return new ArrayList<ArrayList>(100); } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else if (arr.isEmpty()) { return new ArrayList<ArrayList>(100); } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else if (arr.isEmpty()) { return new ArrayList<ArrayList>(); } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ return output; } else { return new ArrayList<ArrayList>(100); } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else if (arr.size() == 0) { return new ArrayList<ArrayList>(); } else { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ return output; } else { return new ArrayList<ArrayList>(); } }",
        "public static ArrayList<ArrayList> powerset(ArrayList arr) { if (!arr.isEmpty()) { Object first = arr.get(0); arr.remove(0); ArrayList rest = arr; ArrayList<ArrayList> rest_subsets = powerset(rest); ArrayList<ArrayList> output = new ArrayList<ArrayList>(100); ArrayList to_add = new ArrayList(100); /* to_add.add(first); for (ArrayList subset : rest_subsets) { to_add.addAll(subset); } output.add(to_add); return output; */ } else { ArrayList empty_set = new ArrayList<ArrayList>(); return empty_set; } }"
      ]
    }
  },
  "model": "plbart-large"
}