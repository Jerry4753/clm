{
  "config": "CODET5_BASE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "BITCOUNT": {
      "loc": "15-16",
      "input": "public static int bitcount(int n) {\n    int count = 0;\n    while (n != 0) {\n// buggy line:        n = (n ^ (n - 1));\n        <extra_id_0>\n        count++;\n    }\n    return count;\n}",
      "function range": "12,5-19,5",
      "output": [
        "//",
        "// buggy line:",
        "//buggy line:",
        "break;",
        "}",
        "\n// buggy line:",
        "e.print(n);",
        "e.println(n);",
        "--;",
        "// buggy line:       "
      ]
    },
    "BREADTH_FIRST_SEARCH": {
      "loc": "26-27",
      "input": "public static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n    nodesvisited.add(startnode);\n// buggy line:    while (true) {\n    <extra_id_0>\n        Node node = queue.removeFirst();\n        if (node == goalnode) {\n            return true;\n        } else {\n            for (Node successor_node : node.getSuccessors()) {\n                if (!nodesvisited.contains(successor_node)) {\n                    queue.addFirst(successor_node);\n                    nodesvisited.add(successor_node);\n                }\n            }\n        }\n    }\n    return false;\n}",
      "function range": "20,5-45,5",
      "output": [
        "//if (!nodesvisited.contains(goalnode)) {",
        "//if (!nodesvisited.contains(startnode)) {",
        "//if (!nodesvisited.contains(goalnode)) {",
        "//if (!queue.contains(goalnode)) {",
        "//if (!nodesvisited.contains(node)) {",
        "//if (!queue.contains(startnode)) {",
        "//if (!nodesvisited.contains(goalnode))",
        "//if (!queue.contains(goalnode)) {",
        "//if (!queue.contains(startnode)) {",
        "//if (!nodesvisited.contains(startnode))"
      ]
    },
    "BUCKETSORT": {
      "loc": "24-25",
      "input": "public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n    ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n    for (Integer x : arr) {\n        counts.set(x,counts.get(x)+1);\n    }\n    ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\nint i = 0;\n// buggy line:    for (Integer count : arr) {\n    <extra_id_0>\n sorted_arr.addAll(Collections.nCopies(count, i));\n i++;\n    }\n    return sorted_arr;\n}",
      "function range": "16,5-30,5",
      "output": [
        "\n        counts.set(count,counts.get(count));",
        "\n        counts.set(count,counts.get(count)+1);",
        "\n        counts.set(i,counts.get(count));",
        "\n        counts.set(count,count);",
        "\n        counts.set(i,counts.get(count)+1);",
        "//\n        counts.set(count,counts.get(count));",
        "\n        counts.set(i,counts.get(i)+1);",
        "\n        counts.set(i,counts.get(i));",
        "\n        counts.set(count,counts.get(i));",
        "\n        counts.set(count);"
      ]
    },
    "DEPTH_FIRST_SEARCH": {
      "loc": "23-23",
      "input": "boolean search(Node node) {\n    if (nodesvisited.contains(node)) {\n        return false;\n    } else if (node == goalnode) {\n        return true;\n    } else {\n// buggy line:        for (Node successornodes : node.getSuccessors()) {\n        <extra_id_0>\n         if (search(successornodes)) { return true; }\n        }\n    }\n    return false;\n}",
      "function range": "17,13-28,13",
      "output": [
        "//",
        "if (successornodes.contains(node)) {",
        "if (nodesvisited.contains(successornodes)) {",
        "if (search(successornodes)) {",
        "if (nodesvisited.contains(successornodes))",
        "if (successornodes.contains(node))",
        "if(successornodes.contains(node)) {",
        "if (search(successornodes))",
        "if (successornodes.contains(successornodes)) {",
        "if (nodesvisited.contains(successornodes)){"
      ]
    },
    "DETECT_CYCLE": {
      "loc": "18-19",
      "input": "public static boolean detect_cycle(Node node) {\n    Node hare = node;\n    Node tortoise = node;\n    while (true) {\n// buggy line:        if (hare.getSuccessor() == null)\n        <extra_id_0>\n            return false;\n        tortoise = tortoise.getSuccessor();\n        hare = hare.getSuccessor().getSuccessor();\n        if (hare == tortoise)\n            return true;\n    }\n}",
      "function range": "13,5-27,5",
      "output": [
        "//",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().",
        "//tortoise.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccess",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor()",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor()",
        "//tortoise.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor()",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor();",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor()",
        "//tortoise.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor()",
        "//hare.getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor().getSuccessor())"
      ]
    },
    "FIND_FIRST_IN_SORTED": {
      "loc": "19-20",
      "input": "public static int find_first_in_sorted(int[] arr, int x) {\n    int lo = 0;\n    int hi = arr.length;\n// buggy line:    while (lo <= hi) {\n    <extra_id_0>\n        int mid = (lo + hi) / 2;\n        if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n            return mid;\n        } else if (x <= arr[mid]) {\n            hi = mid;\n        } else {\n            lo = mid + 1;\n        }\n    }\n    return -1;\n}",
      "function range": "15,5-32,5",
      "output": [
        "//",
        "//}",
        "++lo;++hi;",
        "//++lo;\n   ",
        "//++lo;",
        "//0;\n   ",
        "//0;",
        "//++lo;\npaypal",
        "//++lo;\nWarehouse",
        "//++lo;\n"
      ]
    },
    "FIND_IN_SORTED": {
      "loc": "20-21",
      "input": "public static int binsearch(int[] arr, int x, int start, int end) {\n    if (start == end) {\n        return -1;\n    }\n    int mid = start + (end - start) / 2; \n    if (x < arr[mid]) {\n        return binsearch(arr, x, start, mid);\n    } else if (x > arr[mid]) {\n// buggy line:        return binsearch(arr, x, mid, end);\n        <extra_id_0>\n    } else {\n        return mid;\n    }\n}",
      "function range": "12,5-24,5",
      "output": [
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;",
        "\n// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "\n// buggy line:Buggyline:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine!",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;BuggyLine:BuggyLine:",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine!BuggyLine:",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine!BuggyLine:BuggyLine:",
        "\n// buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;BuggyLine:BuggyLine:BuggyLine:"
      ]
    },
    "FLATTEN": {
      "loc": "22-28",
      "input": "public static Object flatten(Object arr) {\nif(arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n ArrayList result = new ArrayList(50);\n for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n// buggy line:                result.add(flatten(x));\n// buggy line:}\n// buggy line:        }\n// buggy line:        return result;\n// buggy line:}else {\n// buggy line: return flatten(arr);\n                <extra_id_0>\n}\n}",
      "function range": "14,5-29,5",
      "output": [
        "}",
        "} }",
        "} }}",
        "} }}}",
        "}}}",
        "} }return}",
        "}}",
        "} }} }",
        "} } }",
        "} }}return"
      ]
    },
    "GCD": {
      "loc": "19-20",
      "input": "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n// buggy line:        return gcd(a % b, b);\n        <extra_id_0>\n    }\n}",
      "function range": "15,5-21,5",
      "output": [
        "//",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;",
        "//buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
        "//buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;",
        "//buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine"
      ]
    },
    "GET_FACTORS": {
      "loc": "20-21",
      "input": "public static ArrayList<Integer> get_factors(int n) {\n    if (n == 1) {\n        return new ArrayList<Integer>();\n    }\n    int max = (int)(Math.sqrt(n) + 1.0);\n    for (int i=2; i < max; i++) {\n        if (n % i == 0) {\n            ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n            prepend.add(i);\n            prepend.addAll(get_factors(n / i));\n            return prepend;\n        }\n    }\n// buggy line:   \treturn new ArrayList<Integer>();\n    <extra_id_0>\n}",
      "function range": "6,5-21,5",
      "output": [
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\u8fd4\u56de\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\ufffd",
        "\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e\u8bbe\u7f6e"
      ]
    },
    "HANOI": {
      "loc": "29-30",
      "input": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n    ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n    if (height > 0) {\n        PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n        crap_set.add(1);\n        crap_set.add(2);\n        crap_set.add(3);\n        crap_set.remove(start);\n        crap_set.remove(end);\n        int helper = crap_set.poll();\n        steps.addAll(hanoi(height-1, start, helper));\n// buggy line:        steps.add(new Pair<Integer,Integer>(start, helper));\n        <extra_id_0>\n        steps.addAll(hanoi(height-1, helper, end));\n    }\n    return steps;\n}",
      "function range": "17,5-34,5",
      "output": [
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));}",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end));}",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end));",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end,helper));}",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));end);\n// buggy line:       steps.add(new Pair<Integer,Integer>(start,end));\n// buggy line:        steps.add(new Pair<Integer,Integer>(end,end);",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));end);\n// buggy line:       steps.add(new Pair<Integer,Integer>(start,end));\n// buggy line:        steps.add(new Pair<Integer,Integer>(end,end));\n// buggy line:       ",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));end);\n// buggy line:       steps.add(new Pair<Integer,Integer>(start,end);}",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));;}",
        "\n// buggy line:        steps.add(new Pair<Integer,Integer>(end, helper));end);\n// buggy line:       steps.add(new Pair<Integer,Integer>(start,end));\n// buggy line:        steps.add(new Pair<Integer,Integer>(end,end);\n// buggy line:       "
      ]
    },
    "IS_VALID_PARENTHESIZATION": {
      "loc": "17-18",
      "input": "public static Boolean is_valid_parenthesization(String parens) {\n    int depth = 0;\nfor (int i = 0; i < parens.length(); i++) {\n Character paren = parens.charAt(i);\n if (paren.equals('(')) {\n            depth++;\n } else {\ndepth--;\nif (depth < 0) { return false; }\n }\n}\n// buggy line:return true;\n<extra_id_0>\n}",
      "function range": "6,5-18,5",
      "output": [
        "}",
        "return false;",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\ufffd",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse",
        "\u8fd4\u56de\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56detrue\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse\uff0c\u8fd4\u56defalse"
      ]
    },
    "KHEAPSORT": {
      "loc": "28-29",
      "input": "public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n    for (Integer v : arr.subList(0,k)) {\n        heap.add(v);\n    }\n    ArrayList<Integer> output = new ArrayList<Integer>();\n// buggy line:    for (Integer x : arr) {\n    <extra_id_0>\n        heap.add(x);\n        Integer popped = heap.poll();\n        output.add(popped);\n    }\n    while (!heap.isEmpty()) {\n        output.add(heap.poll());\n    }\n    return output;\n}",
      "function range": "21,5-40,5",
      "output": [
        "//",
        "//heap.add(x);",
        "//heap.push(x);",
        "//heap.poll();",
        "//output.add(x);",
        "//heap.add(x);\n       ",
        "//output.add(heap.poll());",
        "//heap.add(k);",
        "//heap.offer(x);",
        "//heap.pop();"
      ]
    },
    "KNAPSACK": {
      "loc": "30-31",
      "input": "public static int knapsack(int capacity, int [][] items) {\n    int weight = 0, value = 0;\n    int n = items.length;\n    int memo[][] = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n ; i++)\n    {\n        if (i - 1 >= 0) {\n            weight = items[i - 1][0];\n            value = items[i - 1][1];\n        }\n        for (int j = 0; j <= capacity; j++)\n        {\n            if (i == 0 || j == 0) {\n                memo[i][j] = 0;\n            }\n// buggy line:            else if (weight < j) {\n            <extra_id_0>\n                memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n            }\n            else {\n                memo[i][j] = memo [i-1][j];\n            }\n        }\n    }\n    return memo[n][capacity];\n}",
      "function range": "14,5-40,5",
      "output": [
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] =memo[i][j] =memo[i][",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] =memo[",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], valuememo[i][j] =memo[i][j] =memo[i",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] = value;\n",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] = Math.max",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] = value;",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] =}\n",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] = Math.min",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] =;\n",
        "//{\n                memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j],memo[i][j] = Math.max(memo[i][j], value);memo[i][j] =memo[i][j] =;"
      ]
    },
    "KTH": {
      "loc": "26-27",
      "input": "public static Integer kth(ArrayList<Integer> arr, int k) {\n    int pivot = arr.get(0);\n    ArrayList<Integer> below, above;\n    below = new ArrayList<Integer>(arr.size());\n    above = new ArrayList<Integer>(arr.size());\n    for (Integer x : arr) {\n        if (x < pivot) {\n            below.add(x);\n        } else if (x > pivot) {\n            above.add(x);\n        }\n    }\n    int num_less = below.size();\n    int num_lessoreq = arr.size() - above.size();\n    if (k < num_less) {\n        return kth(below, k);\n    } else if (k >= num_lessoreq) {\n// buggy line:        return kth(above, k);\n        <extra_id_0>\n    } else {\n        return pivot;\n    }\n}",
      "function range": "8,5-30,5",
      "output": [
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Augg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:AuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine{\n",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Belong",
        "//{\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;\n   "
      ]
    },
    "LCS_LENGTH": {
      "loc": "35-37",
      "input": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n// buggy line:                if (dp.containsKey(i-1)) {\n// buggy line:                    Map<Integer, Integer> internal_map = dp.get(i);\n                <extra_id_0>\n                    int insert_value = dp.get(i-1).get(j) + 1;\n                    internal_map.put(j, insert_value);\n                    dp.put(i,internal_map);\n                } else {\n                    Map<Integer, Integer> internal_map = dp.get(i);\n                    internal_map.put(j,1);\n                    dp.put(i,internal_map);\n                }\n            }\n        }\n    }\n    if (!dp.isEmpty()) {\n        List<Integer> ret_list = new ArrayList<Integer>();\n        for (int i=0; i<s.length(); i++) {\n            ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);\n        }\n        return Collections.max(ret_list);\n    } else {\n        return 0;\n    }\n}",
      "function range": "13,5-58,5",
      "output": [
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i).containsKey(i).containsKey(i",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,1);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i).containsKey(i).containsKey(i",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i-1).containsKey(i-1).",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncifif (dp.containsKey(i).containsKey(i).containsKey",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i-1).containsKey(i)) {\n",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i-1).containsKey(j)) {\n",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i).containsKey(i).containsKey(j",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,1);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i).containsKey(i).containsKey(j",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i-1).containsKey(i-1))",
        "\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);\ncif internal_map.put(j,0);\ncif internal_map.put(i,internal_map);if (dp.containsKey(i-1).containsKey(i) ) {"
      ]
    },
    "LEVENSHTEIN": {
      "loc": "17-18",
      "input": "public static int levenshtein(String source, String target) {\n    if (source.isEmpty() || target.isEmpty()) {\n        return source.isEmpty() ? target.length() : source.length();\n    } else if (source.charAt(0) == target.charAt(0)) {\n// buggy line:        return 1 + levenshtein(source.substring(1), target.substring(1));\n        <extra_id_0>\n    } else {\n        return 1 + Math.min(Math.min(\n                levenshtein(source,              target.substring(1)),\n                levenshtein(source.substring(1), target.substring(1))),\n                levenshtein(source.substring(1), target)\n    );\n    }\n}",
      "function range": "13,5-25,5",
      "output": [
        "\n// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "Buggy line:Buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "\n// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//\n// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "\n// buggy line:Buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "Buggy line:Buggy line:Buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:Bugg",
        "\n// buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "\n// buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine"
      ]
    },
    "LIS": {
      "loc": "31-32",
      "input": "public static int lis(int[] arr) {\n    Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n    int longest = 0;\n    int i = 0;\n    for (int val : arr) {\n        ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n        for (int j=1; j < longest+1; j++) {\n            if (arr[ends.get(j)] < val) {\n                prefix_lengths.add(j);\n            }\n        }\n        int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n        if (length == longest || val < arr[ends.get(length+1)]) {\n            ends.put(length+1, i);\n// buggy line:            longest = length + 1;\n            <extra_id_0>\n        }\n        i++;\n    }\n    return longest;\n}",
      "function range": "13,5-37,5",
      "output": [
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends",
        "break;ends.put(i,i);ends.get(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);}",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.get(i);ends.put(i);ends.put(i);ends.put(i);ends",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.get(i);ends.put(i);ends",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);\nends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.get(i);ends",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);\nends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);\n",
        "break;ends.put(i,i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);end",
        "break;ends.put(i,i);ends.get(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);ends.put(i);}"
      ]
    },
    "LONGEST_COMMON_SUBSEQUENCE": {
      "loc": "18-19",
      "input": "public static String longest_common_subsequence(String a, String b) {\n    if (a.isEmpty() || b.isEmpty()) {\n        return \"\";\n    } else if (a.charAt(0) == b.charAt(0)) {\n// buggy line:        return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n        <extra_id_0>\n    } else {\n        String fst = longest_common_subsequence(a, b.substring(1));\n        String snd = longest_common_subsequence(a.substring(1), b);\n        return fst.length() >= snd.length() ? fst : snd;\n    }\n}",
      "function range": "14,5-25,5",
      "output": [
        "//",
        "//b.charAt(0) + longest_common_subsequence(a.substring(1));",
        "//b.charAt(0) + longest_common_subsequence(a,b);",
        "//b.charAt(0) == b.charAt(0);",
        "//b.charAt(0) + longest_common_subsequence(b.substring(1));",
        "//b.charAt(0) + longest_common_subsequence(a,b.substring(1));",
        "//b.charAt(0) + longest_common_subsequence(b,a.substring(1));",
        "//b.charAt(0) + longest_common_subsequence(a, b);",
        "//b.charAt(0) == b.charAt(0));",
        "//b.charAt(0) + longest_common_subsequence(a.substring(1), b);"
      ]
    },
    "MAX_SUBLIST_SUM": {
      "loc": "19-20",
      "input": "public static int max_sublist_sum(int[] arr) {\n    int max_ending_here = 0;\n    int max_so_far = 0;\n    for (int x : arr) {\n// buggy line:        max_ending_here = max_ending_here + x;\n        <extra_id_0>\n        max_so_far = Math.max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}",
      "function range": "14,5-24,5",
      "output": [
        "//",
        "// buggy line:",
        "//buggy line:",
        "\n// buggy line:",
        "}",
        "// buggy line:       ",
        "// buggy line:Buggy",
        "//buggy line:       ",
        "\n // buggy line:",
        "\n// buggy line:       "
      ]
    },
    "MERGESORT": {
      "loc": "38-39",
      "input": "public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n// buggy line:    if (arr.size() == 0) {\n    <extra_id_0>\n        return arr;\n    } else {\n        int middle = arr.size() / 2;\n        ArrayList<Integer> left = new ArrayList<Integer>(100);\n        left.addAll(arr.subList(0,middle));\n        left = mergesort(left);\n        ArrayList<Integer> right = new ArrayList<Integer>(100);\n        right.addAll(arr.subList(middle, arr.size()));\n        right = mergesort(right);\n        return merge(left, right);\n    }\n}",
      "function range": "37,5-51,5",
      "output": [
        "//new ArrayList<Integer>(100);",
        "//= mergesort(arr);",
        "////",
        "//merge(arr);",
        "//",
        "//new ArrayList<Integer>();",
        "//return merge(arr);",
        "//= merge(arr);",
        "//new ArrayList<Integer>()",
        "//return"
      ]
    },
    "MINIMUM_SPANNING_TREE": {
      "loc": "29-30",
      "input": "public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n    Map<Node,Set<Node>> groupByNode = new HashMap<>();\n    Set<WeightedEdge> minSpanningTree = new HashSet<>();\n    Collections.sort(weightedEdges);\n    for (WeightedEdge edge : weightedEdges) {\n        Node vertex_u = edge.node1;\n        Node vertex_v = edge.node2;\n        if (!groupByNode.containsKey(vertex_u)){\n            groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n        }\n        if (!groupByNode.containsKey(vertex_v)){\n            groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n        }\n        if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n            minSpanningTree.add(edge);\n            groupByNode = update(groupByNode, vertex_u, vertex_v);\n            for (Node node : groupByNode.get(vertex_v)) {\n// buggy line:                groupByNode = update(groupByNode, node, vertex_u);\n                <extra_id_0>\n            }\n        }\n    }\n    return minSpanningTree;\n}",
      "function range": "8,5-34,5",
      "output": [
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.get",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.get",
        "if (!groupByNode.containsKey(node)) {\n// buggy line:               groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u)!=groupByNode.get(vertex_v)) {\n// b",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));add(edge);\n",
        "if (!groupByNode.containsKey(node)) {\n// buggy line:               groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u)!=groupByNode.get(vertex_v)) {\n//",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));add(edge);",
        "groupByNode = update(groupByNode, node, vertex_v);groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_v)));add(edge);\n",
        "if (!groupByNode.containsKey(node)) {\n// buggy line:               groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));groupByNode.put(vertex_u,groupByNode.get(vertex_v)) {\n// bugg"
      ]
    },
    "NEXT_PALINDROME": {
      "loc": "37-38",
      "input": "public static String next_palindrome(int[] digit_list) {\n    int high_mid = Math.floorDiv(digit_list.length, 2);\n    int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n    while (high_mid < digit_list.length && low_mid >= 0) {\n        if (digit_list[high_mid] == 9) {\n            digit_list[high_mid] = 0;\n            digit_list[low_mid] = 0;\n            high_mid += 1;\n            low_mid -= 1;\n        } else {\n            digit_list[high_mid] += 1;\n            if (low_mid != high_mid) {\n                digit_list[low_mid] += 1;\n            }\n            return Arrays.toString(digit_list);\n        }\n    }\n    ArrayList<Integer> otherwise = new ArrayList<Integer>();\notherwise.add(1);\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n<extra_id_0>\notherwise.add(1);\n    return String.valueOf(otherwise);\n}",
      "function range": "16,5-41,5",
      "output": [
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {(digit_list.length-1",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length<",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {(digit_list.length>0",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list[low_",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list[0]",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {(digit_list[low_mid",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {(digit_list.length);",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length==",
        "\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n// buggy line:otherwise.addAll(Collections.nCopies(digit_list.length, 0));if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length>0) {if (digit_list.length-"
      ]
    },
    "NEXT_PERMUTATION": {
      "loc": "19-20",
      "input": "public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n    for (int i=perm.size()-2; i!=-1; i--) {\n        if (perm.get(i) < perm.get(i+1)) {\n            for (int j=perm.size()-1; j!=i; j--) {\n// buggy line:                if (perm.get(j) < perm.get(i)) {\n                <extra_id_0>\n                    ArrayList<Integer> next_perm = perm;\n                    int temp_j = perm.get(j);\n                    int temp_i = perm.get(i);\n                    next_perm.set(i,temp_j);\n                    next_perm.set(j,temp_i);\n                    ArrayList<Integer> reversed = new ArrayList<Integer>(100);\n                    for (int k=next_perm.size()-1; k!=i; k--) {\n                        reversed.add(next_perm.get(k));\n                    }\n                    int q = i + 1;\n                    for (Integer replace : reversed) {\n                        next_perm.set(q, replace);\n                        q++;\n                    }\n                    return next_perm;\n                }\n            }\n        }\n    }\n    return new ArrayList<Integer>();\n}",
      "function range": "15,5-44,5",
      "output": [
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(j+",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(i+",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(i) < perm.get(j+",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--) {{(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(j",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(j);",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(j)",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--) {{(int j=perm.size()-1; j!=-1; j--) {(j) < perm.get(i",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(i) < perm.get(j);",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(i) < perm.get(i+",
        "//if (perm.get(i+1) < perm.get(j+1)) {(int i=perm.size()-2; i!=-1; i--) {(int j=perm.size()-1; j!=-1; j--){(int j=perm.size()-1; j!=-1; j--) {(i) < perm.get(j)"
      ]
    },
    "PASCAL": {
      "loc": "22-23",
      "input": "public static ArrayList<ArrayList<Integer>> pascal(int n) {\n    ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> init = new ArrayList<Integer>();\n    init.add(1);\n    rows.add(init);\n    for (int r=1; r<n; r++) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n// buggy line:        for (int c=0; c<r; c++) {\n        <extra_id_0>\n            int upleft, upright;\n            if (c > 0) {\n                upleft = rows.get(r-1).get(c-1);\n            } else {\n                upleft = 0;\n            }\n            if (c < r) {\n                upright = rows.get(r-1).get(c);\n            } else {\n                upright = 0;\n            }\n            row.add(upleft+upright);\n        }\n        rows.add(row);\n    }\n    return rows;\n}",
      "function range": "14,5-40,5",
      "output": [
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft);",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft);",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);\nBRACErow.add(uple",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);\nBRACErow.add(uple",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upleft);\nBRACErow.add(uple",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);\nBRACErow.add(uple",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft)",
        "//row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upright);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft+upleft);row.add(upleft)"
      ]
    },
    "POSSIBLE_CHANGE": {
      "loc": "17-18",
      "input": "public static int possible_change(int[] coins, int total) {\n    if (total == 0) {\n        return 1;\n    }\n// buggy line:    if (total < 0) {\n    <extra_id_0>\n        return 0;\n    }\n    int first = coins[0];\n    int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n    return possible_change(coins, total-first) + possible_change(rest, total);\n}",
      "function range": "13,5-24,5",
      "output": [
        "//",
        "//0;",
        "//return",
        "}else {",
        "//1;",
        "default:",
        "-->",
        "//return 0;",
        "//return 1;",
        "breakpoint:"
      ]
    },
    "QUICKSORT": {
      "loc": "26-27",
      "input": "public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n    if (arr.isEmpty()) {\n        return new ArrayList<Integer>();\n    }\n    Integer pivot = arr.get(0);\n    ArrayList<Integer> lesser = new ArrayList<Integer>();\n    ArrayList<Integer> greater = new ArrayList<Integer>();\n    for (Integer x : arr.subList(1, arr.size())) {\n        if (x < pivot) {\n            lesser.add(x);\n// buggy line:        } else if (x > pivot) {\n        <extra_id_0>\n            greater.add(x);\n        }\n    }\n    ArrayList<Integer> middle = new ArrayList<Integer>();\n    middle.add(pivot);\n    lesser = quicksort(lesser);\n    greater = quicksort(greater);\n    middle.addAll(greater);\n    lesser.addAll(middle);\n    return lesser;\n}",
      "function range": "14,5-38,5",
      "output": [
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
        "//new ArrayList<Integer>();\n    greater.add(pivot);\n// buggynew ArrayList<Integer>();\n
      ]
    },
    "REVERSE_LINKED_LIST": {
      "loc": "20-20",
      "input": "public static Node reverse_linked_list(Node node) {\n    Node prevnode = null;\n    Node nextnode;\n    while (node != null) {\n        nextnode = node.getSuccessor();\n        node.setSuccessor(prevnode);\n// buggy line:        node = nextnode;\n        <extra_id_0>\n    }\n    return prevnode;\n}",
      "function range": "14,5-23,5",
      "output": [
        "prevnode =",
        "prevnode = node;",
        "prevnode = nextnode;",
        "prevnode=nextnode;",
        "prevnode=node;",
        "prevnode.setSuccessor(nextnode);",
        "prevnode =nextnode;",
        "prevnode =node;",
        "prevnode=null;",
        "prevnode = null;"
      ]
    },
    "RPN_EVAL": {
      "loc": "34-35",
      "input": "public static Double rpn_eval(ArrayList tokens) {\nMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\nop.put(\"+\", (a, b) -> a + b); \nop.put(\"-\", (a, b) -> a - b); \nop.put(\"*\", (a, b) -> a * b); \nop.put(\"/\", (a, b) -> a / b); \n    Stack stack = new Stack();\n    for (Object token : tokens) {\n        if (Double.class.isInstance(token)) {\n            stack.push((Double) token);\n        } else {\ntoken = (String) token;\n            Double a = (Double) stack.pop();\n            Double b = (Double) stack.pop();\nDouble c = 0.0;\nBinaryOperator<Double> bin_op = op.get(token);\n// buggy line:c= bin_op.apply(a,b);\n<extra_id_0>\n            stack.push(c);\n        }\n    }\n    return (Double) stack.pop();\n}",
      "function range": "15,5-40,5",
      "output": [
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size() - 1);\nokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokerokeroker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size() - 1);\nokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size()-1);\nokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\n",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size()-1);\nokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size() - 1);\nokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\noker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size()-1);\nokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\noker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size() - 1);\nokerokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size() - 1);\nokerokerokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\n",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size()-1);\nokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker{\n",
        "\n// buggy line:c= bin_op.apply(a,b);(String) tokens.get(tokens.size()-1);\nokerokerokeroker;\nokerokeroker;\nokerokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;\nokeroker;"
      ]
    },
    "SHORTEST_PATH_LENGTH": {
      "loc": "39-40",
      "input": "public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n    int n = length_by_edge.size();\n    Map<Node, Integer> unvisitedNodes = new HashMap<>();\n    Set<Node> visitedNodes = new HashSet<>();\n    unvisitedNodes.put(startnode, 0);\n    while (!unvisitedNodes.isEmpty()) {\n        Node node = getNodeWithMinDistance(unvisitedNodes);\n        int distance = unvisitedNodes.get(node);\n        unvisitedNodes.remove(node);\n        if (node.getValue() == goalnode.getValue()) {\n            return distance;\n        }\n        visitedNodes.add(node);\n        for (Node nextnode : node.getSuccessors()) {\n            if (visitedNodes.contains(nextnode)) {\n                continue;\n            }\n            if (unvisitedNodes.get(nextnode) == null) {\n                unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n            }\n            unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n// buggy line:                    unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n                    <extra_id_0>\n        }\n    }\n    return Integer.MAX_VALUE;\n}",
      "function range": "11,5-44,5",
      "output": [
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);if (unvisitedNodes",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);if (!unvisited",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);if (!visitedNodes",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n}}",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n}}\n",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);}{}",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);}}}",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (unvisitedNodes.contains(nextnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);}}{",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);if (unvisitedNodes.contains(nextnode)) {}}}",
        "if (unvisitedNodes.contains(nextnode)) {\n                continue;if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {if (!length_by_edge.contains(Arrays.asList(node, goalnode)) {unvisitedNodes.put(nextnode, Integer.MAX_VALUE);if (unvisitedNodes.contains(nextnode)) {}{}"
      ]
    },
    "SHORTEST_PATH_LENGTHS": {
      "loc": "38-39",
      "input": "public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n    Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n    for (int i = 0; i < numNodes; i++) {\n        for (int j =0; j < numNodes; j++) {\n            List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n            if (i == j) {\n                length_by_path.put(edge, 0);\n            }\n            else if (length_by_edge.containsKey(edge) ) {\n                length_by_path.put(edge, length_by_edge.get(edge));\n            } else {\n                length_by_path.put(edge, INF);\n            }\n        }\n    }\n    for (int k = 0; k < numNodes; k++) {\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n// buggy line:                        length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                        <extra_id_0>\n                length_by_path.put(Arrays.asList(i,j), update_length);\n            }\n        }\n    }\n    return length_by_path;\n}",
      "function range": "19,5-44,5",
      "output": [
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_path.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(length_by_edge",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_edge.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(length_by_edge",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));length_by_edge.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(length_by_edge.get",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_edge.containsKey(length_by_edge)) {\n                length_by_path.put(length_by_edge.get(length_by_",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_edge.containsKey(length_by_edge.get(length_by_edge)) {\n                length_by_path.put(Arrays.asList",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));length_by_edge.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(length_by_edge)));",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));length_by_edge.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(length_by_edge));\n",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_path.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(update_length))))",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_path.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(update_length)));",
        "if (length_by_path.containsKey(update_length)) {{\n                length_by_path.put(Arrays.asList(i,j)) + length_by_path.get(Arrays.asList(j,k)));if (length_by_edge.containsKey(length_by_edge.get(length_by_edge.get(length_by_edge.get(update_length))))"
      ]
    },
    "SHORTEST_PATHS": {
      "loc": "30-31",
      "input": "public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n    Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n    for (List<String> edge : weight_by_edge.keySet()) {\n            weight_by_node.put(edge.get(1), INF);\n            weight_by_node.put(edge.get(0), INF);\n    }\n    weight_by_node.put(source, 0);\n    for (int i = 0; i < weight_by_node.size(); i++) {\n        for (List<String> edge : weight_by_edge.keySet()) {\n            int update_weight = Math.min(\n                    weight_by_node.get(edge.get(0))\n                            + weight_by_edge.get(edge),\n                    weight_by_node.get(edge.get(1)));\n// buggy line:            weight_by_edge.put(edge, update_weight);\n            <extra_id_0>\n        }\n    }\n    return weight_by_node;\n}",
      "function range": "16,5-34,5",
      "output": [
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            +",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                           weight",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                           weight_by_node.get(edge.get(0))\n                            + weight",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight",
        "//weight_by_node.put(source, weight_by_edge.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            +weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                            + weight",
        "//weight_by_node.put(source, weight_by_edge.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            +weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_edge.get(edge.get(0))\n                            + weight",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                           weight_by_node.get(edge.get(0))\n                           weight",
        "//weight_by_node.put(source,weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_node.get(edge.get(0))\n                           weight_by_node.get(edge.get(0))\n                            +",
        "//weight_by_node.put(source, weight_by_edge.get(edge.get(0))\n                            + weight_by_node.get(edge.get(0))\n                            +weight_by_node.get(edge.get(0))\n                            + weight_by_node.get(edge.get(1))weight_by_edge.get(edge.get(0))\n                           weight"
      ]
    },
    "SHUNTING_YARD": {
      "loc": "34-34",
      "input": "public static List shunting_yard(ArrayList tokens) {\n    Map<String, Integer> precedence = new HashMap<String, Integer>();\n    precedence.put(\"+\",1);\n    precedence.put(\"-\",1);\n    precedence.put(\"*\",2);\n    precedence.put(\"/\",2);\n    ArrayList rpntokens = new ArrayList(100);\n    ArrayDeque opstack = new ArrayDeque();\n    for (Object token: tokens) {\n        if (Integer.class.isInstance(token)) {\n            rpntokens.add((Integer) token);\n        } else {\n            String operator = (String) token;\n            while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                rpntokens.add(opstack.pop());\n            }\n// buggy line:        }\n        <extra_id_0>\n    }\n    while (!opstack.isEmpty()) {\n        rpntokens.add(opstack.pop());\n    }\n    return rpntokens;\n}",
      "function range": "15,5-42,5",
      "output": [
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast()))))precedence.get(precedence.get(opstack.getLast()))",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast())))) {precedence.get(precedence.get(opstack.getLast()",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(opstack.getLast()))))precedence.get(precedence.get(opstack.getLast()))",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(opstack.getLast())))) {precedence.get(precedence.get(opstack.getLast()",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast()))))precedence.get(precedence.get(precedence.get(opstack",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast()))))precedence.get(precedence.get(opstack.getLast())))",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast()))))precedence.get(precedence.get(opstack.getFirst()))",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast())))) {precedence.get(precedence.get(opstack.getFirst()",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(precedence.get(precedence.get(precedence.get(opstack.getLast())))precedence.get(precedence.get(precedence.get(opstack.getLast())))) {precedence.get(precedence.get(precedence.get(op",
        "if (!opstack.isEmpty()) {\n                rpntokens.add(opstack.pop());precedence.get(precedence.get(opstack.getLast()))precedence.get(precedence.get(opstack.getLast()))precedence.get(precedence.get(opstack.getLast()))precedence.get(precedence.get(opstack.getLast()))precedence"
      ]
    },
    "SIEVE": {
      "loc": "41-42",
      "input": "public static ArrayList<Integer> sieve(Integer max) {\n    ArrayList<Integer> primes = new ArrayList<Integer>();\n    for (int n=2; n<max+1; n++) {\n// buggy line:        if (any(list_comp(n, primes))) {\n        <extra_id_0>\n            primes.add(n);\n        }\n    }\n    return primes;\n}",
      "function range": "38,5-46,5",
      "output": [
        "//",
        "if(any(list_comp(n,primes))) {",
        "if(any(list_comp(n,primes)))) {",
        "if(any(list_comp(n,primes)))",
        "if(any(list_comp(n,primes))))",
        "if(any(list_comp(n, primes))) {",
        "if(any(list_comp(n,primes)))){",
        "if(any(list_comp(n)))) {",
        "if(any(list_comp(n, primes)))) {",
        "if(any(list_comp(n, primes))))"
      ]
    },
    "SQRT": {
      "loc": "16-17",
      "input": "public static double sqrt(double x, double epsilon) {\n    double approx = x / 2f;\n// buggy line:    while (Math.abs(x-approx) > epsilon) {\n    <extra_id_0>\n        approx = 0.5f * (approx + x / approx);\n    }\n    return approx;\n}",
      "function range": "14,5-20,5",
      "output": [
        "//",
        "break;",
        "//buggy line:",
        "++x;",
        "default:",
        "//buggy line:   ",
        "}",
        "print(x);",
        "//buggy line:BeEmpty",
        "-->0.5f;"
      ]
    },
    "SUBSEQUENCES": {
      "loc": "16-17",
      "input": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n    if (k == 0) {\n// buggy line:        return new ArrayList();\n        <extra_id_0>\n    }\n    ArrayList ret = new ArrayList(50);\n    for (int i=a; i<b+1-k; i++) {\n        ArrayList base = new ArrayList(50);\n        for (ArrayList rest : subsequences(i+1, b, k-1)) {\n            rest.add(0,i);\n            base.add(rest);\n        }\n        ret.addAll(base);\n    }\n    return ret;\n}",
      "function range": "14,5-31,5",
      "output": [
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:",
        "//Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine;",
        "//Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine",
        "//Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine"
      ]
    },
    "TO_BASE": {
      "loc": "21-22",
      "input": "public static String to_base(int num, int b) {\n    String result = \"\";\n    String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    while (num > 0) {\n        i = num % b;\n        num = num / b; \n// buggy line:        result = result + String.valueOf(alphabet.charAt(i));\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        "//",
        "}",
        "break;",
        "++",
        "goto",
        "}}",
        "++num;",
        "--;",
        "break",
        "--"
      ]
    },
    "TOPOLOGICAL_ORDERING": {
      "loc": "17-18",
      "input": "public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n    ArrayList<Node> orderedNodes = new ArrayList<Node>();\n    for (Node node : directedGraph) {\n        if (node.getPredecessors().isEmpty()) {\n            orderedNodes.add(node);\n        }\n    }\n    int listSize = orderedNodes.size();\n    for (int i = 0; i < listSize; i++) {\n        Node node = orderedNodes.get(i);\n        for (Node nextNode : node.getSuccessors()) {\n// buggy line:            if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n            <extra_id_0>\n                orderedNodes.add(nextNode);\n                listSize++;\n            }\n        }\n    }\n    return orderedNodes;\n}",
      "function range": "5,5-24,5",
      "output": [
        "\n// buggy line:",
        "\n// buggy line:new ArrayList<Node>();}",
        "\n// buggy line:}}",
        "\n// buggy line:new ArrayList<Node>();\npaypal}",
        "\n// buggy line:new ArrayList<Node>();\n\\\\\\\\",
        "\n// buggy line:new ArrayList<Node>();",
        "\n// buggy line:new ArrayList<Node>();\npaypallistSize++;\npaypal }\npaypal",
        "\n// buggy line:new ArrayList<Node>();\npaypallistSize++;\npaypal",
        "\n// buggy line:new ArrayList<Node>();\npaypal}\npaypal",
        "\n// buggy line:{}"
      ]
    },
    "WRAP": {
      "loc": "32-32",
      "input": "public static ArrayList<String> wrap(String text, int cols) {\n    ArrayList<String> lines = new ArrayList<String>();\n    String line;\n    while (text.length() > cols) {\n        int end = text.lastIndexOf(\" \", cols); \n        if (end == -1) {\n            end = cols;\n        }\n        line = text.substring(0,end);\n        text = text.substring(end);\n        lines.add(line);\n    }\n// buggy line:    return lines;\n    <extra_id_0>\n}",
      "function range": "18,5-33,5",
      "output": [
        "}",
        "//",
        "}}",
        "return",
        "default:",
        "break;",
        "energies",
        "enerator",
        "updater",
        "default :"
      ]
    },
    "POWERSET": {
      "loc": "23-30",
      "input": "public static ArrayList<ArrayList> powerset(ArrayList arr) {\n    if (!arr.isEmpty()) {\n        Object first = arr.get(0);\n        arr.remove(0);\n        ArrayList rest = arr;\n        ArrayList<ArrayList> rest_subsets = powerset(rest);\n        ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n        ArrayList to_add = new ArrayList(100);\n// buggy line:        to_add.add(first);\n// buggy line:        for (ArrayList subset : rest_subsets) {\n// buggy line:            to_add.addAll(subset);\n// buggy line:        }\n// buggy line:        output.add(to_add);\n// buggy line:        return output;\n        <extra_id_0>\n    } else {\n        ArrayList empty_set = new ArrayList<ArrayList>();\n        empty_set.add(new ArrayList());\n        return empty_set;\n    }\n}",
      "function range": "14,5-35,5",
      "output": [
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList();\n//",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList();\n//new ArrayList<ArrayList>();\n//",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n// buggy line:",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList();\n//new ArrayList();\n// buggy",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList();\n//new ArrayList();\n//new ArrayList",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList(100);",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList();\n//new ArrayList();\n//new",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n// buggynew ArrayList",
        "//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n//new ArrayList<ArrayList>();\n// buggynew"
      ]
    }
  },
  "model": "codet5-small"
}